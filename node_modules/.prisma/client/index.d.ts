
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Borrower
 * 
 */
export type Borrower = $Result.DefaultSelection<Prisma.$BorrowerPayload>
/**
 * Model Student
 * 
 */
export type Student = $Result.DefaultSelection<Prisma.$StudentPayload>
/**
 * Model Degree
 * 
 */
export type Degree = $Result.DefaultSelection<Prisma.$DegreePayload>
/**
 * Model Teacher
 * 
 */
export type Teacher = $Result.DefaultSelection<Prisma.$TeacherPayload>
/**
 * Model Assistant
 * 
 */
export type Assistant = $Result.DefaultSelection<Prisma.$AssistantPayload>
/**
 * Model product
 * 
 */
export type product = $Result.DefaultSelection<Prisma.$productPayload>
/**
 * Model Lending
 * 
 */
export type Lending = $Result.DefaultSelection<Prisma.$LendingPayload>
/**
 * Model LendingProduct
 * 
 */
export type LendingProduct = $Result.DefaultSelection<Prisma.$LendingProductPayload>
/**
 * Model Alert
 * 
 */
export type Alert = $Result.DefaultSelection<Prisma.$AlertPayload>
/**
 * Model AlertLending
 * 
 */
export type AlertLending = $Result.DefaultSelection<Prisma.$AlertLendingPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserType: {
  Student: 'Student',
  Teacher: 'Teacher',
  Assistant: 'Assistant'
};

export type UserType = (typeof UserType)[keyof typeof UserType]


export const LendingState: {
  Active: 'Active',
  Pending: 'Pending',
  Finalized: 'Finalized',
  Inactive: 'Inactive'
};

export type LendingState = (typeof LendingState)[keyof typeof LendingState]

}

export type UserType = $Enums.UserType

export const UserType: typeof $Enums.UserType

export type LendingState = $Enums.LendingState

export const LendingState: typeof $Enums.LendingState

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Borrowers
 * const borrowers = await prisma.borrower.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Borrowers
   * const borrowers = await prisma.borrower.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.borrower`: Exposes CRUD operations for the **Borrower** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Borrowers
    * const borrowers = await prisma.borrower.findMany()
    * ```
    */
  get borrower(): Prisma.BorrowerDelegate<ExtArgs>;

  /**
   * `prisma.student`: Exposes CRUD operations for the **Student** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Students
    * const students = await prisma.student.findMany()
    * ```
    */
  get student(): Prisma.StudentDelegate<ExtArgs>;

  /**
   * `prisma.degree`: Exposes CRUD operations for the **Degree** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Degrees
    * const degrees = await prisma.degree.findMany()
    * ```
    */
  get degree(): Prisma.DegreeDelegate<ExtArgs>;

  /**
   * `prisma.teacher`: Exposes CRUD operations for the **Teacher** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Teachers
    * const teachers = await prisma.teacher.findMany()
    * ```
    */
  get teacher(): Prisma.TeacherDelegate<ExtArgs>;

  /**
   * `prisma.assistant`: Exposes CRUD operations for the **Assistant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Assistants
    * const assistants = await prisma.assistant.findMany()
    * ```
    */
  get assistant(): Prisma.AssistantDelegate<ExtArgs>;

  /**
   * `prisma.product`: Exposes CRUD operations for the **product** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.product.findMany()
    * ```
    */
  get product(): Prisma.productDelegate<ExtArgs>;

  /**
   * `prisma.lending`: Exposes CRUD operations for the **Lending** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Lendings
    * const lendings = await prisma.lending.findMany()
    * ```
    */
  get lending(): Prisma.LendingDelegate<ExtArgs>;

  /**
   * `prisma.lendingProduct`: Exposes CRUD operations for the **LendingProduct** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LendingProducts
    * const lendingProducts = await prisma.lendingProduct.findMany()
    * ```
    */
  get lendingProduct(): Prisma.LendingProductDelegate<ExtArgs>;

  /**
   * `prisma.alert`: Exposes CRUD operations for the **Alert** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Alerts
    * const alerts = await prisma.alert.findMany()
    * ```
    */
  get alert(): Prisma.AlertDelegate<ExtArgs>;

  /**
   * `prisma.alertLending`: Exposes CRUD operations for the **AlertLending** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AlertLendings
    * const alertLendings = await prisma.alertLending.findMany()
    * ```
    */
  get alertLending(): Prisma.AlertLendingDelegate<ExtArgs>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: bf0e5e8a04cada8225617067eaa03d041e2bba36
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Borrower: 'Borrower',
    Student: 'Student',
    Degree: 'Degree',
    Teacher: 'Teacher',
    Assistant: 'Assistant',
    product: 'product',
    Lending: 'Lending',
    LendingProduct: 'LendingProduct',
    Alert: 'Alert',
    AlertLending: 'AlertLending',
    User: 'User'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "borrower" | "student" | "degree" | "teacher" | "assistant" | "product" | "lending" | "lendingProduct" | "alert" | "alertLending" | "user"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Borrower: {
        payload: Prisma.$BorrowerPayload<ExtArgs>
        fields: Prisma.BorrowerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BorrowerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BorrowerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BorrowerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BorrowerPayload>
          }
          findFirst: {
            args: Prisma.BorrowerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BorrowerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BorrowerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BorrowerPayload>
          }
          findMany: {
            args: Prisma.BorrowerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BorrowerPayload>[]
          }
          create: {
            args: Prisma.BorrowerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BorrowerPayload>
          }
          createMany: {
            args: Prisma.BorrowerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.BorrowerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BorrowerPayload>
          }
          update: {
            args: Prisma.BorrowerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BorrowerPayload>
          }
          deleteMany: {
            args: Prisma.BorrowerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BorrowerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BorrowerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BorrowerPayload>
          }
          aggregate: {
            args: Prisma.BorrowerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBorrower>
          }
          groupBy: {
            args: Prisma.BorrowerGroupByArgs<ExtArgs>
            result: $Utils.Optional<BorrowerGroupByOutputType>[]
          }
          count: {
            args: Prisma.BorrowerCountArgs<ExtArgs>
            result: $Utils.Optional<BorrowerCountAggregateOutputType> | number
          }
        }
      }
      Student: {
        payload: Prisma.$StudentPayload<ExtArgs>
        fields: Prisma.StudentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StudentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StudentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          findFirst: {
            args: Prisma.StudentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StudentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          findMany: {
            args: Prisma.StudentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>[]
          }
          create: {
            args: Prisma.StudentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          createMany: {
            args: Prisma.StudentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.StudentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          update: {
            args: Prisma.StudentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          deleteMany: {
            args: Prisma.StudentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StudentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.StudentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          aggregate: {
            args: Prisma.StudentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudent>
          }
          groupBy: {
            args: Prisma.StudentGroupByArgs<ExtArgs>
            result: $Utils.Optional<StudentGroupByOutputType>[]
          }
          count: {
            args: Prisma.StudentCountArgs<ExtArgs>
            result: $Utils.Optional<StudentCountAggregateOutputType> | number
          }
        }
      }
      Degree: {
        payload: Prisma.$DegreePayload<ExtArgs>
        fields: Prisma.DegreeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DegreeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DegreePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DegreeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DegreePayload>
          }
          findFirst: {
            args: Prisma.DegreeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DegreePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DegreeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DegreePayload>
          }
          findMany: {
            args: Prisma.DegreeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DegreePayload>[]
          }
          create: {
            args: Prisma.DegreeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DegreePayload>
          }
          createMany: {
            args: Prisma.DegreeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.DegreeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DegreePayload>
          }
          update: {
            args: Prisma.DegreeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DegreePayload>
          }
          deleteMany: {
            args: Prisma.DegreeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DegreeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DegreeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DegreePayload>
          }
          aggregate: {
            args: Prisma.DegreeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDegree>
          }
          groupBy: {
            args: Prisma.DegreeGroupByArgs<ExtArgs>
            result: $Utils.Optional<DegreeGroupByOutputType>[]
          }
          count: {
            args: Prisma.DegreeCountArgs<ExtArgs>
            result: $Utils.Optional<DegreeCountAggregateOutputType> | number
          }
        }
      }
      Teacher: {
        payload: Prisma.$TeacherPayload<ExtArgs>
        fields: Prisma.TeacherFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TeacherFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeacherFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          findFirst: {
            args: Prisma.TeacherFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeacherFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          findMany: {
            args: Prisma.TeacherFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>[]
          }
          create: {
            args: Prisma.TeacherCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          createMany: {
            args: Prisma.TeacherCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.TeacherDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          update: {
            args: Prisma.TeacherUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          deleteMany: {
            args: Prisma.TeacherDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TeacherUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TeacherUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          aggregate: {
            args: Prisma.TeacherAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeacher>
          }
          groupBy: {
            args: Prisma.TeacherGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeacherGroupByOutputType>[]
          }
          count: {
            args: Prisma.TeacherCountArgs<ExtArgs>
            result: $Utils.Optional<TeacherCountAggregateOutputType> | number
          }
        }
      }
      Assistant: {
        payload: Prisma.$AssistantPayload<ExtArgs>
        fields: Prisma.AssistantFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AssistantFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssistantPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AssistantFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssistantPayload>
          }
          findFirst: {
            args: Prisma.AssistantFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssistantPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AssistantFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssistantPayload>
          }
          findMany: {
            args: Prisma.AssistantFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssistantPayload>[]
          }
          create: {
            args: Prisma.AssistantCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssistantPayload>
          }
          createMany: {
            args: Prisma.AssistantCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AssistantDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssistantPayload>
          }
          update: {
            args: Prisma.AssistantUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssistantPayload>
          }
          deleteMany: {
            args: Prisma.AssistantDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AssistantUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AssistantUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssistantPayload>
          }
          aggregate: {
            args: Prisma.AssistantAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAssistant>
          }
          groupBy: {
            args: Prisma.AssistantGroupByArgs<ExtArgs>
            result: $Utils.Optional<AssistantGroupByOutputType>[]
          }
          count: {
            args: Prisma.AssistantCountArgs<ExtArgs>
            result: $Utils.Optional<AssistantCountAggregateOutputType> | number
          }
        }
      }
      product: {
        payload: Prisma.$productPayload<ExtArgs>
        fields: Prisma.productFieldRefs
        operations: {
          findUnique: {
            args: Prisma.productFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.productFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productPayload>
          }
          findFirst: {
            args: Prisma.productFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.productFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productPayload>
          }
          findMany: {
            args: Prisma.productFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productPayload>[]
          }
          create: {
            args: Prisma.productCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productPayload>
          }
          createMany: {
            args: Prisma.productCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.productDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productPayload>
          }
          update: {
            args: Prisma.productUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productPayload>
          }
          deleteMany: {
            args: Prisma.productDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.productUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.productUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productPayload>
          }
          aggregate: {
            args: Prisma.ProductAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProduct>
          }
          groupBy: {
            args: Prisma.productGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductGroupByOutputType>[]
          }
          count: {
            args: Prisma.productCountArgs<ExtArgs>
            result: $Utils.Optional<ProductCountAggregateOutputType> | number
          }
        }
      }
      Lending: {
        payload: Prisma.$LendingPayload<ExtArgs>
        fields: Prisma.LendingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LendingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LendingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LendingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LendingPayload>
          }
          findFirst: {
            args: Prisma.LendingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LendingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LendingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LendingPayload>
          }
          findMany: {
            args: Prisma.LendingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LendingPayload>[]
          }
          create: {
            args: Prisma.LendingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LendingPayload>
          }
          createMany: {
            args: Prisma.LendingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.LendingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LendingPayload>
          }
          update: {
            args: Prisma.LendingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LendingPayload>
          }
          deleteMany: {
            args: Prisma.LendingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LendingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LendingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LendingPayload>
          }
          aggregate: {
            args: Prisma.LendingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLending>
          }
          groupBy: {
            args: Prisma.LendingGroupByArgs<ExtArgs>
            result: $Utils.Optional<LendingGroupByOutputType>[]
          }
          count: {
            args: Prisma.LendingCountArgs<ExtArgs>
            result: $Utils.Optional<LendingCountAggregateOutputType> | number
          }
        }
      }
      LendingProduct: {
        payload: Prisma.$LendingProductPayload<ExtArgs>
        fields: Prisma.LendingProductFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LendingProductFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LendingProductPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LendingProductFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LendingProductPayload>
          }
          findFirst: {
            args: Prisma.LendingProductFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LendingProductPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LendingProductFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LendingProductPayload>
          }
          findMany: {
            args: Prisma.LendingProductFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LendingProductPayload>[]
          }
          create: {
            args: Prisma.LendingProductCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LendingProductPayload>
          }
          createMany: {
            args: Prisma.LendingProductCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.LendingProductDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LendingProductPayload>
          }
          update: {
            args: Prisma.LendingProductUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LendingProductPayload>
          }
          deleteMany: {
            args: Prisma.LendingProductDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LendingProductUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LendingProductUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LendingProductPayload>
          }
          aggregate: {
            args: Prisma.LendingProductAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLendingProduct>
          }
          groupBy: {
            args: Prisma.LendingProductGroupByArgs<ExtArgs>
            result: $Utils.Optional<LendingProductGroupByOutputType>[]
          }
          count: {
            args: Prisma.LendingProductCountArgs<ExtArgs>
            result: $Utils.Optional<LendingProductCountAggregateOutputType> | number
          }
        }
      }
      Alert: {
        payload: Prisma.$AlertPayload<ExtArgs>
        fields: Prisma.AlertFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AlertFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AlertFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload>
          }
          findFirst: {
            args: Prisma.AlertFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AlertFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload>
          }
          findMany: {
            args: Prisma.AlertFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload>[]
          }
          create: {
            args: Prisma.AlertCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload>
          }
          createMany: {
            args: Prisma.AlertCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AlertDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload>
          }
          update: {
            args: Prisma.AlertUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload>
          }
          deleteMany: {
            args: Prisma.AlertDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AlertUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AlertUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload>
          }
          aggregate: {
            args: Prisma.AlertAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAlert>
          }
          groupBy: {
            args: Prisma.AlertGroupByArgs<ExtArgs>
            result: $Utils.Optional<AlertGroupByOutputType>[]
          }
          count: {
            args: Prisma.AlertCountArgs<ExtArgs>
            result: $Utils.Optional<AlertCountAggregateOutputType> | number
          }
        }
      }
      AlertLending: {
        payload: Prisma.$AlertLendingPayload<ExtArgs>
        fields: Prisma.AlertLendingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AlertLendingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertLendingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AlertLendingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertLendingPayload>
          }
          findFirst: {
            args: Prisma.AlertLendingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertLendingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AlertLendingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertLendingPayload>
          }
          findMany: {
            args: Prisma.AlertLendingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertLendingPayload>[]
          }
          create: {
            args: Prisma.AlertLendingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertLendingPayload>
          }
          createMany: {
            args: Prisma.AlertLendingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AlertLendingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertLendingPayload>
          }
          update: {
            args: Prisma.AlertLendingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertLendingPayload>
          }
          deleteMany: {
            args: Prisma.AlertLendingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AlertLendingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AlertLendingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertLendingPayload>
          }
          aggregate: {
            args: Prisma.AlertLendingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAlertLending>
          }
          groupBy: {
            args: Prisma.AlertLendingGroupByArgs<ExtArgs>
            result: $Utils.Optional<AlertLendingGroupByOutputType>[]
          }
          count: {
            args: Prisma.AlertLendingCountArgs<ExtArgs>
            result: $Utils.Optional<AlertLendingCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type BorrowerCountOutputType
   */

  export type BorrowerCountOutputType = {
    lendings: number
  }

  export type BorrowerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lendings?: boolean | BorrowerCountOutputTypeCountLendingsArgs
  }

  // Custom InputTypes
  /**
   * BorrowerCountOutputType without action
   */
  export type BorrowerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BorrowerCountOutputType
     */
    select?: BorrowerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BorrowerCountOutputType without action
   */
  export type BorrowerCountOutputTypeCountLendingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LendingWhereInput
  }


  /**
   * Count Type DegreeCountOutputType
   */

  export type DegreeCountOutputType = {
    students: number
  }

  export type DegreeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    students?: boolean | DegreeCountOutputTypeCountStudentsArgs
  }

  // Custom InputTypes
  /**
   * DegreeCountOutputType without action
   */
  export type DegreeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DegreeCountOutputType
     */
    select?: DegreeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DegreeCountOutputType without action
   */
  export type DegreeCountOutputTypeCountStudentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentWhereInput
  }


  /**
   * Count Type TeacherCountOutputType
   */

  export type TeacherCountOutputType = {
    lendings: number
  }

  export type TeacherCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lendings?: boolean | TeacherCountOutputTypeCountLendingsArgs
  }

  // Custom InputTypes
  /**
   * TeacherCountOutputType without action
   */
  export type TeacherCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherCountOutputType
     */
    select?: TeacherCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TeacherCountOutputType without action
   */
  export type TeacherCountOutputTypeCountLendingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LendingWhereInput
  }


  /**
   * Count Type ProductCountOutputType
   */

  export type ProductCountOutputType = {
    lendingProducts: number
  }

  export type ProductCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lendingProducts?: boolean | ProductCountOutputTypeCountLendingProductsArgs
  }

  // Custom InputTypes
  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCountOutputType
     */
    select?: ProductCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountLendingProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LendingProductWhereInput
  }


  /**
   * Count Type LendingCountOutputType
   */

  export type LendingCountOutputType = {
    alerts: number
    lendingProducts: number
  }

  export type LendingCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    alerts?: boolean | LendingCountOutputTypeCountAlertsArgs
    lendingProducts?: boolean | LendingCountOutputTypeCountLendingProductsArgs
  }

  // Custom InputTypes
  /**
   * LendingCountOutputType without action
   */
  export type LendingCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LendingCountOutputType
     */
    select?: LendingCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LendingCountOutputType without action
   */
  export type LendingCountOutputTypeCountAlertsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlertLendingWhereInput
  }

  /**
   * LendingCountOutputType without action
   */
  export type LendingCountOutputTypeCountLendingProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LendingProductWhereInput
  }


  /**
   * Count Type AlertCountOutputType
   */

  export type AlertCountOutputType = {
    lendings: number
  }

  export type AlertCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lendings?: boolean | AlertCountOutputTypeCountLendingsArgs
  }

  // Custom InputTypes
  /**
   * AlertCountOutputType without action
   */
  export type AlertCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlertCountOutputType
     */
    select?: AlertCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AlertCountOutputType without action
   */
  export type AlertCountOutputTypeCountLendingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlertLendingWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Borrower
   */

  export type AggregateBorrower = {
    _count: BorrowerCountAggregateOutputType | null
    _avg: BorrowerAvgAggregateOutputType | null
    _sum: BorrowerSumAggregateOutputType | null
    _min: BorrowerMinAggregateOutputType | null
    _max: BorrowerMaxAggregateOutputType | null
  }

  export type BorrowerAvgAggregateOutputType = {
    id: number | null
    phoneNumber: number | null
  }

  export type BorrowerSumAggregateOutputType = {
    id: number | null
    phoneNumber: number | null
  }

  export type BorrowerMinAggregateOutputType = {
    id: number | null
    state: boolean | null
    rut: string | null
    name: string | null
    mail: string | null
    phoneNumber: number | null
    type: $Enums.UserType | null
  }

  export type BorrowerMaxAggregateOutputType = {
    id: number | null
    state: boolean | null
    rut: string | null
    name: string | null
    mail: string | null
    phoneNumber: number | null
    type: $Enums.UserType | null
  }

  export type BorrowerCountAggregateOutputType = {
    id: number
    state: number
    rut: number
    name: number
    mail: number
    phoneNumber: number
    type: number
    _all: number
  }


  export type BorrowerAvgAggregateInputType = {
    id?: true
    phoneNumber?: true
  }

  export type BorrowerSumAggregateInputType = {
    id?: true
    phoneNumber?: true
  }

  export type BorrowerMinAggregateInputType = {
    id?: true
    state?: true
    rut?: true
    name?: true
    mail?: true
    phoneNumber?: true
    type?: true
  }

  export type BorrowerMaxAggregateInputType = {
    id?: true
    state?: true
    rut?: true
    name?: true
    mail?: true
    phoneNumber?: true
    type?: true
  }

  export type BorrowerCountAggregateInputType = {
    id?: true
    state?: true
    rut?: true
    name?: true
    mail?: true
    phoneNumber?: true
    type?: true
    _all?: true
  }

  export type BorrowerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Borrower to aggregate.
     */
    where?: BorrowerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Borrowers to fetch.
     */
    orderBy?: BorrowerOrderByWithRelationInput | BorrowerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BorrowerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Borrowers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Borrowers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Borrowers
    **/
    _count?: true | BorrowerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BorrowerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BorrowerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BorrowerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BorrowerMaxAggregateInputType
  }

  export type GetBorrowerAggregateType<T extends BorrowerAggregateArgs> = {
        [P in keyof T & keyof AggregateBorrower]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBorrower[P]>
      : GetScalarType<T[P], AggregateBorrower[P]>
  }




  export type BorrowerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BorrowerWhereInput
    orderBy?: BorrowerOrderByWithAggregationInput | BorrowerOrderByWithAggregationInput[]
    by: BorrowerScalarFieldEnum[] | BorrowerScalarFieldEnum
    having?: BorrowerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BorrowerCountAggregateInputType | true
    _avg?: BorrowerAvgAggregateInputType
    _sum?: BorrowerSumAggregateInputType
    _min?: BorrowerMinAggregateInputType
    _max?: BorrowerMaxAggregateInputType
  }

  export type BorrowerGroupByOutputType = {
    id: number
    state: boolean
    rut: string
    name: string
    mail: string | null
    phoneNumber: number | null
    type: $Enums.UserType
    _count: BorrowerCountAggregateOutputType | null
    _avg: BorrowerAvgAggregateOutputType | null
    _sum: BorrowerSumAggregateOutputType | null
    _min: BorrowerMinAggregateOutputType | null
    _max: BorrowerMaxAggregateOutputType | null
  }

  type GetBorrowerGroupByPayload<T extends BorrowerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BorrowerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BorrowerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BorrowerGroupByOutputType[P]>
            : GetScalarType<T[P], BorrowerGroupByOutputType[P]>
        }
      >
    >


  export type BorrowerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    state?: boolean
    rut?: boolean
    name?: boolean
    mail?: boolean
    phoneNumber?: boolean
    type?: boolean
    lendings?: boolean | Borrower$lendingsArgs<ExtArgs>
    student?: boolean | Borrower$studentArgs<ExtArgs>
    teacher?: boolean | Borrower$teacherArgs<ExtArgs>
    assistant?: boolean | Borrower$assistantArgs<ExtArgs>
    _count?: boolean | BorrowerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["borrower"]>


  export type BorrowerSelectScalar = {
    id?: boolean
    state?: boolean
    rut?: boolean
    name?: boolean
    mail?: boolean
    phoneNumber?: boolean
    type?: boolean
  }

  export type BorrowerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lendings?: boolean | Borrower$lendingsArgs<ExtArgs>
    student?: boolean | Borrower$studentArgs<ExtArgs>
    teacher?: boolean | Borrower$teacherArgs<ExtArgs>
    assistant?: boolean | Borrower$assistantArgs<ExtArgs>
    _count?: boolean | BorrowerCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $BorrowerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Borrower"
    objects: {
      lendings: Prisma.$LendingPayload<ExtArgs>[]
      student: Prisma.$StudentPayload<ExtArgs> | null
      teacher: Prisma.$TeacherPayload<ExtArgs> | null
      assistant: Prisma.$AssistantPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      state: boolean
      rut: string
      name: string
      mail: string | null
      phoneNumber: number | null
      type: $Enums.UserType
    }, ExtArgs["result"]["borrower"]>
    composites: {}
  }

  type BorrowerGetPayload<S extends boolean | null | undefined | BorrowerDefaultArgs> = $Result.GetResult<Prisma.$BorrowerPayload, S>

  type BorrowerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BorrowerFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BorrowerCountAggregateInputType | true
    }

  export interface BorrowerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Borrower'], meta: { name: 'Borrower' } }
    /**
     * Find zero or one Borrower that matches the filter.
     * @param {BorrowerFindUniqueArgs} args - Arguments to find a Borrower
     * @example
     * // Get one Borrower
     * const borrower = await prisma.borrower.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BorrowerFindUniqueArgs>(args: SelectSubset<T, BorrowerFindUniqueArgs<ExtArgs>>): Prisma__BorrowerClient<$Result.GetResult<Prisma.$BorrowerPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Borrower that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BorrowerFindUniqueOrThrowArgs} args - Arguments to find a Borrower
     * @example
     * // Get one Borrower
     * const borrower = await prisma.borrower.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BorrowerFindUniqueOrThrowArgs>(args: SelectSubset<T, BorrowerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BorrowerClient<$Result.GetResult<Prisma.$BorrowerPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Borrower that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BorrowerFindFirstArgs} args - Arguments to find a Borrower
     * @example
     * // Get one Borrower
     * const borrower = await prisma.borrower.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BorrowerFindFirstArgs>(args?: SelectSubset<T, BorrowerFindFirstArgs<ExtArgs>>): Prisma__BorrowerClient<$Result.GetResult<Prisma.$BorrowerPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Borrower that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BorrowerFindFirstOrThrowArgs} args - Arguments to find a Borrower
     * @example
     * // Get one Borrower
     * const borrower = await prisma.borrower.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BorrowerFindFirstOrThrowArgs>(args?: SelectSubset<T, BorrowerFindFirstOrThrowArgs<ExtArgs>>): Prisma__BorrowerClient<$Result.GetResult<Prisma.$BorrowerPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Borrowers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BorrowerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Borrowers
     * const borrowers = await prisma.borrower.findMany()
     * 
     * // Get first 10 Borrowers
     * const borrowers = await prisma.borrower.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const borrowerWithIdOnly = await prisma.borrower.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BorrowerFindManyArgs>(args?: SelectSubset<T, BorrowerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BorrowerPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Borrower.
     * @param {BorrowerCreateArgs} args - Arguments to create a Borrower.
     * @example
     * // Create one Borrower
     * const Borrower = await prisma.borrower.create({
     *   data: {
     *     // ... data to create a Borrower
     *   }
     * })
     * 
     */
    create<T extends BorrowerCreateArgs>(args: SelectSubset<T, BorrowerCreateArgs<ExtArgs>>): Prisma__BorrowerClient<$Result.GetResult<Prisma.$BorrowerPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Borrowers.
     * @param {BorrowerCreateManyArgs} args - Arguments to create many Borrowers.
     * @example
     * // Create many Borrowers
     * const borrower = await prisma.borrower.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BorrowerCreateManyArgs>(args?: SelectSubset<T, BorrowerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Borrower.
     * @param {BorrowerDeleteArgs} args - Arguments to delete one Borrower.
     * @example
     * // Delete one Borrower
     * const Borrower = await prisma.borrower.delete({
     *   where: {
     *     // ... filter to delete one Borrower
     *   }
     * })
     * 
     */
    delete<T extends BorrowerDeleteArgs>(args: SelectSubset<T, BorrowerDeleteArgs<ExtArgs>>): Prisma__BorrowerClient<$Result.GetResult<Prisma.$BorrowerPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Borrower.
     * @param {BorrowerUpdateArgs} args - Arguments to update one Borrower.
     * @example
     * // Update one Borrower
     * const borrower = await prisma.borrower.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BorrowerUpdateArgs>(args: SelectSubset<T, BorrowerUpdateArgs<ExtArgs>>): Prisma__BorrowerClient<$Result.GetResult<Prisma.$BorrowerPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Borrowers.
     * @param {BorrowerDeleteManyArgs} args - Arguments to filter Borrowers to delete.
     * @example
     * // Delete a few Borrowers
     * const { count } = await prisma.borrower.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BorrowerDeleteManyArgs>(args?: SelectSubset<T, BorrowerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Borrowers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BorrowerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Borrowers
     * const borrower = await prisma.borrower.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BorrowerUpdateManyArgs>(args: SelectSubset<T, BorrowerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Borrower.
     * @param {BorrowerUpsertArgs} args - Arguments to update or create a Borrower.
     * @example
     * // Update or create a Borrower
     * const borrower = await prisma.borrower.upsert({
     *   create: {
     *     // ... data to create a Borrower
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Borrower we want to update
     *   }
     * })
     */
    upsert<T extends BorrowerUpsertArgs>(args: SelectSubset<T, BorrowerUpsertArgs<ExtArgs>>): Prisma__BorrowerClient<$Result.GetResult<Prisma.$BorrowerPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Borrowers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BorrowerCountArgs} args - Arguments to filter Borrowers to count.
     * @example
     * // Count the number of Borrowers
     * const count = await prisma.borrower.count({
     *   where: {
     *     // ... the filter for the Borrowers we want to count
     *   }
     * })
    **/
    count<T extends BorrowerCountArgs>(
      args?: Subset<T, BorrowerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BorrowerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Borrower.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BorrowerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BorrowerAggregateArgs>(args: Subset<T, BorrowerAggregateArgs>): Prisma.PrismaPromise<GetBorrowerAggregateType<T>>

    /**
     * Group by Borrower.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BorrowerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BorrowerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BorrowerGroupByArgs['orderBy'] }
        : { orderBy?: BorrowerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BorrowerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBorrowerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Borrower model
   */
  readonly fields: BorrowerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Borrower.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BorrowerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    lendings<T extends Borrower$lendingsArgs<ExtArgs> = {}>(args?: Subset<T, Borrower$lendingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LendingPayload<ExtArgs>, T, "findMany"> | Null>
    student<T extends Borrower$studentArgs<ExtArgs> = {}>(args?: Subset<T, Borrower$studentArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    teacher<T extends Borrower$teacherArgs<ExtArgs> = {}>(args?: Subset<T, Borrower$teacherArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    assistant<T extends Borrower$assistantArgs<ExtArgs> = {}>(args?: Subset<T, Borrower$assistantArgs<ExtArgs>>): Prisma__AssistantClient<$Result.GetResult<Prisma.$AssistantPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Borrower model
   */ 
  interface BorrowerFieldRefs {
    readonly id: FieldRef<"Borrower", 'Int'>
    readonly state: FieldRef<"Borrower", 'Boolean'>
    readonly rut: FieldRef<"Borrower", 'String'>
    readonly name: FieldRef<"Borrower", 'String'>
    readonly mail: FieldRef<"Borrower", 'String'>
    readonly phoneNumber: FieldRef<"Borrower", 'Int'>
    readonly type: FieldRef<"Borrower", 'UserType'>
  }
    

  // Custom InputTypes
  /**
   * Borrower findUnique
   */
  export type BorrowerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Borrower
     */
    select?: BorrowerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BorrowerInclude<ExtArgs> | null
    /**
     * Filter, which Borrower to fetch.
     */
    where: BorrowerWhereUniqueInput
  }

  /**
   * Borrower findUniqueOrThrow
   */
  export type BorrowerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Borrower
     */
    select?: BorrowerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BorrowerInclude<ExtArgs> | null
    /**
     * Filter, which Borrower to fetch.
     */
    where: BorrowerWhereUniqueInput
  }

  /**
   * Borrower findFirst
   */
  export type BorrowerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Borrower
     */
    select?: BorrowerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BorrowerInclude<ExtArgs> | null
    /**
     * Filter, which Borrower to fetch.
     */
    where?: BorrowerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Borrowers to fetch.
     */
    orderBy?: BorrowerOrderByWithRelationInput | BorrowerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Borrowers.
     */
    cursor?: BorrowerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Borrowers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Borrowers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Borrowers.
     */
    distinct?: BorrowerScalarFieldEnum | BorrowerScalarFieldEnum[]
  }

  /**
   * Borrower findFirstOrThrow
   */
  export type BorrowerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Borrower
     */
    select?: BorrowerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BorrowerInclude<ExtArgs> | null
    /**
     * Filter, which Borrower to fetch.
     */
    where?: BorrowerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Borrowers to fetch.
     */
    orderBy?: BorrowerOrderByWithRelationInput | BorrowerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Borrowers.
     */
    cursor?: BorrowerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Borrowers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Borrowers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Borrowers.
     */
    distinct?: BorrowerScalarFieldEnum | BorrowerScalarFieldEnum[]
  }

  /**
   * Borrower findMany
   */
  export type BorrowerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Borrower
     */
    select?: BorrowerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BorrowerInclude<ExtArgs> | null
    /**
     * Filter, which Borrowers to fetch.
     */
    where?: BorrowerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Borrowers to fetch.
     */
    orderBy?: BorrowerOrderByWithRelationInput | BorrowerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Borrowers.
     */
    cursor?: BorrowerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Borrowers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Borrowers.
     */
    skip?: number
    distinct?: BorrowerScalarFieldEnum | BorrowerScalarFieldEnum[]
  }

  /**
   * Borrower create
   */
  export type BorrowerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Borrower
     */
    select?: BorrowerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BorrowerInclude<ExtArgs> | null
    /**
     * The data needed to create a Borrower.
     */
    data: XOR<BorrowerCreateInput, BorrowerUncheckedCreateInput>
  }

  /**
   * Borrower createMany
   */
  export type BorrowerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Borrowers.
     */
    data: BorrowerCreateManyInput | BorrowerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Borrower update
   */
  export type BorrowerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Borrower
     */
    select?: BorrowerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BorrowerInclude<ExtArgs> | null
    /**
     * The data needed to update a Borrower.
     */
    data: XOR<BorrowerUpdateInput, BorrowerUncheckedUpdateInput>
    /**
     * Choose, which Borrower to update.
     */
    where: BorrowerWhereUniqueInput
  }

  /**
   * Borrower updateMany
   */
  export type BorrowerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Borrowers.
     */
    data: XOR<BorrowerUpdateManyMutationInput, BorrowerUncheckedUpdateManyInput>
    /**
     * Filter which Borrowers to update
     */
    where?: BorrowerWhereInput
  }

  /**
   * Borrower upsert
   */
  export type BorrowerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Borrower
     */
    select?: BorrowerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BorrowerInclude<ExtArgs> | null
    /**
     * The filter to search for the Borrower to update in case it exists.
     */
    where: BorrowerWhereUniqueInput
    /**
     * In case the Borrower found by the `where` argument doesn't exist, create a new Borrower with this data.
     */
    create: XOR<BorrowerCreateInput, BorrowerUncheckedCreateInput>
    /**
     * In case the Borrower was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BorrowerUpdateInput, BorrowerUncheckedUpdateInput>
  }

  /**
   * Borrower delete
   */
  export type BorrowerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Borrower
     */
    select?: BorrowerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BorrowerInclude<ExtArgs> | null
    /**
     * Filter which Borrower to delete.
     */
    where: BorrowerWhereUniqueInput
  }

  /**
   * Borrower deleteMany
   */
  export type BorrowerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Borrowers to delete
     */
    where?: BorrowerWhereInput
  }

  /**
   * Borrower.lendings
   */
  export type Borrower$lendingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lending
     */
    select?: LendingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LendingInclude<ExtArgs> | null
    where?: LendingWhereInput
    orderBy?: LendingOrderByWithRelationInput | LendingOrderByWithRelationInput[]
    cursor?: LendingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LendingScalarFieldEnum | LendingScalarFieldEnum[]
  }

  /**
   * Borrower.student
   */
  export type Borrower$studentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    where?: StudentWhereInput
  }

  /**
   * Borrower.teacher
   */
  export type Borrower$teacherArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    where?: TeacherWhereInput
  }

  /**
   * Borrower.assistant
   */
  export type Borrower$assistantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assistant
     */
    select?: AssistantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssistantInclude<ExtArgs> | null
    where?: AssistantWhereInput
  }

  /**
   * Borrower without action
   */
  export type BorrowerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Borrower
     */
    select?: BorrowerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BorrowerInclude<ExtArgs> | null
  }


  /**
   * Model Student
   */

  export type AggregateStudent = {
    _count: StudentCountAggregateOutputType | null
    _avg: StudentAvgAggregateOutputType | null
    _sum: StudentSumAggregateOutputType | null
    _min: StudentMinAggregateOutputType | null
    _max: StudentMaxAggregateOutputType | null
  }

  export type StudentAvgAggregateOutputType = {
    id: number | null
  }

  export type StudentSumAggregateOutputType = {
    id: number | null
  }

  export type StudentMinAggregateOutputType = {
    id: number | null
    codeDegree: string | null
  }

  export type StudentMaxAggregateOutputType = {
    id: number | null
    codeDegree: string | null
  }

  export type StudentCountAggregateOutputType = {
    id: number
    codeDegree: number
    _all: number
  }


  export type StudentAvgAggregateInputType = {
    id?: true
  }

  export type StudentSumAggregateInputType = {
    id?: true
  }

  export type StudentMinAggregateInputType = {
    id?: true
    codeDegree?: true
  }

  export type StudentMaxAggregateInputType = {
    id?: true
    codeDegree?: true
  }

  export type StudentCountAggregateInputType = {
    id?: true
    codeDegree?: true
    _all?: true
  }

  export type StudentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Student to aggregate.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Students
    **/
    _count?: true | StudentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StudentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StudentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudentMaxAggregateInputType
  }

  export type GetStudentAggregateType<T extends StudentAggregateArgs> = {
        [P in keyof T & keyof AggregateStudent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudent[P]>
      : GetScalarType<T[P], AggregateStudent[P]>
  }




  export type StudentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentWhereInput
    orderBy?: StudentOrderByWithAggregationInput | StudentOrderByWithAggregationInput[]
    by: StudentScalarFieldEnum[] | StudentScalarFieldEnum
    having?: StudentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudentCountAggregateInputType | true
    _avg?: StudentAvgAggregateInputType
    _sum?: StudentSumAggregateInputType
    _min?: StudentMinAggregateInputType
    _max?: StudentMaxAggregateInputType
  }

  export type StudentGroupByOutputType = {
    id: number
    codeDegree: string
    _count: StudentCountAggregateOutputType | null
    _avg: StudentAvgAggregateOutputType | null
    _sum: StudentSumAggregateOutputType | null
    _min: StudentMinAggregateOutputType | null
    _max: StudentMaxAggregateOutputType | null
  }

  type GetStudentGroupByPayload<T extends StudentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudentGroupByOutputType[P]>
            : GetScalarType<T[P], StudentGroupByOutputType[P]>
        }
      >
    >


  export type StudentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    codeDegree?: boolean
    BorrowerId?: boolean | BorrowerDefaultArgs<ExtArgs>
    degree?: boolean | DegreeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["student"]>


  export type StudentSelectScalar = {
    id?: boolean
    codeDegree?: boolean
  }

  export type StudentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    BorrowerId?: boolean | BorrowerDefaultArgs<ExtArgs>
    degree?: boolean | DegreeDefaultArgs<ExtArgs>
  }

  export type $StudentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Student"
    objects: {
      BorrowerId: Prisma.$BorrowerPayload<ExtArgs>
      degree: Prisma.$DegreePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      codeDegree: string
    }, ExtArgs["result"]["student"]>
    composites: {}
  }

  type StudentGetPayload<S extends boolean | null | undefined | StudentDefaultArgs> = $Result.GetResult<Prisma.$StudentPayload, S>

  type StudentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StudentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StudentCountAggregateInputType | true
    }

  export interface StudentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Student'], meta: { name: 'Student' } }
    /**
     * Find zero or one Student that matches the filter.
     * @param {StudentFindUniqueArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StudentFindUniqueArgs>(args: SelectSubset<T, StudentFindUniqueArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Student that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {StudentFindUniqueOrThrowArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StudentFindUniqueOrThrowArgs>(args: SelectSubset<T, StudentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Student that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindFirstArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StudentFindFirstArgs>(args?: SelectSubset<T, StudentFindFirstArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Student that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindFirstOrThrowArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StudentFindFirstOrThrowArgs>(args?: SelectSubset<T, StudentFindFirstOrThrowArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Students that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Students
     * const students = await prisma.student.findMany()
     * 
     * // Get first 10 Students
     * const students = await prisma.student.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const studentWithIdOnly = await prisma.student.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StudentFindManyArgs>(args?: SelectSubset<T, StudentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Student.
     * @param {StudentCreateArgs} args - Arguments to create a Student.
     * @example
     * // Create one Student
     * const Student = await prisma.student.create({
     *   data: {
     *     // ... data to create a Student
     *   }
     * })
     * 
     */
    create<T extends StudentCreateArgs>(args: SelectSubset<T, StudentCreateArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Students.
     * @param {StudentCreateManyArgs} args - Arguments to create many Students.
     * @example
     * // Create many Students
     * const student = await prisma.student.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StudentCreateManyArgs>(args?: SelectSubset<T, StudentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Student.
     * @param {StudentDeleteArgs} args - Arguments to delete one Student.
     * @example
     * // Delete one Student
     * const Student = await prisma.student.delete({
     *   where: {
     *     // ... filter to delete one Student
     *   }
     * })
     * 
     */
    delete<T extends StudentDeleteArgs>(args: SelectSubset<T, StudentDeleteArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Student.
     * @param {StudentUpdateArgs} args - Arguments to update one Student.
     * @example
     * // Update one Student
     * const student = await prisma.student.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StudentUpdateArgs>(args: SelectSubset<T, StudentUpdateArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Students.
     * @param {StudentDeleteManyArgs} args - Arguments to filter Students to delete.
     * @example
     * // Delete a few Students
     * const { count } = await prisma.student.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StudentDeleteManyArgs>(args?: SelectSubset<T, StudentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Students
     * const student = await prisma.student.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StudentUpdateManyArgs>(args: SelectSubset<T, StudentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Student.
     * @param {StudentUpsertArgs} args - Arguments to update or create a Student.
     * @example
     * // Update or create a Student
     * const student = await prisma.student.upsert({
     *   create: {
     *     // ... data to create a Student
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Student we want to update
     *   }
     * })
     */
    upsert<T extends StudentUpsertArgs>(args: SelectSubset<T, StudentUpsertArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentCountArgs} args - Arguments to filter Students to count.
     * @example
     * // Count the number of Students
     * const count = await prisma.student.count({
     *   where: {
     *     // ... the filter for the Students we want to count
     *   }
     * })
    **/
    count<T extends StudentCountArgs>(
      args?: Subset<T, StudentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Student.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentAggregateArgs>(args: Subset<T, StudentAggregateArgs>): Prisma.PrismaPromise<GetStudentAggregateType<T>>

    /**
     * Group by Student.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudentGroupByArgs['orderBy'] }
        : { orderBy?: StudentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Student model
   */
  readonly fields: StudentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Student.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StudentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    BorrowerId<T extends BorrowerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BorrowerDefaultArgs<ExtArgs>>): Prisma__BorrowerClient<$Result.GetResult<Prisma.$BorrowerPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    degree<T extends DegreeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DegreeDefaultArgs<ExtArgs>>): Prisma__DegreeClient<$Result.GetResult<Prisma.$DegreePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Student model
   */ 
  interface StudentFieldRefs {
    readonly id: FieldRef<"Student", 'Int'>
    readonly codeDegree: FieldRef<"Student", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Student findUnique
   */
  export type StudentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student findUniqueOrThrow
   */
  export type StudentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student findFirst
   */
  export type StudentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Students.
     */
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Student findFirstOrThrow
   */
  export type StudentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Students.
     */
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Student findMany
   */
  export type StudentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Students to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Student create
   */
  export type StudentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The data needed to create a Student.
     */
    data: XOR<StudentCreateInput, StudentUncheckedCreateInput>
  }

  /**
   * Student createMany
   */
  export type StudentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Students.
     */
    data: StudentCreateManyInput | StudentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Student update
   */
  export type StudentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The data needed to update a Student.
     */
    data: XOR<StudentUpdateInput, StudentUncheckedUpdateInput>
    /**
     * Choose, which Student to update.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student updateMany
   */
  export type StudentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Students.
     */
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyInput>
    /**
     * Filter which Students to update
     */
    where?: StudentWhereInput
  }

  /**
   * Student upsert
   */
  export type StudentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The filter to search for the Student to update in case it exists.
     */
    where: StudentWhereUniqueInput
    /**
     * In case the Student found by the `where` argument doesn't exist, create a new Student with this data.
     */
    create: XOR<StudentCreateInput, StudentUncheckedCreateInput>
    /**
     * In case the Student was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudentUpdateInput, StudentUncheckedUpdateInput>
  }

  /**
   * Student delete
   */
  export type StudentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter which Student to delete.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student deleteMany
   */
  export type StudentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Students to delete
     */
    where?: StudentWhereInput
  }

  /**
   * Student without action
   */
  export type StudentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
  }


  /**
   * Model Degree
   */

  export type AggregateDegree = {
    _count: DegreeCountAggregateOutputType | null
    _min: DegreeMinAggregateOutputType | null
    _max: DegreeMaxAggregateOutputType | null
  }

  export type DegreeMinAggregateOutputType = {
    code: string | null
    name: string | null
  }

  export type DegreeMaxAggregateOutputType = {
    code: string | null
    name: string | null
  }

  export type DegreeCountAggregateOutputType = {
    code: number
    name: number
    _all: number
  }


  export type DegreeMinAggregateInputType = {
    code?: true
    name?: true
  }

  export type DegreeMaxAggregateInputType = {
    code?: true
    name?: true
  }

  export type DegreeCountAggregateInputType = {
    code?: true
    name?: true
    _all?: true
  }

  export type DegreeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Degree to aggregate.
     */
    where?: DegreeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Degrees to fetch.
     */
    orderBy?: DegreeOrderByWithRelationInput | DegreeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DegreeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Degrees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Degrees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Degrees
    **/
    _count?: true | DegreeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DegreeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DegreeMaxAggregateInputType
  }

  export type GetDegreeAggregateType<T extends DegreeAggregateArgs> = {
        [P in keyof T & keyof AggregateDegree]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDegree[P]>
      : GetScalarType<T[P], AggregateDegree[P]>
  }




  export type DegreeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DegreeWhereInput
    orderBy?: DegreeOrderByWithAggregationInput | DegreeOrderByWithAggregationInput[]
    by: DegreeScalarFieldEnum[] | DegreeScalarFieldEnum
    having?: DegreeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DegreeCountAggregateInputType | true
    _min?: DegreeMinAggregateInputType
    _max?: DegreeMaxAggregateInputType
  }

  export type DegreeGroupByOutputType = {
    code: string
    name: string
    _count: DegreeCountAggregateOutputType | null
    _min: DegreeMinAggregateOutputType | null
    _max: DegreeMaxAggregateOutputType | null
  }

  type GetDegreeGroupByPayload<T extends DegreeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DegreeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DegreeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DegreeGroupByOutputType[P]>
            : GetScalarType<T[P], DegreeGroupByOutputType[P]>
        }
      >
    >


  export type DegreeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    code?: boolean
    name?: boolean
    students?: boolean | Degree$studentsArgs<ExtArgs>
    _count?: boolean | DegreeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["degree"]>


  export type DegreeSelectScalar = {
    code?: boolean
    name?: boolean
  }

  export type DegreeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    students?: boolean | Degree$studentsArgs<ExtArgs>
    _count?: boolean | DegreeCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $DegreePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Degree"
    objects: {
      students: Prisma.$StudentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      code: string
      name: string
    }, ExtArgs["result"]["degree"]>
    composites: {}
  }

  type DegreeGetPayload<S extends boolean | null | undefined | DegreeDefaultArgs> = $Result.GetResult<Prisma.$DegreePayload, S>

  type DegreeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DegreeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DegreeCountAggregateInputType | true
    }

  export interface DegreeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Degree'], meta: { name: 'Degree' } }
    /**
     * Find zero or one Degree that matches the filter.
     * @param {DegreeFindUniqueArgs} args - Arguments to find a Degree
     * @example
     * // Get one Degree
     * const degree = await prisma.degree.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DegreeFindUniqueArgs>(args: SelectSubset<T, DegreeFindUniqueArgs<ExtArgs>>): Prisma__DegreeClient<$Result.GetResult<Prisma.$DegreePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Degree that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DegreeFindUniqueOrThrowArgs} args - Arguments to find a Degree
     * @example
     * // Get one Degree
     * const degree = await prisma.degree.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DegreeFindUniqueOrThrowArgs>(args: SelectSubset<T, DegreeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DegreeClient<$Result.GetResult<Prisma.$DegreePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Degree that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DegreeFindFirstArgs} args - Arguments to find a Degree
     * @example
     * // Get one Degree
     * const degree = await prisma.degree.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DegreeFindFirstArgs>(args?: SelectSubset<T, DegreeFindFirstArgs<ExtArgs>>): Prisma__DegreeClient<$Result.GetResult<Prisma.$DegreePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Degree that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DegreeFindFirstOrThrowArgs} args - Arguments to find a Degree
     * @example
     * // Get one Degree
     * const degree = await prisma.degree.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DegreeFindFirstOrThrowArgs>(args?: SelectSubset<T, DegreeFindFirstOrThrowArgs<ExtArgs>>): Prisma__DegreeClient<$Result.GetResult<Prisma.$DegreePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Degrees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DegreeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Degrees
     * const degrees = await prisma.degree.findMany()
     * 
     * // Get first 10 Degrees
     * const degrees = await prisma.degree.findMany({ take: 10 })
     * 
     * // Only select the `code`
     * const degreeWithCodeOnly = await prisma.degree.findMany({ select: { code: true } })
     * 
     */
    findMany<T extends DegreeFindManyArgs>(args?: SelectSubset<T, DegreeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DegreePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Degree.
     * @param {DegreeCreateArgs} args - Arguments to create a Degree.
     * @example
     * // Create one Degree
     * const Degree = await prisma.degree.create({
     *   data: {
     *     // ... data to create a Degree
     *   }
     * })
     * 
     */
    create<T extends DegreeCreateArgs>(args: SelectSubset<T, DegreeCreateArgs<ExtArgs>>): Prisma__DegreeClient<$Result.GetResult<Prisma.$DegreePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Degrees.
     * @param {DegreeCreateManyArgs} args - Arguments to create many Degrees.
     * @example
     * // Create many Degrees
     * const degree = await prisma.degree.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DegreeCreateManyArgs>(args?: SelectSubset<T, DegreeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Degree.
     * @param {DegreeDeleteArgs} args - Arguments to delete one Degree.
     * @example
     * // Delete one Degree
     * const Degree = await prisma.degree.delete({
     *   where: {
     *     // ... filter to delete one Degree
     *   }
     * })
     * 
     */
    delete<T extends DegreeDeleteArgs>(args: SelectSubset<T, DegreeDeleteArgs<ExtArgs>>): Prisma__DegreeClient<$Result.GetResult<Prisma.$DegreePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Degree.
     * @param {DegreeUpdateArgs} args - Arguments to update one Degree.
     * @example
     * // Update one Degree
     * const degree = await prisma.degree.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DegreeUpdateArgs>(args: SelectSubset<T, DegreeUpdateArgs<ExtArgs>>): Prisma__DegreeClient<$Result.GetResult<Prisma.$DegreePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Degrees.
     * @param {DegreeDeleteManyArgs} args - Arguments to filter Degrees to delete.
     * @example
     * // Delete a few Degrees
     * const { count } = await prisma.degree.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DegreeDeleteManyArgs>(args?: SelectSubset<T, DegreeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Degrees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DegreeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Degrees
     * const degree = await prisma.degree.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DegreeUpdateManyArgs>(args: SelectSubset<T, DegreeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Degree.
     * @param {DegreeUpsertArgs} args - Arguments to update or create a Degree.
     * @example
     * // Update or create a Degree
     * const degree = await prisma.degree.upsert({
     *   create: {
     *     // ... data to create a Degree
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Degree we want to update
     *   }
     * })
     */
    upsert<T extends DegreeUpsertArgs>(args: SelectSubset<T, DegreeUpsertArgs<ExtArgs>>): Prisma__DegreeClient<$Result.GetResult<Prisma.$DegreePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Degrees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DegreeCountArgs} args - Arguments to filter Degrees to count.
     * @example
     * // Count the number of Degrees
     * const count = await prisma.degree.count({
     *   where: {
     *     // ... the filter for the Degrees we want to count
     *   }
     * })
    **/
    count<T extends DegreeCountArgs>(
      args?: Subset<T, DegreeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DegreeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Degree.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DegreeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DegreeAggregateArgs>(args: Subset<T, DegreeAggregateArgs>): Prisma.PrismaPromise<GetDegreeAggregateType<T>>

    /**
     * Group by Degree.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DegreeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DegreeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DegreeGroupByArgs['orderBy'] }
        : { orderBy?: DegreeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DegreeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDegreeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Degree model
   */
  readonly fields: DegreeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Degree.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DegreeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    students<T extends Degree$studentsArgs<ExtArgs> = {}>(args?: Subset<T, Degree$studentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Degree model
   */ 
  interface DegreeFieldRefs {
    readonly code: FieldRef<"Degree", 'String'>
    readonly name: FieldRef<"Degree", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Degree findUnique
   */
  export type DegreeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Degree
     */
    select?: DegreeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DegreeInclude<ExtArgs> | null
    /**
     * Filter, which Degree to fetch.
     */
    where: DegreeWhereUniqueInput
  }

  /**
   * Degree findUniqueOrThrow
   */
  export type DegreeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Degree
     */
    select?: DegreeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DegreeInclude<ExtArgs> | null
    /**
     * Filter, which Degree to fetch.
     */
    where: DegreeWhereUniqueInput
  }

  /**
   * Degree findFirst
   */
  export type DegreeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Degree
     */
    select?: DegreeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DegreeInclude<ExtArgs> | null
    /**
     * Filter, which Degree to fetch.
     */
    where?: DegreeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Degrees to fetch.
     */
    orderBy?: DegreeOrderByWithRelationInput | DegreeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Degrees.
     */
    cursor?: DegreeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Degrees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Degrees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Degrees.
     */
    distinct?: DegreeScalarFieldEnum | DegreeScalarFieldEnum[]
  }

  /**
   * Degree findFirstOrThrow
   */
  export type DegreeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Degree
     */
    select?: DegreeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DegreeInclude<ExtArgs> | null
    /**
     * Filter, which Degree to fetch.
     */
    where?: DegreeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Degrees to fetch.
     */
    orderBy?: DegreeOrderByWithRelationInput | DegreeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Degrees.
     */
    cursor?: DegreeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Degrees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Degrees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Degrees.
     */
    distinct?: DegreeScalarFieldEnum | DegreeScalarFieldEnum[]
  }

  /**
   * Degree findMany
   */
  export type DegreeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Degree
     */
    select?: DegreeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DegreeInclude<ExtArgs> | null
    /**
     * Filter, which Degrees to fetch.
     */
    where?: DegreeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Degrees to fetch.
     */
    orderBy?: DegreeOrderByWithRelationInput | DegreeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Degrees.
     */
    cursor?: DegreeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Degrees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Degrees.
     */
    skip?: number
    distinct?: DegreeScalarFieldEnum | DegreeScalarFieldEnum[]
  }

  /**
   * Degree create
   */
  export type DegreeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Degree
     */
    select?: DegreeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DegreeInclude<ExtArgs> | null
    /**
     * The data needed to create a Degree.
     */
    data: XOR<DegreeCreateInput, DegreeUncheckedCreateInput>
  }

  /**
   * Degree createMany
   */
  export type DegreeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Degrees.
     */
    data: DegreeCreateManyInput | DegreeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Degree update
   */
  export type DegreeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Degree
     */
    select?: DegreeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DegreeInclude<ExtArgs> | null
    /**
     * The data needed to update a Degree.
     */
    data: XOR<DegreeUpdateInput, DegreeUncheckedUpdateInput>
    /**
     * Choose, which Degree to update.
     */
    where: DegreeWhereUniqueInput
  }

  /**
   * Degree updateMany
   */
  export type DegreeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Degrees.
     */
    data: XOR<DegreeUpdateManyMutationInput, DegreeUncheckedUpdateManyInput>
    /**
     * Filter which Degrees to update
     */
    where?: DegreeWhereInput
  }

  /**
   * Degree upsert
   */
  export type DegreeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Degree
     */
    select?: DegreeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DegreeInclude<ExtArgs> | null
    /**
     * The filter to search for the Degree to update in case it exists.
     */
    where: DegreeWhereUniqueInput
    /**
     * In case the Degree found by the `where` argument doesn't exist, create a new Degree with this data.
     */
    create: XOR<DegreeCreateInput, DegreeUncheckedCreateInput>
    /**
     * In case the Degree was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DegreeUpdateInput, DegreeUncheckedUpdateInput>
  }

  /**
   * Degree delete
   */
  export type DegreeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Degree
     */
    select?: DegreeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DegreeInclude<ExtArgs> | null
    /**
     * Filter which Degree to delete.
     */
    where: DegreeWhereUniqueInput
  }

  /**
   * Degree deleteMany
   */
  export type DegreeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Degrees to delete
     */
    where?: DegreeWhereInput
  }

  /**
   * Degree.students
   */
  export type Degree$studentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    where?: StudentWhereInput
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    cursor?: StudentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Degree without action
   */
  export type DegreeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Degree
     */
    select?: DegreeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DegreeInclude<ExtArgs> | null
  }


  /**
   * Model Teacher
   */

  export type AggregateTeacher = {
    _count: TeacherCountAggregateOutputType | null
    _avg: TeacherAvgAggregateOutputType | null
    _sum: TeacherSumAggregateOutputType | null
    _min: TeacherMinAggregateOutputType | null
    _max: TeacherMaxAggregateOutputType | null
  }

  export type TeacherAvgAggregateOutputType = {
    id: number | null
  }

  export type TeacherSumAggregateOutputType = {
    id: number | null
  }

  export type TeacherMinAggregateOutputType = {
    id: number | null
  }

  export type TeacherMaxAggregateOutputType = {
    id: number | null
  }

  export type TeacherCountAggregateOutputType = {
    id: number
    _all: number
  }


  export type TeacherAvgAggregateInputType = {
    id?: true
  }

  export type TeacherSumAggregateInputType = {
    id?: true
  }

  export type TeacherMinAggregateInputType = {
    id?: true
  }

  export type TeacherMaxAggregateInputType = {
    id?: true
  }

  export type TeacherCountAggregateInputType = {
    id?: true
    _all?: true
  }

  export type TeacherAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Teacher to aggregate.
     */
    where?: TeacherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teachers to fetch.
     */
    orderBy?: TeacherOrderByWithRelationInput | TeacherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeacherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teachers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Teachers
    **/
    _count?: true | TeacherCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TeacherAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TeacherSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeacherMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeacherMaxAggregateInputType
  }

  export type GetTeacherAggregateType<T extends TeacherAggregateArgs> = {
        [P in keyof T & keyof AggregateTeacher]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeacher[P]>
      : GetScalarType<T[P], AggregateTeacher[P]>
  }




  export type TeacherGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeacherWhereInput
    orderBy?: TeacherOrderByWithAggregationInput | TeacherOrderByWithAggregationInput[]
    by: TeacherScalarFieldEnum[] | TeacherScalarFieldEnum
    having?: TeacherScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeacherCountAggregateInputType | true
    _avg?: TeacherAvgAggregateInputType
    _sum?: TeacherSumAggregateInputType
    _min?: TeacherMinAggregateInputType
    _max?: TeacherMaxAggregateInputType
  }

  export type TeacherGroupByOutputType = {
    id: number
    _count: TeacherCountAggregateOutputType | null
    _avg: TeacherAvgAggregateOutputType | null
    _sum: TeacherSumAggregateOutputType | null
    _min: TeacherMinAggregateOutputType | null
    _max: TeacherMaxAggregateOutputType | null
  }

  type GetTeacherGroupByPayload<T extends TeacherGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeacherGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeacherGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeacherGroupByOutputType[P]>
            : GetScalarType<T[P], TeacherGroupByOutputType[P]>
        }
      >
    >


  export type TeacherSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    BorrowerId?: boolean | BorrowerDefaultArgs<ExtArgs>
    lendings?: boolean | Teacher$lendingsArgs<ExtArgs>
    _count?: boolean | TeacherCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teacher"]>


  export type TeacherSelectScalar = {
    id?: boolean
  }

  export type TeacherInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    BorrowerId?: boolean | BorrowerDefaultArgs<ExtArgs>
    lendings?: boolean | Teacher$lendingsArgs<ExtArgs>
    _count?: boolean | TeacherCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $TeacherPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Teacher"
    objects: {
      BorrowerId: Prisma.$BorrowerPayload<ExtArgs>
      lendings: Prisma.$LendingPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
    }, ExtArgs["result"]["teacher"]>
    composites: {}
  }

  type TeacherGetPayload<S extends boolean | null | undefined | TeacherDefaultArgs> = $Result.GetResult<Prisma.$TeacherPayload, S>

  type TeacherCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TeacherFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TeacherCountAggregateInputType | true
    }

  export interface TeacherDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Teacher'], meta: { name: 'Teacher' } }
    /**
     * Find zero or one Teacher that matches the filter.
     * @param {TeacherFindUniqueArgs} args - Arguments to find a Teacher
     * @example
     * // Get one Teacher
     * const teacher = await prisma.teacher.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TeacherFindUniqueArgs>(args: SelectSubset<T, TeacherFindUniqueArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Teacher that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TeacherFindUniqueOrThrowArgs} args - Arguments to find a Teacher
     * @example
     * // Get one Teacher
     * const teacher = await prisma.teacher.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TeacherFindUniqueOrThrowArgs>(args: SelectSubset<T, TeacherFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Teacher that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherFindFirstArgs} args - Arguments to find a Teacher
     * @example
     * // Get one Teacher
     * const teacher = await prisma.teacher.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TeacherFindFirstArgs>(args?: SelectSubset<T, TeacherFindFirstArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Teacher that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherFindFirstOrThrowArgs} args - Arguments to find a Teacher
     * @example
     * // Get one Teacher
     * const teacher = await prisma.teacher.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TeacherFindFirstOrThrowArgs>(args?: SelectSubset<T, TeacherFindFirstOrThrowArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Teachers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Teachers
     * const teachers = await prisma.teacher.findMany()
     * 
     * // Get first 10 Teachers
     * const teachers = await prisma.teacher.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teacherWithIdOnly = await prisma.teacher.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TeacherFindManyArgs>(args?: SelectSubset<T, TeacherFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Teacher.
     * @param {TeacherCreateArgs} args - Arguments to create a Teacher.
     * @example
     * // Create one Teacher
     * const Teacher = await prisma.teacher.create({
     *   data: {
     *     // ... data to create a Teacher
     *   }
     * })
     * 
     */
    create<T extends TeacherCreateArgs>(args: SelectSubset<T, TeacherCreateArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Teachers.
     * @param {TeacherCreateManyArgs} args - Arguments to create many Teachers.
     * @example
     * // Create many Teachers
     * const teacher = await prisma.teacher.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TeacherCreateManyArgs>(args?: SelectSubset<T, TeacherCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Teacher.
     * @param {TeacherDeleteArgs} args - Arguments to delete one Teacher.
     * @example
     * // Delete one Teacher
     * const Teacher = await prisma.teacher.delete({
     *   where: {
     *     // ... filter to delete one Teacher
     *   }
     * })
     * 
     */
    delete<T extends TeacherDeleteArgs>(args: SelectSubset<T, TeacherDeleteArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Teacher.
     * @param {TeacherUpdateArgs} args - Arguments to update one Teacher.
     * @example
     * // Update one Teacher
     * const teacher = await prisma.teacher.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TeacherUpdateArgs>(args: SelectSubset<T, TeacherUpdateArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Teachers.
     * @param {TeacherDeleteManyArgs} args - Arguments to filter Teachers to delete.
     * @example
     * // Delete a few Teachers
     * const { count } = await prisma.teacher.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TeacherDeleteManyArgs>(args?: SelectSubset<T, TeacherDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teachers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Teachers
     * const teacher = await prisma.teacher.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TeacherUpdateManyArgs>(args: SelectSubset<T, TeacherUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Teacher.
     * @param {TeacherUpsertArgs} args - Arguments to update or create a Teacher.
     * @example
     * // Update or create a Teacher
     * const teacher = await prisma.teacher.upsert({
     *   create: {
     *     // ... data to create a Teacher
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Teacher we want to update
     *   }
     * })
     */
    upsert<T extends TeacherUpsertArgs>(args: SelectSubset<T, TeacherUpsertArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Teachers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherCountArgs} args - Arguments to filter Teachers to count.
     * @example
     * // Count the number of Teachers
     * const count = await prisma.teacher.count({
     *   where: {
     *     // ... the filter for the Teachers we want to count
     *   }
     * })
    **/
    count<T extends TeacherCountArgs>(
      args?: Subset<T, TeacherCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeacherCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Teacher.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeacherAggregateArgs>(args: Subset<T, TeacherAggregateArgs>): Prisma.PrismaPromise<GetTeacherAggregateType<T>>

    /**
     * Group by Teacher.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeacherGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeacherGroupByArgs['orderBy'] }
        : { orderBy?: TeacherGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeacherGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeacherGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Teacher model
   */
  readonly fields: TeacherFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Teacher.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TeacherClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    BorrowerId<T extends BorrowerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BorrowerDefaultArgs<ExtArgs>>): Prisma__BorrowerClient<$Result.GetResult<Prisma.$BorrowerPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    lendings<T extends Teacher$lendingsArgs<ExtArgs> = {}>(args?: Subset<T, Teacher$lendingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LendingPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Teacher model
   */ 
  interface TeacherFieldRefs {
    readonly id: FieldRef<"Teacher", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Teacher findUnique
   */
  export type TeacherFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter, which Teacher to fetch.
     */
    where: TeacherWhereUniqueInput
  }

  /**
   * Teacher findUniqueOrThrow
   */
  export type TeacherFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter, which Teacher to fetch.
     */
    where: TeacherWhereUniqueInput
  }

  /**
   * Teacher findFirst
   */
  export type TeacherFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter, which Teacher to fetch.
     */
    where?: TeacherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teachers to fetch.
     */
    orderBy?: TeacherOrderByWithRelationInput | TeacherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teachers.
     */
    cursor?: TeacherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teachers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teachers.
     */
    distinct?: TeacherScalarFieldEnum | TeacherScalarFieldEnum[]
  }

  /**
   * Teacher findFirstOrThrow
   */
  export type TeacherFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter, which Teacher to fetch.
     */
    where?: TeacherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teachers to fetch.
     */
    orderBy?: TeacherOrderByWithRelationInput | TeacherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teachers.
     */
    cursor?: TeacherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teachers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teachers.
     */
    distinct?: TeacherScalarFieldEnum | TeacherScalarFieldEnum[]
  }

  /**
   * Teacher findMany
   */
  export type TeacherFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter, which Teachers to fetch.
     */
    where?: TeacherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teachers to fetch.
     */
    orderBy?: TeacherOrderByWithRelationInput | TeacherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Teachers.
     */
    cursor?: TeacherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teachers.
     */
    skip?: number
    distinct?: TeacherScalarFieldEnum | TeacherScalarFieldEnum[]
  }

  /**
   * Teacher create
   */
  export type TeacherCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * The data needed to create a Teacher.
     */
    data: XOR<TeacherCreateInput, TeacherUncheckedCreateInput>
  }

  /**
   * Teacher createMany
   */
  export type TeacherCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Teachers.
     */
    data: TeacherCreateManyInput | TeacherCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Teacher update
   */
  export type TeacherUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * The data needed to update a Teacher.
     */
    data: XOR<TeacherUpdateInput, TeacherUncheckedUpdateInput>
    /**
     * Choose, which Teacher to update.
     */
    where: TeacherWhereUniqueInput
  }

  /**
   * Teacher updateMany
   */
  export type TeacherUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Teachers.
     */
    data: XOR<TeacherUpdateManyMutationInput, TeacherUncheckedUpdateManyInput>
    /**
     * Filter which Teachers to update
     */
    where?: TeacherWhereInput
  }

  /**
   * Teacher upsert
   */
  export type TeacherUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * The filter to search for the Teacher to update in case it exists.
     */
    where: TeacherWhereUniqueInput
    /**
     * In case the Teacher found by the `where` argument doesn't exist, create a new Teacher with this data.
     */
    create: XOR<TeacherCreateInput, TeacherUncheckedCreateInput>
    /**
     * In case the Teacher was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeacherUpdateInput, TeacherUncheckedUpdateInput>
  }

  /**
   * Teacher delete
   */
  export type TeacherDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter which Teacher to delete.
     */
    where: TeacherWhereUniqueInput
  }

  /**
   * Teacher deleteMany
   */
  export type TeacherDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Teachers to delete
     */
    where?: TeacherWhereInput
  }

  /**
   * Teacher.lendings
   */
  export type Teacher$lendingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lending
     */
    select?: LendingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LendingInclude<ExtArgs> | null
    where?: LendingWhereInput
    orderBy?: LendingOrderByWithRelationInput | LendingOrderByWithRelationInput[]
    cursor?: LendingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LendingScalarFieldEnum | LendingScalarFieldEnum[]
  }

  /**
   * Teacher without action
   */
  export type TeacherDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
  }


  /**
   * Model Assistant
   */

  export type AggregateAssistant = {
    _count: AssistantCountAggregateOutputType | null
    _avg: AssistantAvgAggregateOutputType | null
    _sum: AssistantSumAggregateOutputType | null
    _min: AssistantMinAggregateOutputType | null
    _max: AssistantMaxAggregateOutputType | null
  }

  export type AssistantAvgAggregateOutputType = {
    id: number | null
  }

  export type AssistantSumAggregateOutputType = {
    id: number | null
  }

  export type AssistantMinAggregateOutputType = {
    id: number | null
    role: string | null
  }

  export type AssistantMaxAggregateOutputType = {
    id: number | null
    role: string | null
  }

  export type AssistantCountAggregateOutputType = {
    id: number
    role: number
    _all: number
  }


  export type AssistantAvgAggregateInputType = {
    id?: true
  }

  export type AssistantSumAggregateInputType = {
    id?: true
  }

  export type AssistantMinAggregateInputType = {
    id?: true
    role?: true
  }

  export type AssistantMaxAggregateInputType = {
    id?: true
    role?: true
  }

  export type AssistantCountAggregateInputType = {
    id?: true
    role?: true
    _all?: true
  }

  export type AssistantAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Assistant to aggregate.
     */
    where?: AssistantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assistants to fetch.
     */
    orderBy?: AssistantOrderByWithRelationInput | AssistantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AssistantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assistants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assistants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Assistants
    **/
    _count?: true | AssistantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AssistantAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AssistantSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AssistantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AssistantMaxAggregateInputType
  }

  export type GetAssistantAggregateType<T extends AssistantAggregateArgs> = {
        [P in keyof T & keyof AggregateAssistant]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAssistant[P]>
      : GetScalarType<T[P], AggregateAssistant[P]>
  }




  export type AssistantGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssistantWhereInput
    orderBy?: AssistantOrderByWithAggregationInput | AssistantOrderByWithAggregationInput[]
    by: AssistantScalarFieldEnum[] | AssistantScalarFieldEnum
    having?: AssistantScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AssistantCountAggregateInputType | true
    _avg?: AssistantAvgAggregateInputType
    _sum?: AssistantSumAggregateInputType
    _min?: AssistantMinAggregateInputType
    _max?: AssistantMaxAggregateInputType
  }

  export type AssistantGroupByOutputType = {
    id: number
    role: string
    _count: AssistantCountAggregateOutputType | null
    _avg: AssistantAvgAggregateOutputType | null
    _sum: AssistantSumAggregateOutputType | null
    _min: AssistantMinAggregateOutputType | null
    _max: AssistantMaxAggregateOutputType | null
  }

  type GetAssistantGroupByPayload<T extends AssistantGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AssistantGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AssistantGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AssistantGroupByOutputType[P]>
            : GetScalarType<T[P], AssistantGroupByOutputType[P]>
        }
      >
    >


  export type AssistantSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    role?: boolean
    BorrowerId?: boolean | BorrowerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["assistant"]>


  export type AssistantSelectScalar = {
    id?: boolean
    role?: boolean
  }

  export type AssistantInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    BorrowerId?: boolean | BorrowerDefaultArgs<ExtArgs>
  }

  export type $AssistantPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Assistant"
    objects: {
      BorrowerId: Prisma.$BorrowerPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      role: string
    }, ExtArgs["result"]["assistant"]>
    composites: {}
  }

  type AssistantGetPayload<S extends boolean | null | undefined | AssistantDefaultArgs> = $Result.GetResult<Prisma.$AssistantPayload, S>

  type AssistantCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AssistantFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AssistantCountAggregateInputType | true
    }

  export interface AssistantDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Assistant'], meta: { name: 'Assistant' } }
    /**
     * Find zero or one Assistant that matches the filter.
     * @param {AssistantFindUniqueArgs} args - Arguments to find a Assistant
     * @example
     * // Get one Assistant
     * const assistant = await prisma.assistant.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AssistantFindUniqueArgs>(args: SelectSubset<T, AssistantFindUniqueArgs<ExtArgs>>): Prisma__AssistantClient<$Result.GetResult<Prisma.$AssistantPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Assistant that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AssistantFindUniqueOrThrowArgs} args - Arguments to find a Assistant
     * @example
     * // Get one Assistant
     * const assistant = await prisma.assistant.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AssistantFindUniqueOrThrowArgs>(args: SelectSubset<T, AssistantFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AssistantClient<$Result.GetResult<Prisma.$AssistantPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Assistant that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssistantFindFirstArgs} args - Arguments to find a Assistant
     * @example
     * // Get one Assistant
     * const assistant = await prisma.assistant.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AssistantFindFirstArgs>(args?: SelectSubset<T, AssistantFindFirstArgs<ExtArgs>>): Prisma__AssistantClient<$Result.GetResult<Prisma.$AssistantPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Assistant that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssistantFindFirstOrThrowArgs} args - Arguments to find a Assistant
     * @example
     * // Get one Assistant
     * const assistant = await prisma.assistant.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AssistantFindFirstOrThrowArgs>(args?: SelectSubset<T, AssistantFindFirstOrThrowArgs<ExtArgs>>): Prisma__AssistantClient<$Result.GetResult<Prisma.$AssistantPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Assistants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssistantFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Assistants
     * const assistants = await prisma.assistant.findMany()
     * 
     * // Get first 10 Assistants
     * const assistants = await prisma.assistant.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const assistantWithIdOnly = await prisma.assistant.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AssistantFindManyArgs>(args?: SelectSubset<T, AssistantFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssistantPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Assistant.
     * @param {AssistantCreateArgs} args - Arguments to create a Assistant.
     * @example
     * // Create one Assistant
     * const Assistant = await prisma.assistant.create({
     *   data: {
     *     // ... data to create a Assistant
     *   }
     * })
     * 
     */
    create<T extends AssistantCreateArgs>(args: SelectSubset<T, AssistantCreateArgs<ExtArgs>>): Prisma__AssistantClient<$Result.GetResult<Prisma.$AssistantPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Assistants.
     * @param {AssistantCreateManyArgs} args - Arguments to create many Assistants.
     * @example
     * // Create many Assistants
     * const assistant = await prisma.assistant.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AssistantCreateManyArgs>(args?: SelectSubset<T, AssistantCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Assistant.
     * @param {AssistantDeleteArgs} args - Arguments to delete one Assistant.
     * @example
     * // Delete one Assistant
     * const Assistant = await prisma.assistant.delete({
     *   where: {
     *     // ... filter to delete one Assistant
     *   }
     * })
     * 
     */
    delete<T extends AssistantDeleteArgs>(args: SelectSubset<T, AssistantDeleteArgs<ExtArgs>>): Prisma__AssistantClient<$Result.GetResult<Prisma.$AssistantPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Assistant.
     * @param {AssistantUpdateArgs} args - Arguments to update one Assistant.
     * @example
     * // Update one Assistant
     * const assistant = await prisma.assistant.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AssistantUpdateArgs>(args: SelectSubset<T, AssistantUpdateArgs<ExtArgs>>): Prisma__AssistantClient<$Result.GetResult<Prisma.$AssistantPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Assistants.
     * @param {AssistantDeleteManyArgs} args - Arguments to filter Assistants to delete.
     * @example
     * // Delete a few Assistants
     * const { count } = await prisma.assistant.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AssistantDeleteManyArgs>(args?: SelectSubset<T, AssistantDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Assistants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssistantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Assistants
     * const assistant = await prisma.assistant.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AssistantUpdateManyArgs>(args: SelectSubset<T, AssistantUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Assistant.
     * @param {AssistantUpsertArgs} args - Arguments to update or create a Assistant.
     * @example
     * // Update or create a Assistant
     * const assistant = await prisma.assistant.upsert({
     *   create: {
     *     // ... data to create a Assistant
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Assistant we want to update
     *   }
     * })
     */
    upsert<T extends AssistantUpsertArgs>(args: SelectSubset<T, AssistantUpsertArgs<ExtArgs>>): Prisma__AssistantClient<$Result.GetResult<Prisma.$AssistantPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Assistants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssistantCountArgs} args - Arguments to filter Assistants to count.
     * @example
     * // Count the number of Assistants
     * const count = await prisma.assistant.count({
     *   where: {
     *     // ... the filter for the Assistants we want to count
     *   }
     * })
    **/
    count<T extends AssistantCountArgs>(
      args?: Subset<T, AssistantCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AssistantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Assistant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssistantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AssistantAggregateArgs>(args: Subset<T, AssistantAggregateArgs>): Prisma.PrismaPromise<GetAssistantAggregateType<T>>

    /**
     * Group by Assistant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssistantGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AssistantGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AssistantGroupByArgs['orderBy'] }
        : { orderBy?: AssistantGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AssistantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAssistantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Assistant model
   */
  readonly fields: AssistantFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Assistant.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AssistantClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    BorrowerId<T extends BorrowerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BorrowerDefaultArgs<ExtArgs>>): Prisma__BorrowerClient<$Result.GetResult<Prisma.$BorrowerPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Assistant model
   */ 
  interface AssistantFieldRefs {
    readonly id: FieldRef<"Assistant", 'Int'>
    readonly role: FieldRef<"Assistant", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Assistant findUnique
   */
  export type AssistantFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assistant
     */
    select?: AssistantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssistantInclude<ExtArgs> | null
    /**
     * Filter, which Assistant to fetch.
     */
    where: AssistantWhereUniqueInput
  }

  /**
   * Assistant findUniqueOrThrow
   */
  export type AssistantFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assistant
     */
    select?: AssistantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssistantInclude<ExtArgs> | null
    /**
     * Filter, which Assistant to fetch.
     */
    where: AssistantWhereUniqueInput
  }

  /**
   * Assistant findFirst
   */
  export type AssistantFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assistant
     */
    select?: AssistantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssistantInclude<ExtArgs> | null
    /**
     * Filter, which Assistant to fetch.
     */
    where?: AssistantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assistants to fetch.
     */
    orderBy?: AssistantOrderByWithRelationInput | AssistantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Assistants.
     */
    cursor?: AssistantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assistants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assistants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Assistants.
     */
    distinct?: AssistantScalarFieldEnum | AssistantScalarFieldEnum[]
  }

  /**
   * Assistant findFirstOrThrow
   */
  export type AssistantFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assistant
     */
    select?: AssistantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssistantInclude<ExtArgs> | null
    /**
     * Filter, which Assistant to fetch.
     */
    where?: AssistantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assistants to fetch.
     */
    orderBy?: AssistantOrderByWithRelationInput | AssistantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Assistants.
     */
    cursor?: AssistantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assistants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assistants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Assistants.
     */
    distinct?: AssistantScalarFieldEnum | AssistantScalarFieldEnum[]
  }

  /**
   * Assistant findMany
   */
  export type AssistantFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assistant
     */
    select?: AssistantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssistantInclude<ExtArgs> | null
    /**
     * Filter, which Assistants to fetch.
     */
    where?: AssistantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assistants to fetch.
     */
    orderBy?: AssistantOrderByWithRelationInput | AssistantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Assistants.
     */
    cursor?: AssistantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assistants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assistants.
     */
    skip?: number
    distinct?: AssistantScalarFieldEnum | AssistantScalarFieldEnum[]
  }

  /**
   * Assistant create
   */
  export type AssistantCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assistant
     */
    select?: AssistantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssistantInclude<ExtArgs> | null
    /**
     * The data needed to create a Assistant.
     */
    data: XOR<AssistantCreateInput, AssistantUncheckedCreateInput>
  }

  /**
   * Assistant createMany
   */
  export type AssistantCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Assistants.
     */
    data: AssistantCreateManyInput | AssistantCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Assistant update
   */
  export type AssistantUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assistant
     */
    select?: AssistantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssistantInclude<ExtArgs> | null
    /**
     * The data needed to update a Assistant.
     */
    data: XOR<AssistantUpdateInput, AssistantUncheckedUpdateInput>
    /**
     * Choose, which Assistant to update.
     */
    where: AssistantWhereUniqueInput
  }

  /**
   * Assistant updateMany
   */
  export type AssistantUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Assistants.
     */
    data: XOR<AssistantUpdateManyMutationInput, AssistantUncheckedUpdateManyInput>
    /**
     * Filter which Assistants to update
     */
    where?: AssistantWhereInput
  }

  /**
   * Assistant upsert
   */
  export type AssistantUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assistant
     */
    select?: AssistantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssistantInclude<ExtArgs> | null
    /**
     * The filter to search for the Assistant to update in case it exists.
     */
    where: AssistantWhereUniqueInput
    /**
     * In case the Assistant found by the `where` argument doesn't exist, create a new Assistant with this data.
     */
    create: XOR<AssistantCreateInput, AssistantUncheckedCreateInput>
    /**
     * In case the Assistant was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AssistantUpdateInput, AssistantUncheckedUpdateInput>
  }

  /**
   * Assistant delete
   */
  export type AssistantDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assistant
     */
    select?: AssistantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssistantInclude<ExtArgs> | null
    /**
     * Filter which Assistant to delete.
     */
    where: AssistantWhereUniqueInput
  }

  /**
   * Assistant deleteMany
   */
  export type AssistantDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Assistants to delete
     */
    where?: AssistantWhereInput
  }

  /**
   * Assistant without action
   */
  export type AssistantDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assistant
     */
    select?: AssistantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssistantInclude<ExtArgs> | null
  }


  /**
   * Model product
   */

  export type AggregateProduct = {
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  export type ProductAvgAggregateOutputType = {
    id: number | null
    stock: number | null
    criticalStock: number | null
  }

  export type ProductSumAggregateOutputType = {
    id: number | null
    stock: number | null
    criticalStock: number | null
  }

  export type ProductMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    stock: number | null
    criticalStock: number | null
    state: boolean | null
    fungible: boolean | null
  }

  export type ProductMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    stock: number | null
    criticalStock: number | null
    state: boolean | null
    fungible: boolean | null
  }

  export type ProductCountAggregateOutputType = {
    id: number
    name: number
    description: number
    stock: number
    criticalStock: number
    state: number
    fungible: number
    _all: number
  }


  export type ProductAvgAggregateInputType = {
    id?: true
    stock?: true
    criticalStock?: true
  }

  export type ProductSumAggregateInputType = {
    id?: true
    stock?: true
    criticalStock?: true
  }

  export type ProductMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    stock?: true
    criticalStock?: true
    state?: true
    fungible?: true
  }

  export type ProductMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    stock?: true
    criticalStock?: true
    state?: true
    fungible?: true
  }

  export type ProductCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    stock?: true
    criticalStock?: true
    state?: true
    fungible?: true
    _all?: true
  }

  export type ProductAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which product to aggregate.
     */
    where?: productWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: productOrderByWithRelationInput | productOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: productWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned products
    **/
    _count?: true | ProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductMaxAggregateInputType
  }

  export type GetProductAggregateType<T extends ProductAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct[P]>
      : GetScalarType<T[P], AggregateProduct[P]>
  }




  export type productGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: productWhereInput
    orderBy?: productOrderByWithAggregationInput | productOrderByWithAggregationInput[]
    by: ProductScalarFieldEnum[] | ProductScalarFieldEnum
    having?: productScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCountAggregateInputType | true
    _avg?: ProductAvgAggregateInputType
    _sum?: ProductSumAggregateInputType
    _min?: ProductMinAggregateInputType
    _max?: ProductMaxAggregateInputType
  }

  export type ProductGroupByOutputType = {
    id: number
    name: string
    description: string | null
    stock: number | null
    criticalStock: number
    state: boolean
    fungible: boolean
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  type GetProductGroupByPayload<T extends productGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductGroupByOutputType[P]>
            : GetScalarType<T[P], ProductGroupByOutputType[P]>
        }
      >
    >


  export type productSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    stock?: boolean
    criticalStock?: boolean
    state?: boolean
    fungible?: boolean
    lendingProducts?: boolean | product$lendingProductsArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>


  export type productSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    stock?: boolean
    criticalStock?: boolean
    state?: boolean
    fungible?: boolean
  }

  export type productInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lendingProducts?: boolean | product$lendingProductsArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $productPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "product"
    objects: {
      lendingProducts: Prisma.$LendingProductPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      description: string | null
      stock: number | null
      criticalStock: number
      state: boolean
      fungible: boolean
    }, ExtArgs["result"]["product"]>
    composites: {}
  }

  type productGetPayload<S extends boolean | null | undefined | productDefaultArgs> = $Result.GetResult<Prisma.$productPayload, S>

  type productCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<productFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProductCountAggregateInputType | true
    }

  export interface productDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['product'], meta: { name: 'product' } }
    /**
     * Find zero or one Product that matches the filter.
     * @param {productFindUniqueArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends productFindUniqueArgs>(args: SelectSubset<T, productFindUniqueArgs<ExtArgs>>): Prisma__productClient<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Product that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {productFindUniqueOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends productFindUniqueOrThrowArgs>(args: SelectSubset<T, productFindUniqueOrThrowArgs<ExtArgs>>): Prisma__productClient<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Product that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productFindFirstArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends productFindFirstArgs>(args?: SelectSubset<T, productFindFirstArgs<ExtArgs>>): Prisma__productClient<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Product that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productFindFirstOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends productFindFirstOrThrowArgs>(args?: SelectSubset<T, productFindFirstOrThrowArgs<ExtArgs>>): Prisma__productClient<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.product.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.product.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productWithIdOnly = await prisma.product.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends productFindManyArgs>(args?: SelectSubset<T, productFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Product.
     * @param {productCreateArgs} args - Arguments to create a Product.
     * @example
     * // Create one Product
     * const Product = await prisma.product.create({
     *   data: {
     *     // ... data to create a Product
     *   }
     * })
     * 
     */
    create<T extends productCreateArgs>(args: SelectSubset<T, productCreateArgs<ExtArgs>>): Prisma__productClient<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Products.
     * @param {productCreateManyArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const product = await prisma.product.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends productCreateManyArgs>(args?: SelectSubset<T, productCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Product.
     * @param {productDeleteArgs} args - Arguments to delete one Product.
     * @example
     * // Delete one Product
     * const Product = await prisma.product.delete({
     *   where: {
     *     // ... filter to delete one Product
     *   }
     * })
     * 
     */
    delete<T extends productDeleteArgs>(args: SelectSubset<T, productDeleteArgs<ExtArgs>>): Prisma__productClient<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Product.
     * @param {productUpdateArgs} args - Arguments to update one Product.
     * @example
     * // Update one Product
     * const product = await prisma.product.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends productUpdateArgs>(args: SelectSubset<T, productUpdateArgs<ExtArgs>>): Prisma__productClient<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Products.
     * @param {productDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.product.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends productDeleteManyArgs>(args?: SelectSubset<T, productDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends productUpdateManyArgs>(args: SelectSubset<T, productUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Product.
     * @param {productUpsertArgs} args - Arguments to update or create a Product.
     * @example
     * // Update or create a Product
     * const product = await prisma.product.upsert({
     *   create: {
     *     // ... data to create a Product
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product we want to update
     *   }
     * })
     */
    upsert<T extends productUpsertArgs>(args: SelectSubset<T, productUpsertArgs<ExtArgs>>): Prisma__productClient<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.product.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends productCountArgs>(
      args?: Subset<T, productCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductAggregateArgs>(args: Subset<T, ProductAggregateArgs>): Prisma.PrismaPromise<GetProductAggregateType<T>>

    /**
     * Group by Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends productGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: productGroupByArgs['orderBy'] }
        : { orderBy?: productGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, productGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the product model
   */
  readonly fields: productFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for product.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__productClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    lendingProducts<T extends product$lendingProductsArgs<ExtArgs> = {}>(args?: Subset<T, product$lendingProductsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LendingProductPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the product model
   */ 
  interface productFieldRefs {
    readonly id: FieldRef<"product", 'Int'>
    readonly name: FieldRef<"product", 'String'>
    readonly description: FieldRef<"product", 'String'>
    readonly stock: FieldRef<"product", 'Int'>
    readonly criticalStock: FieldRef<"product", 'Int'>
    readonly state: FieldRef<"product", 'Boolean'>
    readonly fungible: FieldRef<"product", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * product findUnique
   */
  export type productFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
    /**
     * Filter, which product to fetch.
     */
    where: productWhereUniqueInput
  }

  /**
   * product findUniqueOrThrow
   */
  export type productFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
    /**
     * Filter, which product to fetch.
     */
    where: productWhereUniqueInput
  }

  /**
   * product findFirst
   */
  export type productFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
    /**
     * Filter, which product to fetch.
     */
    where?: productWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: productOrderByWithRelationInput | productOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for products.
     */
    cursor?: productWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * product findFirstOrThrow
   */
  export type productFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
    /**
     * Filter, which product to fetch.
     */
    where?: productWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: productOrderByWithRelationInput | productOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for products.
     */
    cursor?: productWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * product findMany
   */
  export type productFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
    /**
     * Filter, which products to fetch.
     */
    where?: productWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: productOrderByWithRelationInput | productOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing products.
     */
    cursor?: productWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * product create
   */
  export type productCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
    /**
     * The data needed to create a product.
     */
    data: XOR<productCreateInput, productUncheckedCreateInput>
  }

  /**
   * product createMany
   */
  export type productCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many products.
     */
    data: productCreateManyInput | productCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * product update
   */
  export type productUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
    /**
     * The data needed to update a product.
     */
    data: XOR<productUpdateInput, productUncheckedUpdateInput>
    /**
     * Choose, which product to update.
     */
    where: productWhereUniqueInput
  }

  /**
   * product updateMany
   */
  export type productUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update products.
     */
    data: XOR<productUpdateManyMutationInput, productUncheckedUpdateManyInput>
    /**
     * Filter which products to update
     */
    where?: productWhereInput
  }

  /**
   * product upsert
   */
  export type productUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
    /**
     * The filter to search for the product to update in case it exists.
     */
    where: productWhereUniqueInput
    /**
     * In case the product found by the `where` argument doesn't exist, create a new product with this data.
     */
    create: XOR<productCreateInput, productUncheckedCreateInput>
    /**
     * In case the product was found with the provided `where` argument, update it with this data.
     */
    update: XOR<productUpdateInput, productUncheckedUpdateInput>
  }

  /**
   * product delete
   */
  export type productDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
    /**
     * Filter which product to delete.
     */
    where: productWhereUniqueInput
  }

  /**
   * product deleteMany
   */
  export type productDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which products to delete
     */
    where?: productWhereInput
  }

  /**
   * product.lendingProducts
   */
  export type product$lendingProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LendingProduct
     */
    select?: LendingProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LendingProductInclude<ExtArgs> | null
    where?: LendingProductWhereInput
    orderBy?: LendingProductOrderByWithRelationInput | LendingProductOrderByWithRelationInput[]
    cursor?: LendingProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LendingProductScalarFieldEnum | LendingProductScalarFieldEnum[]
  }

  /**
   * product without action
   */
  export type productDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
  }


  /**
   * Model Lending
   */

  export type AggregateLending = {
    _count: LendingCountAggregateOutputType | null
    _avg: LendingAvgAggregateOutputType | null
    _sum: LendingSumAggregateOutputType | null
    _min: LendingMinAggregateOutputType | null
    _max: LendingMaxAggregateOutputType | null
  }

  export type LendingAvgAggregateOutputType = {
    id: number | null
    BorrowerId: number | null
    teacherId: number | null
  }

  export type LendingSumAggregateOutputType = {
    id: number | null
    BorrowerId: number | null
    teacherId: number | null
  }

  export type LendingMinAggregateOutputType = {
    id: number | null
    state: $Enums.LendingState | null
    date: Date | null
    finalizeDate: Date | null
    eliminateDate: Date | null
    comments: string | null
    BorrowerId: number | null
    teacherId: number | null
  }

  export type LendingMaxAggregateOutputType = {
    id: number | null
    state: $Enums.LendingState | null
    date: Date | null
    finalizeDate: Date | null
    eliminateDate: Date | null
    comments: string | null
    BorrowerId: number | null
    teacherId: number | null
  }

  export type LendingCountAggregateOutputType = {
    id: number
    state: number
    date: number
    finalizeDate: number
    eliminateDate: number
    comments: number
    BorrowerId: number
    teacherId: number
    _all: number
  }


  export type LendingAvgAggregateInputType = {
    id?: true
    BorrowerId?: true
    teacherId?: true
  }

  export type LendingSumAggregateInputType = {
    id?: true
    BorrowerId?: true
    teacherId?: true
  }

  export type LendingMinAggregateInputType = {
    id?: true
    state?: true
    date?: true
    finalizeDate?: true
    eliminateDate?: true
    comments?: true
    BorrowerId?: true
    teacherId?: true
  }

  export type LendingMaxAggregateInputType = {
    id?: true
    state?: true
    date?: true
    finalizeDate?: true
    eliminateDate?: true
    comments?: true
    BorrowerId?: true
    teacherId?: true
  }

  export type LendingCountAggregateInputType = {
    id?: true
    state?: true
    date?: true
    finalizeDate?: true
    eliminateDate?: true
    comments?: true
    BorrowerId?: true
    teacherId?: true
    _all?: true
  }

  export type LendingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Lending to aggregate.
     */
    where?: LendingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lendings to fetch.
     */
    orderBy?: LendingOrderByWithRelationInput | LendingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LendingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lendings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lendings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Lendings
    **/
    _count?: true | LendingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LendingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LendingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LendingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LendingMaxAggregateInputType
  }

  export type GetLendingAggregateType<T extends LendingAggregateArgs> = {
        [P in keyof T & keyof AggregateLending]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLending[P]>
      : GetScalarType<T[P], AggregateLending[P]>
  }




  export type LendingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LendingWhereInput
    orderBy?: LendingOrderByWithAggregationInput | LendingOrderByWithAggregationInput[]
    by: LendingScalarFieldEnum[] | LendingScalarFieldEnum
    having?: LendingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LendingCountAggregateInputType | true
    _avg?: LendingAvgAggregateInputType
    _sum?: LendingSumAggregateInputType
    _min?: LendingMinAggregateInputType
    _max?: LendingMaxAggregateInputType
  }

  export type LendingGroupByOutputType = {
    id: number
    state: $Enums.LendingState
    date: Date
    finalizeDate: Date | null
    eliminateDate: Date | null
    comments: string | null
    BorrowerId: number
    teacherId: number | null
    _count: LendingCountAggregateOutputType | null
    _avg: LendingAvgAggregateOutputType | null
    _sum: LendingSumAggregateOutputType | null
    _min: LendingMinAggregateOutputType | null
    _max: LendingMaxAggregateOutputType | null
  }

  type GetLendingGroupByPayload<T extends LendingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LendingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LendingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LendingGroupByOutputType[P]>
            : GetScalarType<T[P], LendingGroupByOutputType[P]>
        }
      >
    >


  export type LendingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    state?: boolean
    date?: boolean
    finalizeDate?: boolean
    eliminateDate?: boolean
    comments?: boolean
    BorrowerId?: boolean
    teacherId?: boolean
    borrower?: boolean | BorrowerDefaultArgs<ExtArgs>
    alerts?: boolean | Lending$alertsArgs<ExtArgs>
    teacher?: boolean | Lending$teacherArgs<ExtArgs>
    lendingProducts?: boolean | Lending$lendingProductsArgs<ExtArgs>
    _count?: boolean | LendingCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lending"]>


  export type LendingSelectScalar = {
    id?: boolean
    state?: boolean
    date?: boolean
    finalizeDate?: boolean
    eliminateDate?: boolean
    comments?: boolean
    BorrowerId?: boolean
    teacherId?: boolean
  }

  export type LendingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    borrower?: boolean | BorrowerDefaultArgs<ExtArgs>
    alerts?: boolean | Lending$alertsArgs<ExtArgs>
    teacher?: boolean | Lending$teacherArgs<ExtArgs>
    lendingProducts?: boolean | Lending$lendingProductsArgs<ExtArgs>
    _count?: boolean | LendingCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $LendingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Lending"
    objects: {
      borrower: Prisma.$BorrowerPayload<ExtArgs>
      alerts: Prisma.$AlertLendingPayload<ExtArgs>[]
      teacher: Prisma.$TeacherPayload<ExtArgs> | null
      lendingProducts: Prisma.$LendingProductPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      state: $Enums.LendingState
      date: Date
      finalizeDate: Date | null
      eliminateDate: Date | null
      comments: string | null
      BorrowerId: number
      teacherId: number | null
    }, ExtArgs["result"]["lending"]>
    composites: {}
  }

  type LendingGetPayload<S extends boolean | null | undefined | LendingDefaultArgs> = $Result.GetResult<Prisma.$LendingPayload, S>

  type LendingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LendingFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LendingCountAggregateInputType | true
    }

  export interface LendingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Lending'], meta: { name: 'Lending' } }
    /**
     * Find zero or one Lending that matches the filter.
     * @param {LendingFindUniqueArgs} args - Arguments to find a Lending
     * @example
     * // Get one Lending
     * const lending = await prisma.lending.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LendingFindUniqueArgs>(args: SelectSubset<T, LendingFindUniqueArgs<ExtArgs>>): Prisma__LendingClient<$Result.GetResult<Prisma.$LendingPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Lending that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LendingFindUniqueOrThrowArgs} args - Arguments to find a Lending
     * @example
     * // Get one Lending
     * const lending = await prisma.lending.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LendingFindUniqueOrThrowArgs>(args: SelectSubset<T, LendingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LendingClient<$Result.GetResult<Prisma.$LendingPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Lending that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LendingFindFirstArgs} args - Arguments to find a Lending
     * @example
     * // Get one Lending
     * const lending = await prisma.lending.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LendingFindFirstArgs>(args?: SelectSubset<T, LendingFindFirstArgs<ExtArgs>>): Prisma__LendingClient<$Result.GetResult<Prisma.$LendingPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Lending that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LendingFindFirstOrThrowArgs} args - Arguments to find a Lending
     * @example
     * // Get one Lending
     * const lending = await prisma.lending.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LendingFindFirstOrThrowArgs>(args?: SelectSubset<T, LendingFindFirstOrThrowArgs<ExtArgs>>): Prisma__LendingClient<$Result.GetResult<Prisma.$LendingPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Lendings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LendingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Lendings
     * const lendings = await prisma.lending.findMany()
     * 
     * // Get first 10 Lendings
     * const lendings = await prisma.lending.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const lendingWithIdOnly = await prisma.lending.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LendingFindManyArgs>(args?: SelectSubset<T, LendingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LendingPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Lending.
     * @param {LendingCreateArgs} args - Arguments to create a Lending.
     * @example
     * // Create one Lending
     * const Lending = await prisma.lending.create({
     *   data: {
     *     // ... data to create a Lending
     *   }
     * })
     * 
     */
    create<T extends LendingCreateArgs>(args: SelectSubset<T, LendingCreateArgs<ExtArgs>>): Prisma__LendingClient<$Result.GetResult<Prisma.$LendingPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Lendings.
     * @param {LendingCreateManyArgs} args - Arguments to create many Lendings.
     * @example
     * // Create many Lendings
     * const lending = await prisma.lending.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LendingCreateManyArgs>(args?: SelectSubset<T, LendingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Lending.
     * @param {LendingDeleteArgs} args - Arguments to delete one Lending.
     * @example
     * // Delete one Lending
     * const Lending = await prisma.lending.delete({
     *   where: {
     *     // ... filter to delete one Lending
     *   }
     * })
     * 
     */
    delete<T extends LendingDeleteArgs>(args: SelectSubset<T, LendingDeleteArgs<ExtArgs>>): Prisma__LendingClient<$Result.GetResult<Prisma.$LendingPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Lending.
     * @param {LendingUpdateArgs} args - Arguments to update one Lending.
     * @example
     * // Update one Lending
     * const lending = await prisma.lending.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LendingUpdateArgs>(args: SelectSubset<T, LendingUpdateArgs<ExtArgs>>): Prisma__LendingClient<$Result.GetResult<Prisma.$LendingPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Lendings.
     * @param {LendingDeleteManyArgs} args - Arguments to filter Lendings to delete.
     * @example
     * // Delete a few Lendings
     * const { count } = await prisma.lending.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LendingDeleteManyArgs>(args?: SelectSubset<T, LendingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Lendings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LendingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Lendings
     * const lending = await prisma.lending.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LendingUpdateManyArgs>(args: SelectSubset<T, LendingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Lending.
     * @param {LendingUpsertArgs} args - Arguments to update or create a Lending.
     * @example
     * // Update or create a Lending
     * const lending = await prisma.lending.upsert({
     *   create: {
     *     // ... data to create a Lending
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Lending we want to update
     *   }
     * })
     */
    upsert<T extends LendingUpsertArgs>(args: SelectSubset<T, LendingUpsertArgs<ExtArgs>>): Prisma__LendingClient<$Result.GetResult<Prisma.$LendingPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Lendings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LendingCountArgs} args - Arguments to filter Lendings to count.
     * @example
     * // Count the number of Lendings
     * const count = await prisma.lending.count({
     *   where: {
     *     // ... the filter for the Lendings we want to count
     *   }
     * })
    **/
    count<T extends LendingCountArgs>(
      args?: Subset<T, LendingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LendingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Lending.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LendingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LendingAggregateArgs>(args: Subset<T, LendingAggregateArgs>): Prisma.PrismaPromise<GetLendingAggregateType<T>>

    /**
     * Group by Lending.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LendingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LendingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LendingGroupByArgs['orderBy'] }
        : { orderBy?: LendingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LendingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLendingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Lending model
   */
  readonly fields: LendingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Lending.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LendingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    borrower<T extends BorrowerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BorrowerDefaultArgs<ExtArgs>>): Prisma__BorrowerClient<$Result.GetResult<Prisma.$BorrowerPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    alerts<T extends Lending$alertsArgs<ExtArgs> = {}>(args?: Subset<T, Lending$alertsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlertLendingPayload<ExtArgs>, T, "findMany"> | Null>
    teacher<T extends Lending$teacherArgs<ExtArgs> = {}>(args?: Subset<T, Lending$teacherArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    lendingProducts<T extends Lending$lendingProductsArgs<ExtArgs> = {}>(args?: Subset<T, Lending$lendingProductsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LendingProductPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Lending model
   */ 
  interface LendingFieldRefs {
    readonly id: FieldRef<"Lending", 'Int'>
    readonly state: FieldRef<"Lending", 'LendingState'>
    readonly date: FieldRef<"Lending", 'DateTime'>
    readonly finalizeDate: FieldRef<"Lending", 'DateTime'>
    readonly eliminateDate: FieldRef<"Lending", 'DateTime'>
    readonly comments: FieldRef<"Lending", 'String'>
    readonly BorrowerId: FieldRef<"Lending", 'Int'>
    readonly teacherId: FieldRef<"Lending", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Lending findUnique
   */
  export type LendingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lending
     */
    select?: LendingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LendingInclude<ExtArgs> | null
    /**
     * Filter, which Lending to fetch.
     */
    where: LendingWhereUniqueInput
  }

  /**
   * Lending findUniqueOrThrow
   */
  export type LendingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lending
     */
    select?: LendingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LendingInclude<ExtArgs> | null
    /**
     * Filter, which Lending to fetch.
     */
    where: LendingWhereUniqueInput
  }

  /**
   * Lending findFirst
   */
  export type LendingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lending
     */
    select?: LendingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LendingInclude<ExtArgs> | null
    /**
     * Filter, which Lending to fetch.
     */
    where?: LendingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lendings to fetch.
     */
    orderBy?: LendingOrderByWithRelationInput | LendingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Lendings.
     */
    cursor?: LendingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lendings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lendings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Lendings.
     */
    distinct?: LendingScalarFieldEnum | LendingScalarFieldEnum[]
  }

  /**
   * Lending findFirstOrThrow
   */
  export type LendingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lending
     */
    select?: LendingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LendingInclude<ExtArgs> | null
    /**
     * Filter, which Lending to fetch.
     */
    where?: LendingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lendings to fetch.
     */
    orderBy?: LendingOrderByWithRelationInput | LendingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Lendings.
     */
    cursor?: LendingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lendings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lendings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Lendings.
     */
    distinct?: LendingScalarFieldEnum | LendingScalarFieldEnum[]
  }

  /**
   * Lending findMany
   */
  export type LendingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lending
     */
    select?: LendingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LendingInclude<ExtArgs> | null
    /**
     * Filter, which Lendings to fetch.
     */
    where?: LendingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lendings to fetch.
     */
    orderBy?: LendingOrderByWithRelationInput | LendingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Lendings.
     */
    cursor?: LendingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lendings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lendings.
     */
    skip?: number
    distinct?: LendingScalarFieldEnum | LendingScalarFieldEnum[]
  }

  /**
   * Lending create
   */
  export type LendingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lending
     */
    select?: LendingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LendingInclude<ExtArgs> | null
    /**
     * The data needed to create a Lending.
     */
    data: XOR<LendingCreateInput, LendingUncheckedCreateInput>
  }

  /**
   * Lending createMany
   */
  export type LendingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Lendings.
     */
    data: LendingCreateManyInput | LendingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Lending update
   */
  export type LendingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lending
     */
    select?: LendingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LendingInclude<ExtArgs> | null
    /**
     * The data needed to update a Lending.
     */
    data: XOR<LendingUpdateInput, LendingUncheckedUpdateInput>
    /**
     * Choose, which Lending to update.
     */
    where: LendingWhereUniqueInput
  }

  /**
   * Lending updateMany
   */
  export type LendingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Lendings.
     */
    data: XOR<LendingUpdateManyMutationInput, LendingUncheckedUpdateManyInput>
    /**
     * Filter which Lendings to update
     */
    where?: LendingWhereInput
  }

  /**
   * Lending upsert
   */
  export type LendingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lending
     */
    select?: LendingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LendingInclude<ExtArgs> | null
    /**
     * The filter to search for the Lending to update in case it exists.
     */
    where: LendingWhereUniqueInput
    /**
     * In case the Lending found by the `where` argument doesn't exist, create a new Lending with this data.
     */
    create: XOR<LendingCreateInput, LendingUncheckedCreateInput>
    /**
     * In case the Lending was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LendingUpdateInput, LendingUncheckedUpdateInput>
  }

  /**
   * Lending delete
   */
  export type LendingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lending
     */
    select?: LendingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LendingInclude<ExtArgs> | null
    /**
     * Filter which Lending to delete.
     */
    where: LendingWhereUniqueInput
  }

  /**
   * Lending deleteMany
   */
  export type LendingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Lendings to delete
     */
    where?: LendingWhereInput
  }

  /**
   * Lending.alerts
   */
  export type Lending$alertsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlertLending
     */
    select?: AlertLendingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertLendingInclude<ExtArgs> | null
    where?: AlertLendingWhereInput
    orderBy?: AlertLendingOrderByWithRelationInput | AlertLendingOrderByWithRelationInput[]
    cursor?: AlertLendingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AlertLendingScalarFieldEnum | AlertLendingScalarFieldEnum[]
  }

  /**
   * Lending.teacher
   */
  export type Lending$teacherArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    where?: TeacherWhereInput
  }

  /**
   * Lending.lendingProducts
   */
  export type Lending$lendingProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LendingProduct
     */
    select?: LendingProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LendingProductInclude<ExtArgs> | null
    where?: LendingProductWhereInput
    orderBy?: LendingProductOrderByWithRelationInput | LendingProductOrderByWithRelationInput[]
    cursor?: LendingProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LendingProductScalarFieldEnum | LendingProductScalarFieldEnum[]
  }

  /**
   * Lending without action
   */
  export type LendingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lending
     */
    select?: LendingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LendingInclude<ExtArgs> | null
  }


  /**
   * Model LendingProduct
   */

  export type AggregateLendingProduct = {
    _count: LendingProductCountAggregateOutputType | null
    _avg: LendingProductAvgAggregateOutputType | null
    _sum: LendingProductSumAggregateOutputType | null
    _min: LendingProductMinAggregateOutputType | null
    _max: LendingProductMaxAggregateOutputType | null
  }

  export type LendingProductAvgAggregateOutputType = {
    lendingId: number | null
    productId: number | null
    amount: number | null
  }

  export type LendingProductSumAggregateOutputType = {
    lendingId: number | null
    productId: number | null
    amount: number | null
  }

  export type LendingProductMinAggregateOutputType = {
    lendingId: number | null
    productId: number | null
    amount: number | null
  }

  export type LendingProductMaxAggregateOutputType = {
    lendingId: number | null
    productId: number | null
    amount: number | null
  }

  export type LendingProductCountAggregateOutputType = {
    lendingId: number
    productId: number
    amount: number
    _all: number
  }


  export type LendingProductAvgAggregateInputType = {
    lendingId?: true
    productId?: true
    amount?: true
  }

  export type LendingProductSumAggregateInputType = {
    lendingId?: true
    productId?: true
    amount?: true
  }

  export type LendingProductMinAggregateInputType = {
    lendingId?: true
    productId?: true
    amount?: true
  }

  export type LendingProductMaxAggregateInputType = {
    lendingId?: true
    productId?: true
    amount?: true
  }

  export type LendingProductCountAggregateInputType = {
    lendingId?: true
    productId?: true
    amount?: true
    _all?: true
  }

  export type LendingProductAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LendingProduct to aggregate.
     */
    where?: LendingProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LendingProducts to fetch.
     */
    orderBy?: LendingProductOrderByWithRelationInput | LendingProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LendingProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LendingProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LendingProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LendingProducts
    **/
    _count?: true | LendingProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LendingProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LendingProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LendingProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LendingProductMaxAggregateInputType
  }

  export type GetLendingProductAggregateType<T extends LendingProductAggregateArgs> = {
        [P in keyof T & keyof AggregateLendingProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLendingProduct[P]>
      : GetScalarType<T[P], AggregateLendingProduct[P]>
  }




  export type LendingProductGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LendingProductWhereInput
    orderBy?: LendingProductOrderByWithAggregationInput | LendingProductOrderByWithAggregationInput[]
    by: LendingProductScalarFieldEnum[] | LendingProductScalarFieldEnum
    having?: LendingProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LendingProductCountAggregateInputType | true
    _avg?: LendingProductAvgAggregateInputType
    _sum?: LendingProductSumAggregateInputType
    _min?: LendingProductMinAggregateInputType
    _max?: LendingProductMaxAggregateInputType
  }

  export type LendingProductGroupByOutputType = {
    lendingId: number
    productId: number
    amount: number
    _count: LendingProductCountAggregateOutputType | null
    _avg: LendingProductAvgAggregateOutputType | null
    _sum: LendingProductSumAggregateOutputType | null
    _min: LendingProductMinAggregateOutputType | null
    _max: LendingProductMaxAggregateOutputType | null
  }

  type GetLendingProductGroupByPayload<T extends LendingProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LendingProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LendingProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LendingProductGroupByOutputType[P]>
            : GetScalarType<T[P], LendingProductGroupByOutputType[P]>
        }
      >
    >


  export type LendingProductSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    lendingId?: boolean
    productId?: boolean
    amount?: boolean
    lending?: boolean | LendingDefaultArgs<ExtArgs>
    product?: boolean | productDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lendingProduct"]>


  export type LendingProductSelectScalar = {
    lendingId?: boolean
    productId?: boolean
    amount?: boolean
  }

  export type LendingProductInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lending?: boolean | LendingDefaultArgs<ExtArgs>
    product?: boolean | productDefaultArgs<ExtArgs>
  }

  export type $LendingProductPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LendingProduct"
    objects: {
      lending: Prisma.$LendingPayload<ExtArgs>
      product: Prisma.$productPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      lendingId: number
      productId: number
      amount: number
    }, ExtArgs["result"]["lendingProduct"]>
    composites: {}
  }

  type LendingProductGetPayload<S extends boolean | null | undefined | LendingProductDefaultArgs> = $Result.GetResult<Prisma.$LendingProductPayload, S>

  type LendingProductCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LendingProductFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LendingProductCountAggregateInputType | true
    }

  export interface LendingProductDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LendingProduct'], meta: { name: 'LendingProduct' } }
    /**
     * Find zero or one LendingProduct that matches the filter.
     * @param {LendingProductFindUniqueArgs} args - Arguments to find a LendingProduct
     * @example
     * // Get one LendingProduct
     * const lendingProduct = await prisma.lendingProduct.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LendingProductFindUniqueArgs>(args: SelectSubset<T, LendingProductFindUniqueArgs<ExtArgs>>): Prisma__LendingProductClient<$Result.GetResult<Prisma.$LendingProductPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one LendingProduct that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LendingProductFindUniqueOrThrowArgs} args - Arguments to find a LendingProduct
     * @example
     * // Get one LendingProduct
     * const lendingProduct = await prisma.lendingProduct.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LendingProductFindUniqueOrThrowArgs>(args: SelectSubset<T, LendingProductFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LendingProductClient<$Result.GetResult<Prisma.$LendingProductPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first LendingProduct that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LendingProductFindFirstArgs} args - Arguments to find a LendingProduct
     * @example
     * // Get one LendingProduct
     * const lendingProduct = await prisma.lendingProduct.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LendingProductFindFirstArgs>(args?: SelectSubset<T, LendingProductFindFirstArgs<ExtArgs>>): Prisma__LendingProductClient<$Result.GetResult<Prisma.$LendingProductPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first LendingProduct that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LendingProductFindFirstOrThrowArgs} args - Arguments to find a LendingProduct
     * @example
     * // Get one LendingProduct
     * const lendingProduct = await prisma.lendingProduct.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LendingProductFindFirstOrThrowArgs>(args?: SelectSubset<T, LendingProductFindFirstOrThrowArgs<ExtArgs>>): Prisma__LendingProductClient<$Result.GetResult<Prisma.$LendingProductPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more LendingProducts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LendingProductFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LendingProducts
     * const lendingProducts = await prisma.lendingProduct.findMany()
     * 
     * // Get first 10 LendingProducts
     * const lendingProducts = await prisma.lendingProduct.findMany({ take: 10 })
     * 
     * // Only select the `lendingId`
     * const lendingProductWithLendingIdOnly = await prisma.lendingProduct.findMany({ select: { lendingId: true } })
     * 
     */
    findMany<T extends LendingProductFindManyArgs>(args?: SelectSubset<T, LendingProductFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LendingProductPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a LendingProduct.
     * @param {LendingProductCreateArgs} args - Arguments to create a LendingProduct.
     * @example
     * // Create one LendingProduct
     * const LendingProduct = await prisma.lendingProduct.create({
     *   data: {
     *     // ... data to create a LendingProduct
     *   }
     * })
     * 
     */
    create<T extends LendingProductCreateArgs>(args: SelectSubset<T, LendingProductCreateArgs<ExtArgs>>): Prisma__LendingProductClient<$Result.GetResult<Prisma.$LendingProductPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many LendingProducts.
     * @param {LendingProductCreateManyArgs} args - Arguments to create many LendingProducts.
     * @example
     * // Create many LendingProducts
     * const lendingProduct = await prisma.lendingProduct.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LendingProductCreateManyArgs>(args?: SelectSubset<T, LendingProductCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a LendingProduct.
     * @param {LendingProductDeleteArgs} args - Arguments to delete one LendingProduct.
     * @example
     * // Delete one LendingProduct
     * const LendingProduct = await prisma.lendingProduct.delete({
     *   where: {
     *     // ... filter to delete one LendingProduct
     *   }
     * })
     * 
     */
    delete<T extends LendingProductDeleteArgs>(args: SelectSubset<T, LendingProductDeleteArgs<ExtArgs>>): Prisma__LendingProductClient<$Result.GetResult<Prisma.$LendingProductPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one LendingProduct.
     * @param {LendingProductUpdateArgs} args - Arguments to update one LendingProduct.
     * @example
     * // Update one LendingProduct
     * const lendingProduct = await prisma.lendingProduct.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LendingProductUpdateArgs>(args: SelectSubset<T, LendingProductUpdateArgs<ExtArgs>>): Prisma__LendingProductClient<$Result.GetResult<Prisma.$LendingProductPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more LendingProducts.
     * @param {LendingProductDeleteManyArgs} args - Arguments to filter LendingProducts to delete.
     * @example
     * // Delete a few LendingProducts
     * const { count } = await prisma.lendingProduct.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LendingProductDeleteManyArgs>(args?: SelectSubset<T, LendingProductDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LendingProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LendingProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LendingProducts
     * const lendingProduct = await prisma.lendingProduct.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LendingProductUpdateManyArgs>(args: SelectSubset<T, LendingProductUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LendingProduct.
     * @param {LendingProductUpsertArgs} args - Arguments to update or create a LendingProduct.
     * @example
     * // Update or create a LendingProduct
     * const lendingProduct = await prisma.lendingProduct.upsert({
     *   create: {
     *     // ... data to create a LendingProduct
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LendingProduct we want to update
     *   }
     * })
     */
    upsert<T extends LendingProductUpsertArgs>(args: SelectSubset<T, LendingProductUpsertArgs<ExtArgs>>): Prisma__LendingProductClient<$Result.GetResult<Prisma.$LendingProductPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of LendingProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LendingProductCountArgs} args - Arguments to filter LendingProducts to count.
     * @example
     * // Count the number of LendingProducts
     * const count = await prisma.lendingProduct.count({
     *   where: {
     *     // ... the filter for the LendingProducts we want to count
     *   }
     * })
    **/
    count<T extends LendingProductCountArgs>(
      args?: Subset<T, LendingProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LendingProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LendingProduct.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LendingProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LendingProductAggregateArgs>(args: Subset<T, LendingProductAggregateArgs>): Prisma.PrismaPromise<GetLendingProductAggregateType<T>>

    /**
     * Group by LendingProduct.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LendingProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LendingProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LendingProductGroupByArgs['orderBy'] }
        : { orderBy?: LendingProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LendingProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLendingProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LendingProduct model
   */
  readonly fields: LendingProductFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LendingProduct.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LendingProductClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    lending<T extends LendingDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LendingDefaultArgs<ExtArgs>>): Prisma__LendingClient<$Result.GetResult<Prisma.$LendingPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    product<T extends productDefaultArgs<ExtArgs> = {}>(args?: Subset<T, productDefaultArgs<ExtArgs>>): Prisma__productClient<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LendingProduct model
   */ 
  interface LendingProductFieldRefs {
    readonly lendingId: FieldRef<"LendingProduct", 'Int'>
    readonly productId: FieldRef<"LendingProduct", 'Int'>
    readonly amount: FieldRef<"LendingProduct", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * LendingProduct findUnique
   */
  export type LendingProductFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LendingProduct
     */
    select?: LendingProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LendingProductInclude<ExtArgs> | null
    /**
     * Filter, which LendingProduct to fetch.
     */
    where: LendingProductWhereUniqueInput
  }

  /**
   * LendingProduct findUniqueOrThrow
   */
  export type LendingProductFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LendingProduct
     */
    select?: LendingProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LendingProductInclude<ExtArgs> | null
    /**
     * Filter, which LendingProduct to fetch.
     */
    where: LendingProductWhereUniqueInput
  }

  /**
   * LendingProduct findFirst
   */
  export type LendingProductFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LendingProduct
     */
    select?: LendingProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LendingProductInclude<ExtArgs> | null
    /**
     * Filter, which LendingProduct to fetch.
     */
    where?: LendingProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LendingProducts to fetch.
     */
    orderBy?: LendingProductOrderByWithRelationInput | LendingProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LendingProducts.
     */
    cursor?: LendingProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LendingProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LendingProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LendingProducts.
     */
    distinct?: LendingProductScalarFieldEnum | LendingProductScalarFieldEnum[]
  }

  /**
   * LendingProduct findFirstOrThrow
   */
  export type LendingProductFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LendingProduct
     */
    select?: LendingProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LendingProductInclude<ExtArgs> | null
    /**
     * Filter, which LendingProduct to fetch.
     */
    where?: LendingProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LendingProducts to fetch.
     */
    orderBy?: LendingProductOrderByWithRelationInput | LendingProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LendingProducts.
     */
    cursor?: LendingProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LendingProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LendingProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LendingProducts.
     */
    distinct?: LendingProductScalarFieldEnum | LendingProductScalarFieldEnum[]
  }

  /**
   * LendingProduct findMany
   */
  export type LendingProductFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LendingProduct
     */
    select?: LendingProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LendingProductInclude<ExtArgs> | null
    /**
     * Filter, which LendingProducts to fetch.
     */
    where?: LendingProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LendingProducts to fetch.
     */
    orderBy?: LendingProductOrderByWithRelationInput | LendingProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LendingProducts.
     */
    cursor?: LendingProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LendingProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LendingProducts.
     */
    skip?: number
    distinct?: LendingProductScalarFieldEnum | LendingProductScalarFieldEnum[]
  }

  /**
   * LendingProduct create
   */
  export type LendingProductCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LendingProduct
     */
    select?: LendingProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LendingProductInclude<ExtArgs> | null
    /**
     * The data needed to create a LendingProduct.
     */
    data: XOR<LendingProductCreateInput, LendingProductUncheckedCreateInput>
  }

  /**
   * LendingProduct createMany
   */
  export type LendingProductCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LendingProducts.
     */
    data: LendingProductCreateManyInput | LendingProductCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LendingProduct update
   */
  export type LendingProductUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LendingProduct
     */
    select?: LendingProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LendingProductInclude<ExtArgs> | null
    /**
     * The data needed to update a LendingProduct.
     */
    data: XOR<LendingProductUpdateInput, LendingProductUncheckedUpdateInput>
    /**
     * Choose, which LendingProduct to update.
     */
    where: LendingProductWhereUniqueInput
  }

  /**
   * LendingProduct updateMany
   */
  export type LendingProductUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LendingProducts.
     */
    data: XOR<LendingProductUpdateManyMutationInput, LendingProductUncheckedUpdateManyInput>
    /**
     * Filter which LendingProducts to update
     */
    where?: LendingProductWhereInput
  }

  /**
   * LendingProduct upsert
   */
  export type LendingProductUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LendingProduct
     */
    select?: LendingProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LendingProductInclude<ExtArgs> | null
    /**
     * The filter to search for the LendingProduct to update in case it exists.
     */
    where: LendingProductWhereUniqueInput
    /**
     * In case the LendingProduct found by the `where` argument doesn't exist, create a new LendingProduct with this data.
     */
    create: XOR<LendingProductCreateInput, LendingProductUncheckedCreateInput>
    /**
     * In case the LendingProduct was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LendingProductUpdateInput, LendingProductUncheckedUpdateInput>
  }

  /**
   * LendingProduct delete
   */
  export type LendingProductDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LendingProduct
     */
    select?: LendingProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LendingProductInclude<ExtArgs> | null
    /**
     * Filter which LendingProduct to delete.
     */
    where: LendingProductWhereUniqueInput
  }

  /**
   * LendingProduct deleteMany
   */
  export type LendingProductDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LendingProducts to delete
     */
    where?: LendingProductWhereInput
  }

  /**
   * LendingProduct without action
   */
  export type LendingProductDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LendingProduct
     */
    select?: LendingProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LendingProductInclude<ExtArgs> | null
  }


  /**
   * Model Alert
   */

  export type AggregateAlert = {
    _count: AlertCountAggregateOutputType | null
    _avg: AlertAvgAggregateOutputType | null
    _sum: AlertSumAggregateOutputType | null
    _min: AlertMinAggregateOutputType | null
    _max: AlertMaxAggregateOutputType | null
  }

  export type AlertAvgAggregateOutputType = {
    id: number | null
  }

  export type AlertSumAggregateOutputType = {
    id: number | null
  }

  export type AlertMinAggregateOutputType = {
    id: number | null
    date: Date | null
    name: string | null
    description: string | null
    state: boolean | null
  }

  export type AlertMaxAggregateOutputType = {
    id: number | null
    date: Date | null
    name: string | null
    description: string | null
    state: boolean | null
  }

  export type AlertCountAggregateOutputType = {
    id: number
    date: number
    name: number
    description: number
    state: number
    _all: number
  }


  export type AlertAvgAggregateInputType = {
    id?: true
  }

  export type AlertSumAggregateInputType = {
    id?: true
  }

  export type AlertMinAggregateInputType = {
    id?: true
    date?: true
    name?: true
    description?: true
    state?: true
  }

  export type AlertMaxAggregateInputType = {
    id?: true
    date?: true
    name?: true
    description?: true
    state?: true
  }

  export type AlertCountAggregateInputType = {
    id?: true
    date?: true
    name?: true
    description?: true
    state?: true
    _all?: true
  }

  export type AlertAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Alert to aggregate.
     */
    where?: AlertWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alerts to fetch.
     */
    orderBy?: AlertOrderByWithRelationInput | AlertOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AlertWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alerts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alerts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Alerts
    **/
    _count?: true | AlertCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AlertAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AlertSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AlertMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AlertMaxAggregateInputType
  }

  export type GetAlertAggregateType<T extends AlertAggregateArgs> = {
        [P in keyof T & keyof AggregateAlert]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAlert[P]>
      : GetScalarType<T[P], AggregateAlert[P]>
  }




  export type AlertGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlertWhereInput
    orderBy?: AlertOrderByWithAggregationInput | AlertOrderByWithAggregationInput[]
    by: AlertScalarFieldEnum[] | AlertScalarFieldEnum
    having?: AlertScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AlertCountAggregateInputType | true
    _avg?: AlertAvgAggregateInputType
    _sum?: AlertSumAggregateInputType
    _min?: AlertMinAggregateInputType
    _max?: AlertMaxAggregateInputType
  }

  export type AlertGroupByOutputType = {
    id: number
    date: Date
    name: string
    description: string
    state: boolean
    _count: AlertCountAggregateOutputType | null
    _avg: AlertAvgAggregateOutputType | null
    _sum: AlertSumAggregateOutputType | null
    _min: AlertMinAggregateOutputType | null
    _max: AlertMaxAggregateOutputType | null
  }

  type GetAlertGroupByPayload<T extends AlertGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AlertGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AlertGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AlertGroupByOutputType[P]>
            : GetScalarType<T[P], AlertGroupByOutputType[P]>
        }
      >
    >


  export type AlertSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    name?: boolean
    description?: boolean
    state?: boolean
    lendings?: boolean | Alert$lendingsArgs<ExtArgs>
    _count?: boolean | AlertCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["alert"]>


  export type AlertSelectScalar = {
    id?: boolean
    date?: boolean
    name?: boolean
    description?: boolean
    state?: boolean
  }

  export type AlertInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lendings?: boolean | Alert$lendingsArgs<ExtArgs>
    _count?: boolean | AlertCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $AlertPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Alert"
    objects: {
      lendings: Prisma.$AlertLendingPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      date: Date
      name: string
      description: string
      state: boolean
    }, ExtArgs["result"]["alert"]>
    composites: {}
  }

  type AlertGetPayload<S extends boolean | null | undefined | AlertDefaultArgs> = $Result.GetResult<Prisma.$AlertPayload, S>

  type AlertCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AlertFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AlertCountAggregateInputType | true
    }

  export interface AlertDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Alert'], meta: { name: 'Alert' } }
    /**
     * Find zero or one Alert that matches the filter.
     * @param {AlertFindUniqueArgs} args - Arguments to find a Alert
     * @example
     * // Get one Alert
     * const alert = await prisma.alert.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AlertFindUniqueArgs>(args: SelectSubset<T, AlertFindUniqueArgs<ExtArgs>>): Prisma__AlertClient<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Alert that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AlertFindUniqueOrThrowArgs} args - Arguments to find a Alert
     * @example
     * // Get one Alert
     * const alert = await prisma.alert.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AlertFindUniqueOrThrowArgs>(args: SelectSubset<T, AlertFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AlertClient<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Alert that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertFindFirstArgs} args - Arguments to find a Alert
     * @example
     * // Get one Alert
     * const alert = await prisma.alert.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AlertFindFirstArgs>(args?: SelectSubset<T, AlertFindFirstArgs<ExtArgs>>): Prisma__AlertClient<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Alert that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertFindFirstOrThrowArgs} args - Arguments to find a Alert
     * @example
     * // Get one Alert
     * const alert = await prisma.alert.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AlertFindFirstOrThrowArgs>(args?: SelectSubset<T, AlertFindFirstOrThrowArgs<ExtArgs>>): Prisma__AlertClient<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Alerts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Alerts
     * const alerts = await prisma.alert.findMany()
     * 
     * // Get first 10 Alerts
     * const alerts = await prisma.alert.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const alertWithIdOnly = await prisma.alert.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AlertFindManyArgs>(args?: SelectSubset<T, AlertFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Alert.
     * @param {AlertCreateArgs} args - Arguments to create a Alert.
     * @example
     * // Create one Alert
     * const Alert = await prisma.alert.create({
     *   data: {
     *     // ... data to create a Alert
     *   }
     * })
     * 
     */
    create<T extends AlertCreateArgs>(args: SelectSubset<T, AlertCreateArgs<ExtArgs>>): Prisma__AlertClient<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Alerts.
     * @param {AlertCreateManyArgs} args - Arguments to create many Alerts.
     * @example
     * // Create many Alerts
     * const alert = await prisma.alert.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AlertCreateManyArgs>(args?: SelectSubset<T, AlertCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Alert.
     * @param {AlertDeleteArgs} args - Arguments to delete one Alert.
     * @example
     * // Delete one Alert
     * const Alert = await prisma.alert.delete({
     *   where: {
     *     // ... filter to delete one Alert
     *   }
     * })
     * 
     */
    delete<T extends AlertDeleteArgs>(args: SelectSubset<T, AlertDeleteArgs<ExtArgs>>): Prisma__AlertClient<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Alert.
     * @param {AlertUpdateArgs} args - Arguments to update one Alert.
     * @example
     * // Update one Alert
     * const alert = await prisma.alert.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AlertUpdateArgs>(args: SelectSubset<T, AlertUpdateArgs<ExtArgs>>): Prisma__AlertClient<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Alerts.
     * @param {AlertDeleteManyArgs} args - Arguments to filter Alerts to delete.
     * @example
     * // Delete a few Alerts
     * const { count } = await prisma.alert.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AlertDeleteManyArgs>(args?: SelectSubset<T, AlertDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Alerts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Alerts
     * const alert = await prisma.alert.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AlertUpdateManyArgs>(args: SelectSubset<T, AlertUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Alert.
     * @param {AlertUpsertArgs} args - Arguments to update or create a Alert.
     * @example
     * // Update or create a Alert
     * const alert = await prisma.alert.upsert({
     *   create: {
     *     // ... data to create a Alert
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Alert we want to update
     *   }
     * })
     */
    upsert<T extends AlertUpsertArgs>(args: SelectSubset<T, AlertUpsertArgs<ExtArgs>>): Prisma__AlertClient<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Alerts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertCountArgs} args - Arguments to filter Alerts to count.
     * @example
     * // Count the number of Alerts
     * const count = await prisma.alert.count({
     *   where: {
     *     // ... the filter for the Alerts we want to count
     *   }
     * })
    **/
    count<T extends AlertCountArgs>(
      args?: Subset<T, AlertCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AlertCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Alert.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AlertAggregateArgs>(args: Subset<T, AlertAggregateArgs>): Prisma.PrismaPromise<GetAlertAggregateType<T>>

    /**
     * Group by Alert.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AlertGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AlertGroupByArgs['orderBy'] }
        : { orderBy?: AlertGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AlertGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAlertGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Alert model
   */
  readonly fields: AlertFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Alert.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AlertClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    lendings<T extends Alert$lendingsArgs<ExtArgs> = {}>(args?: Subset<T, Alert$lendingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlertLendingPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Alert model
   */ 
  interface AlertFieldRefs {
    readonly id: FieldRef<"Alert", 'Int'>
    readonly date: FieldRef<"Alert", 'DateTime'>
    readonly name: FieldRef<"Alert", 'String'>
    readonly description: FieldRef<"Alert", 'String'>
    readonly state: FieldRef<"Alert", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Alert findUnique
   */
  export type AlertFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertInclude<ExtArgs> | null
    /**
     * Filter, which Alert to fetch.
     */
    where: AlertWhereUniqueInput
  }

  /**
   * Alert findUniqueOrThrow
   */
  export type AlertFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertInclude<ExtArgs> | null
    /**
     * Filter, which Alert to fetch.
     */
    where: AlertWhereUniqueInput
  }

  /**
   * Alert findFirst
   */
  export type AlertFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertInclude<ExtArgs> | null
    /**
     * Filter, which Alert to fetch.
     */
    where?: AlertWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alerts to fetch.
     */
    orderBy?: AlertOrderByWithRelationInput | AlertOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Alerts.
     */
    cursor?: AlertWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alerts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alerts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Alerts.
     */
    distinct?: AlertScalarFieldEnum | AlertScalarFieldEnum[]
  }

  /**
   * Alert findFirstOrThrow
   */
  export type AlertFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertInclude<ExtArgs> | null
    /**
     * Filter, which Alert to fetch.
     */
    where?: AlertWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alerts to fetch.
     */
    orderBy?: AlertOrderByWithRelationInput | AlertOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Alerts.
     */
    cursor?: AlertWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alerts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alerts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Alerts.
     */
    distinct?: AlertScalarFieldEnum | AlertScalarFieldEnum[]
  }

  /**
   * Alert findMany
   */
  export type AlertFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertInclude<ExtArgs> | null
    /**
     * Filter, which Alerts to fetch.
     */
    where?: AlertWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alerts to fetch.
     */
    orderBy?: AlertOrderByWithRelationInput | AlertOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Alerts.
     */
    cursor?: AlertWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alerts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alerts.
     */
    skip?: number
    distinct?: AlertScalarFieldEnum | AlertScalarFieldEnum[]
  }

  /**
   * Alert create
   */
  export type AlertCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertInclude<ExtArgs> | null
    /**
     * The data needed to create a Alert.
     */
    data: XOR<AlertCreateInput, AlertUncheckedCreateInput>
  }

  /**
   * Alert createMany
   */
  export type AlertCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Alerts.
     */
    data: AlertCreateManyInput | AlertCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Alert update
   */
  export type AlertUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertInclude<ExtArgs> | null
    /**
     * The data needed to update a Alert.
     */
    data: XOR<AlertUpdateInput, AlertUncheckedUpdateInput>
    /**
     * Choose, which Alert to update.
     */
    where: AlertWhereUniqueInput
  }

  /**
   * Alert updateMany
   */
  export type AlertUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Alerts.
     */
    data: XOR<AlertUpdateManyMutationInput, AlertUncheckedUpdateManyInput>
    /**
     * Filter which Alerts to update
     */
    where?: AlertWhereInput
  }

  /**
   * Alert upsert
   */
  export type AlertUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertInclude<ExtArgs> | null
    /**
     * The filter to search for the Alert to update in case it exists.
     */
    where: AlertWhereUniqueInput
    /**
     * In case the Alert found by the `where` argument doesn't exist, create a new Alert with this data.
     */
    create: XOR<AlertCreateInput, AlertUncheckedCreateInput>
    /**
     * In case the Alert was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AlertUpdateInput, AlertUncheckedUpdateInput>
  }

  /**
   * Alert delete
   */
  export type AlertDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertInclude<ExtArgs> | null
    /**
     * Filter which Alert to delete.
     */
    where: AlertWhereUniqueInput
  }

  /**
   * Alert deleteMany
   */
  export type AlertDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Alerts to delete
     */
    where?: AlertWhereInput
  }

  /**
   * Alert.lendings
   */
  export type Alert$lendingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlertLending
     */
    select?: AlertLendingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertLendingInclude<ExtArgs> | null
    where?: AlertLendingWhereInput
    orderBy?: AlertLendingOrderByWithRelationInput | AlertLendingOrderByWithRelationInput[]
    cursor?: AlertLendingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AlertLendingScalarFieldEnum | AlertLendingScalarFieldEnum[]
  }

  /**
   * Alert without action
   */
  export type AlertDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertInclude<ExtArgs> | null
  }


  /**
   * Model AlertLending
   */

  export type AggregateAlertLending = {
    _count: AlertLendingCountAggregateOutputType | null
    _avg: AlertLendingAvgAggregateOutputType | null
    _sum: AlertLendingSumAggregateOutputType | null
    _min: AlertLendingMinAggregateOutputType | null
    _max: AlertLendingMaxAggregateOutputType | null
  }

  export type AlertLendingAvgAggregateOutputType = {
    alertId: number | null
    lendingId: number | null
  }

  export type AlertLendingSumAggregateOutputType = {
    alertId: number | null
    lendingId: number | null
  }

  export type AlertLendingMinAggregateOutputType = {
    alertId: number | null
    lendingId: number | null
  }

  export type AlertLendingMaxAggregateOutputType = {
    alertId: number | null
    lendingId: number | null
  }

  export type AlertLendingCountAggregateOutputType = {
    alertId: number
    lendingId: number
    _all: number
  }


  export type AlertLendingAvgAggregateInputType = {
    alertId?: true
    lendingId?: true
  }

  export type AlertLendingSumAggregateInputType = {
    alertId?: true
    lendingId?: true
  }

  export type AlertLendingMinAggregateInputType = {
    alertId?: true
    lendingId?: true
  }

  export type AlertLendingMaxAggregateInputType = {
    alertId?: true
    lendingId?: true
  }

  export type AlertLendingCountAggregateInputType = {
    alertId?: true
    lendingId?: true
    _all?: true
  }

  export type AlertLendingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AlertLending to aggregate.
     */
    where?: AlertLendingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AlertLendings to fetch.
     */
    orderBy?: AlertLendingOrderByWithRelationInput | AlertLendingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AlertLendingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AlertLendings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AlertLendings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AlertLendings
    **/
    _count?: true | AlertLendingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AlertLendingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AlertLendingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AlertLendingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AlertLendingMaxAggregateInputType
  }

  export type GetAlertLendingAggregateType<T extends AlertLendingAggregateArgs> = {
        [P in keyof T & keyof AggregateAlertLending]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAlertLending[P]>
      : GetScalarType<T[P], AggregateAlertLending[P]>
  }




  export type AlertLendingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlertLendingWhereInput
    orderBy?: AlertLendingOrderByWithAggregationInput | AlertLendingOrderByWithAggregationInput[]
    by: AlertLendingScalarFieldEnum[] | AlertLendingScalarFieldEnum
    having?: AlertLendingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AlertLendingCountAggregateInputType | true
    _avg?: AlertLendingAvgAggregateInputType
    _sum?: AlertLendingSumAggregateInputType
    _min?: AlertLendingMinAggregateInputType
    _max?: AlertLendingMaxAggregateInputType
  }

  export type AlertLendingGroupByOutputType = {
    alertId: number
    lendingId: number
    _count: AlertLendingCountAggregateOutputType | null
    _avg: AlertLendingAvgAggregateOutputType | null
    _sum: AlertLendingSumAggregateOutputType | null
    _min: AlertLendingMinAggregateOutputType | null
    _max: AlertLendingMaxAggregateOutputType | null
  }

  type GetAlertLendingGroupByPayload<T extends AlertLendingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AlertLendingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AlertLendingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AlertLendingGroupByOutputType[P]>
            : GetScalarType<T[P], AlertLendingGroupByOutputType[P]>
        }
      >
    >


  export type AlertLendingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    alertId?: boolean
    lendingId?: boolean
    alert?: boolean | AlertDefaultArgs<ExtArgs>
    lending?: boolean | LendingDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["alertLending"]>


  export type AlertLendingSelectScalar = {
    alertId?: boolean
    lendingId?: boolean
  }

  export type AlertLendingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    alert?: boolean | AlertDefaultArgs<ExtArgs>
    lending?: boolean | LendingDefaultArgs<ExtArgs>
  }

  export type $AlertLendingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AlertLending"
    objects: {
      alert: Prisma.$AlertPayload<ExtArgs>
      lending: Prisma.$LendingPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      alertId: number
      lendingId: number
    }, ExtArgs["result"]["alertLending"]>
    composites: {}
  }

  type AlertLendingGetPayload<S extends boolean | null | undefined | AlertLendingDefaultArgs> = $Result.GetResult<Prisma.$AlertLendingPayload, S>

  type AlertLendingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AlertLendingFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AlertLendingCountAggregateInputType | true
    }

  export interface AlertLendingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AlertLending'], meta: { name: 'AlertLending' } }
    /**
     * Find zero or one AlertLending that matches the filter.
     * @param {AlertLendingFindUniqueArgs} args - Arguments to find a AlertLending
     * @example
     * // Get one AlertLending
     * const alertLending = await prisma.alertLending.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AlertLendingFindUniqueArgs>(args: SelectSubset<T, AlertLendingFindUniqueArgs<ExtArgs>>): Prisma__AlertLendingClient<$Result.GetResult<Prisma.$AlertLendingPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AlertLending that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AlertLendingFindUniqueOrThrowArgs} args - Arguments to find a AlertLending
     * @example
     * // Get one AlertLending
     * const alertLending = await prisma.alertLending.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AlertLendingFindUniqueOrThrowArgs>(args: SelectSubset<T, AlertLendingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AlertLendingClient<$Result.GetResult<Prisma.$AlertLendingPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AlertLending that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertLendingFindFirstArgs} args - Arguments to find a AlertLending
     * @example
     * // Get one AlertLending
     * const alertLending = await prisma.alertLending.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AlertLendingFindFirstArgs>(args?: SelectSubset<T, AlertLendingFindFirstArgs<ExtArgs>>): Prisma__AlertLendingClient<$Result.GetResult<Prisma.$AlertLendingPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AlertLending that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertLendingFindFirstOrThrowArgs} args - Arguments to find a AlertLending
     * @example
     * // Get one AlertLending
     * const alertLending = await prisma.alertLending.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AlertLendingFindFirstOrThrowArgs>(args?: SelectSubset<T, AlertLendingFindFirstOrThrowArgs<ExtArgs>>): Prisma__AlertLendingClient<$Result.GetResult<Prisma.$AlertLendingPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AlertLendings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertLendingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AlertLendings
     * const alertLendings = await prisma.alertLending.findMany()
     * 
     * // Get first 10 AlertLendings
     * const alertLendings = await prisma.alertLending.findMany({ take: 10 })
     * 
     * // Only select the `alertId`
     * const alertLendingWithAlertIdOnly = await prisma.alertLending.findMany({ select: { alertId: true } })
     * 
     */
    findMany<T extends AlertLendingFindManyArgs>(args?: SelectSubset<T, AlertLendingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlertLendingPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AlertLending.
     * @param {AlertLendingCreateArgs} args - Arguments to create a AlertLending.
     * @example
     * // Create one AlertLending
     * const AlertLending = await prisma.alertLending.create({
     *   data: {
     *     // ... data to create a AlertLending
     *   }
     * })
     * 
     */
    create<T extends AlertLendingCreateArgs>(args: SelectSubset<T, AlertLendingCreateArgs<ExtArgs>>): Prisma__AlertLendingClient<$Result.GetResult<Prisma.$AlertLendingPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AlertLendings.
     * @param {AlertLendingCreateManyArgs} args - Arguments to create many AlertLendings.
     * @example
     * // Create many AlertLendings
     * const alertLending = await prisma.alertLending.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AlertLendingCreateManyArgs>(args?: SelectSubset<T, AlertLendingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AlertLending.
     * @param {AlertLendingDeleteArgs} args - Arguments to delete one AlertLending.
     * @example
     * // Delete one AlertLending
     * const AlertLending = await prisma.alertLending.delete({
     *   where: {
     *     // ... filter to delete one AlertLending
     *   }
     * })
     * 
     */
    delete<T extends AlertLendingDeleteArgs>(args: SelectSubset<T, AlertLendingDeleteArgs<ExtArgs>>): Prisma__AlertLendingClient<$Result.GetResult<Prisma.$AlertLendingPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AlertLending.
     * @param {AlertLendingUpdateArgs} args - Arguments to update one AlertLending.
     * @example
     * // Update one AlertLending
     * const alertLending = await prisma.alertLending.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AlertLendingUpdateArgs>(args: SelectSubset<T, AlertLendingUpdateArgs<ExtArgs>>): Prisma__AlertLendingClient<$Result.GetResult<Prisma.$AlertLendingPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AlertLendings.
     * @param {AlertLendingDeleteManyArgs} args - Arguments to filter AlertLendings to delete.
     * @example
     * // Delete a few AlertLendings
     * const { count } = await prisma.alertLending.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AlertLendingDeleteManyArgs>(args?: SelectSubset<T, AlertLendingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AlertLendings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertLendingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AlertLendings
     * const alertLending = await prisma.alertLending.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AlertLendingUpdateManyArgs>(args: SelectSubset<T, AlertLendingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AlertLending.
     * @param {AlertLendingUpsertArgs} args - Arguments to update or create a AlertLending.
     * @example
     * // Update or create a AlertLending
     * const alertLending = await prisma.alertLending.upsert({
     *   create: {
     *     // ... data to create a AlertLending
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AlertLending we want to update
     *   }
     * })
     */
    upsert<T extends AlertLendingUpsertArgs>(args: SelectSubset<T, AlertLendingUpsertArgs<ExtArgs>>): Prisma__AlertLendingClient<$Result.GetResult<Prisma.$AlertLendingPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AlertLendings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertLendingCountArgs} args - Arguments to filter AlertLendings to count.
     * @example
     * // Count the number of AlertLendings
     * const count = await prisma.alertLending.count({
     *   where: {
     *     // ... the filter for the AlertLendings we want to count
     *   }
     * })
    **/
    count<T extends AlertLendingCountArgs>(
      args?: Subset<T, AlertLendingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AlertLendingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AlertLending.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertLendingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AlertLendingAggregateArgs>(args: Subset<T, AlertLendingAggregateArgs>): Prisma.PrismaPromise<GetAlertLendingAggregateType<T>>

    /**
     * Group by AlertLending.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertLendingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AlertLendingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AlertLendingGroupByArgs['orderBy'] }
        : { orderBy?: AlertLendingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AlertLendingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAlertLendingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AlertLending model
   */
  readonly fields: AlertLendingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AlertLending.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AlertLendingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    alert<T extends AlertDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AlertDefaultArgs<ExtArgs>>): Prisma__AlertClient<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    lending<T extends LendingDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LendingDefaultArgs<ExtArgs>>): Prisma__LendingClient<$Result.GetResult<Prisma.$LendingPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AlertLending model
   */ 
  interface AlertLendingFieldRefs {
    readonly alertId: FieldRef<"AlertLending", 'Int'>
    readonly lendingId: FieldRef<"AlertLending", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * AlertLending findUnique
   */
  export type AlertLendingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlertLending
     */
    select?: AlertLendingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertLendingInclude<ExtArgs> | null
    /**
     * Filter, which AlertLending to fetch.
     */
    where: AlertLendingWhereUniqueInput
  }

  /**
   * AlertLending findUniqueOrThrow
   */
  export type AlertLendingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlertLending
     */
    select?: AlertLendingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertLendingInclude<ExtArgs> | null
    /**
     * Filter, which AlertLending to fetch.
     */
    where: AlertLendingWhereUniqueInput
  }

  /**
   * AlertLending findFirst
   */
  export type AlertLendingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlertLending
     */
    select?: AlertLendingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertLendingInclude<ExtArgs> | null
    /**
     * Filter, which AlertLending to fetch.
     */
    where?: AlertLendingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AlertLendings to fetch.
     */
    orderBy?: AlertLendingOrderByWithRelationInput | AlertLendingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AlertLendings.
     */
    cursor?: AlertLendingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AlertLendings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AlertLendings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AlertLendings.
     */
    distinct?: AlertLendingScalarFieldEnum | AlertLendingScalarFieldEnum[]
  }

  /**
   * AlertLending findFirstOrThrow
   */
  export type AlertLendingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlertLending
     */
    select?: AlertLendingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertLendingInclude<ExtArgs> | null
    /**
     * Filter, which AlertLending to fetch.
     */
    where?: AlertLendingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AlertLendings to fetch.
     */
    orderBy?: AlertLendingOrderByWithRelationInput | AlertLendingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AlertLendings.
     */
    cursor?: AlertLendingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AlertLendings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AlertLendings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AlertLendings.
     */
    distinct?: AlertLendingScalarFieldEnum | AlertLendingScalarFieldEnum[]
  }

  /**
   * AlertLending findMany
   */
  export type AlertLendingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlertLending
     */
    select?: AlertLendingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertLendingInclude<ExtArgs> | null
    /**
     * Filter, which AlertLendings to fetch.
     */
    where?: AlertLendingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AlertLendings to fetch.
     */
    orderBy?: AlertLendingOrderByWithRelationInput | AlertLendingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AlertLendings.
     */
    cursor?: AlertLendingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AlertLendings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AlertLendings.
     */
    skip?: number
    distinct?: AlertLendingScalarFieldEnum | AlertLendingScalarFieldEnum[]
  }

  /**
   * AlertLending create
   */
  export type AlertLendingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlertLending
     */
    select?: AlertLendingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertLendingInclude<ExtArgs> | null
    /**
     * The data needed to create a AlertLending.
     */
    data: XOR<AlertLendingCreateInput, AlertLendingUncheckedCreateInput>
  }

  /**
   * AlertLending createMany
   */
  export type AlertLendingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AlertLendings.
     */
    data: AlertLendingCreateManyInput | AlertLendingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AlertLending update
   */
  export type AlertLendingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlertLending
     */
    select?: AlertLendingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertLendingInclude<ExtArgs> | null
    /**
     * The data needed to update a AlertLending.
     */
    data: XOR<AlertLendingUpdateInput, AlertLendingUncheckedUpdateInput>
    /**
     * Choose, which AlertLending to update.
     */
    where: AlertLendingWhereUniqueInput
  }

  /**
   * AlertLending updateMany
   */
  export type AlertLendingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AlertLendings.
     */
    data: XOR<AlertLendingUpdateManyMutationInput, AlertLendingUncheckedUpdateManyInput>
    /**
     * Filter which AlertLendings to update
     */
    where?: AlertLendingWhereInput
  }

  /**
   * AlertLending upsert
   */
  export type AlertLendingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlertLending
     */
    select?: AlertLendingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertLendingInclude<ExtArgs> | null
    /**
     * The filter to search for the AlertLending to update in case it exists.
     */
    where: AlertLendingWhereUniqueInput
    /**
     * In case the AlertLending found by the `where` argument doesn't exist, create a new AlertLending with this data.
     */
    create: XOR<AlertLendingCreateInput, AlertLendingUncheckedCreateInput>
    /**
     * In case the AlertLending was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AlertLendingUpdateInput, AlertLendingUncheckedUpdateInput>
  }

  /**
   * AlertLending delete
   */
  export type AlertLendingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlertLending
     */
    select?: AlertLendingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertLendingInclude<ExtArgs> | null
    /**
     * Filter which AlertLending to delete.
     */
    where: AlertLendingWhereUniqueInput
  }

  /**
   * AlertLending deleteMany
   */
  export type AlertLendingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AlertLendings to delete
     */
    where?: AlertLendingWhereInput
  }

  /**
   * AlertLending without action
   */
  export type AlertLendingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlertLending
     */
    select?: AlertLendingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertLendingInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    mail: string | null
    username: string | null
    password: string | null
  }

  export type UserMaxAggregateOutputType = {
    mail: string | null
    username: string | null
    password: string | null
  }

  export type UserCountAggregateOutputType = {
    mail: number
    username: number
    password: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    mail?: true
    username?: true
    password?: true
  }

  export type UserMaxAggregateInputType = {
    mail?: true
    username?: true
    password?: true
  }

  export type UserCountAggregateInputType = {
    mail?: true
    username?: true
    password?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    mail: string
    username: string
    password: string
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    mail?: boolean
    username?: boolean
    password?: boolean
  }, ExtArgs["result"]["user"]>


  export type UserSelectScalar = {
    mail?: boolean
    username?: boolean
    password?: boolean
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      mail: string
      username: string
      password: string
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `mail`
     * const userWithMailOnly = await prisma.user.findMany({ select: { mail: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly mail: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const BorrowerScalarFieldEnum: {
    id: 'id',
    state: 'state',
    rut: 'rut',
    name: 'name',
    mail: 'mail',
    phoneNumber: 'phoneNumber',
    type: 'type'
  };

  export type BorrowerScalarFieldEnum = (typeof BorrowerScalarFieldEnum)[keyof typeof BorrowerScalarFieldEnum]


  export const StudentScalarFieldEnum: {
    id: 'id',
    codeDegree: 'codeDegree'
  };

  export type StudentScalarFieldEnum = (typeof StudentScalarFieldEnum)[keyof typeof StudentScalarFieldEnum]


  export const DegreeScalarFieldEnum: {
    code: 'code',
    name: 'name'
  };

  export type DegreeScalarFieldEnum = (typeof DegreeScalarFieldEnum)[keyof typeof DegreeScalarFieldEnum]


  export const TeacherScalarFieldEnum: {
    id: 'id'
  };

  export type TeacherScalarFieldEnum = (typeof TeacherScalarFieldEnum)[keyof typeof TeacherScalarFieldEnum]


  export const AssistantScalarFieldEnum: {
    id: 'id',
    role: 'role'
  };

  export type AssistantScalarFieldEnum = (typeof AssistantScalarFieldEnum)[keyof typeof AssistantScalarFieldEnum]


  export const ProductScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    stock: 'stock',
    criticalStock: 'criticalStock',
    state: 'state',
    fungible: 'fungible'
  };

  export type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]


  export const LendingScalarFieldEnum: {
    id: 'id',
    state: 'state',
    date: 'date',
    finalizeDate: 'finalizeDate',
    eliminateDate: 'eliminateDate',
    comments: 'comments',
    BorrowerId: 'BorrowerId',
    teacherId: 'teacherId'
  };

  export type LendingScalarFieldEnum = (typeof LendingScalarFieldEnum)[keyof typeof LendingScalarFieldEnum]


  export const LendingProductScalarFieldEnum: {
    lendingId: 'lendingId',
    productId: 'productId',
    amount: 'amount'
  };

  export type LendingProductScalarFieldEnum = (typeof LendingProductScalarFieldEnum)[keyof typeof LendingProductScalarFieldEnum]


  export const AlertScalarFieldEnum: {
    id: 'id',
    date: 'date',
    name: 'name',
    description: 'description',
    state: 'state'
  };

  export type AlertScalarFieldEnum = (typeof AlertScalarFieldEnum)[keyof typeof AlertScalarFieldEnum]


  export const AlertLendingScalarFieldEnum: {
    alertId: 'alertId',
    lendingId: 'lendingId'
  };

  export type AlertLendingScalarFieldEnum = (typeof AlertLendingScalarFieldEnum)[keyof typeof AlertLendingScalarFieldEnum]


  export const UserScalarFieldEnum: {
    mail: 'mail',
    username: 'username',
    password: 'password'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'UserType'
   */
  export type EnumUserTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserType'>
    


  /**
   * Reference to a field of type 'LendingState'
   */
  export type EnumLendingStateFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LendingState'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type BorrowerWhereInput = {
    AND?: BorrowerWhereInput | BorrowerWhereInput[]
    OR?: BorrowerWhereInput[]
    NOT?: BorrowerWhereInput | BorrowerWhereInput[]
    id?: IntFilter<"Borrower"> | number
    state?: BoolFilter<"Borrower"> | boolean
    rut?: StringFilter<"Borrower"> | string
    name?: StringFilter<"Borrower"> | string
    mail?: StringNullableFilter<"Borrower"> | string | null
    phoneNumber?: IntNullableFilter<"Borrower"> | number | null
    type?: EnumUserTypeFilter<"Borrower"> | $Enums.UserType
    lendings?: LendingListRelationFilter
    student?: XOR<StudentNullableRelationFilter, StudentWhereInput> | null
    teacher?: XOR<TeacherNullableRelationFilter, TeacherWhereInput> | null
    assistant?: XOR<AssistantNullableRelationFilter, AssistantWhereInput> | null
  }

  export type BorrowerOrderByWithRelationInput = {
    id?: SortOrder
    state?: SortOrder
    rut?: SortOrder
    name?: SortOrder
    mail?: SortOrderInput | SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    type?: SortOrder
    lendings?: LendingOrderByRelationAggregateInput
    student?: StudentOrderByWithRelationInput
    teacher?: TeacherOrderByWithRelationInput
    assistant?: AssistantOrderByWithRelationInput
  }

  export type BorrowerWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    rut?: string
    AND?: BorrowerWhereInput | BorrowerWhereInput[]
    OR?: BorrowerWhereInput[]
    NOT?: BorrowerWhereInput | BorrowerWhereInput[]
    state?: BoolFilter<"Borrower"> | boolean
    name?: StringFilter<"Borrower"> | string
    mail?: StringNullableFilter<"Borrower"> | string | null
    phoneNumber?: IntNullableFilter<"Borrower"> | number | null
    type?: EnumUserTypeFilter<"Borrower"> | $Enums.UserType
    lendings?: LendingListRelationFilter
    student?: XOR<StudentNullableRelationFilter, StudentWhereInput> | null
    teacher?: XOR<TeacherNullableRelationFilter, TeacherWhereInput> | null
    assistant?: XOR<AssistantNullableRelationFilter, AssistantWhereInput> | null
  }, "id" | "rut">

  export type BorrowerOrderByWithAggregationInput = {
    id?: SortOrder
    state?: SortOrder
    rut?: SortOrder
    name?: SortOrder
    mail?: SortOrderInput | SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    type?: SortOrder
    _count?: BorrowerCountOrderByAggregateInput
    _avg?: BorrowerAvgOrderByAggregateInput
    _max?: BorrowerMaxOrderByAggregateInput
    _min?: BorrowerMinOrderByAggregateInput
    _sum?: BorrowerSumOrderByAggregateInput
  }

  export type BorrowerScalarWhereWithAggregatesInput = {
    AND?: BorrowerScalarWhereWithAggregatesInput | BorrowerScalarWhereWithAggregatesInput[]
    OR?: BorrowerScalarWhereWithAggregatesInput[]
    NOT?: BorrowerScalarWhereWithAggregatesInput | BorrowerScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Borrower"> | number
    state?: BoolWithAggregatesFilter<"Borrower"> | boolean
    rut?: StringWithAggregatesFilter<"Borrower"> | string
    name?: StringWithAggregatesFilter<"Borrower"> | string
    mail?: StringNullableWithAggregatesFilter<"Borrower"> | string | null
    phoneNumber?: IntNullableWithAggregatesFilter<"Borrower"> | number | null
    type?: EnumUserTypeWithAggregatesFilter<"Borrower"> | $Enums.UserType
  }

  export type StudentWhereInput = {
    AND?: StudentWhereInput | StudentWhereInput[]
    OR?: StudentWhereInput[]
    NOT?: StudentWhereInput | StudentWhereInput[]
    id?: IntFilter<"Student"> | number
    codeDegree?: StringFilter<"Student"> | string
    BorrowerId?: XOR<BorrowerRelationFilter, BorrowerWhereInput>
    degree?: XOR<DegreeRelationFilter, DegreeWhereInput>
  }

  export type StudentOrderByWithRelationInput = {
    id?: SortOrder
    codeDegree?: SortOrder
    BorrowerId?: BorrowerOrderByWithRelationInput
    degree?: DegreeOrderByWithRelationInput
  }

  export type StudentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: StudentWhereInput | StudentWhereInput[]
    OR?: StudentWhereInput[]
    NOT?: StudentWhereInput | StudentWhereInput[]
    codeDegree?: StringFilter<"Student"> | string
    BorrowerId?: XOR<BorrowerRelationFilter, BorrowerWhereInput>
    degree?: XOR<DegreeRelationFilter, DegreeWhereInput>
  }, "id">

  export type StudentOrderByWithAggregationInput = {
    id?: SortOrder
    codeDegree?: SortOrder
    _count?: StudentCountOrderByAggregateInput
    _avg?: StudentAvgOrderByAggregateInput
    _max?: StudentMaxOrderByAggregateInput
    _min?: StudentMinOrderByAggregateInput
    _sum?: StudentSumOrderByAggregateInput
  }

  export type StudentScalarWhereWithAggregatesInput = {
    AND?: StudentScalarWhereWithAggregatesInput | StudentScalarWhereWithAggregatesInput[]
    OR?: StudentScalarWhereWithAggregatesInput[]
    NOT?: StudentScalarWhereWithAggregatesInput | StudentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Student"> | number
    codeDegree?: StringWithAggregatesFilter<"Student"> | string
  }

  export type DegreeWhereInput = {
    AND?: DegreeWhereInput | DegreeWhereInput[]
    OR?: DegreeWhereInput[]
    NOT?: DegreeWhereInput | DegreeWhereInput[]
    code?: StringFilter<"Degree"> | string
    name?: StringFilter<"Degree"> | string
    students?: StudentListRelationFilter
  }

  export type DegreeOrderByWithRelationInput = {
    code?: SortOrder
    name?: SortOrder
    students?: StudentOrderByRelationAggregateInput
  }

  export type DegreeWhereUniqueInput = Prisma.AtLeast<{
    code?: string
    AND?: DegreeWhereInput | DegreeWhereInput[]
    OR?: DegreeWhereInput[]
    NOT?: DegreeWhereInput | DegreeWhereInput[]
    name?: StringFilter<"Degree"> | string
    students?: StudentListRelationFilter
  }, "code">

  export type DegreeOrderByWithAggregationInput = {
    code?: SortOrder
    name?: SortOrder
    _count?: DegreeCountOrderByAggregateInput
    _max?: DegreeMaxOrderByAggregateInput
    _min?: DegreeMinOrderByAggregateInput
  }

  export type DegreeScalarWhereWithAggregatesInput = {
    AND?: DegreeScalarWhereWithAggregatesInput | DegreeScalarWhereWithAggregatesInput[]
    OR?: DegreeScalarWhereWithAggregatesInput[]
    NOT?: DegreeScalarWhereWithAggregatesInput | DegreeScalarWhereWithAggregatesInput[]
    code?: StringWithAggregatesFilter<"Degree"> | string
    name?: StringWithAggregatesFilter<"Degree"> | string
  }

  export type TeacherWhereInput = {
    AND?: TeacherWhereInput | TeacherWhereInput[]
    OR?: TeacherWhereInput[]
    NOT?: TeacherWhereInput | TeacherWhereInput[]
    id?: IntFilter<"Teacher"> | number
    BorrowerId?: XOR<BorrowerRelationFilter, BorrowerWhereInput>
    lendings?: LendingListRelationFilter
  }

  export type TeacherOrderByWithRelationInput = {
    id?: SortOrder
    BorrowerId?: BorrowerOrderByWithRelationInput
    lendings?: LendingOrderByRelationAggregateInput
  }

  export type TeacherWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TeacherWhereInput | TeacherWhereInput[]
    OR?: TeacherWhereInput[]
    NOT?: TeacherWhereInput | TeacherWhereInput[]
    BorrowerId?: XOR<BorrowerRelationFilter, BorrowerWhereInput>
    lendings?: LendingListRelationFilter
  }, "id">

  export type TeacherOrderByWithAggregationInput = {
    id?: SortOrder
    _count?: TeacherCountOrderByAggregateInput
    _avg?: TeacherAvgOrderByAggregateInput
    _max?: TeacherMaxOrderByAggregateInput
    _min?: TeacherMinOrderByAggregateInput
    _sum?: TeacherSumOrderByAggregateInput
  }

  export type TeacherScalarWhereWithAggregatesInput = {
    AND?: TeacherScalarWhereWithAggregatesInput | TeacherScalarWhereWithAggregatesInput[]
    OR?: TeacherScalarWhereWithAggregatesInput[]
    NOT?: TeacherScalarWhereWithAggregatesInput | TeacherScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Teacher"> | number
  }

  export type AssistantWhereInput = {
    AND?: AssistantWhereInput | AssistantWhereInput[]
    OR?: AssistantWhereInput[]
    NOT?: AssistantWhereInput | AssistantWhereInput[]
    id?: IntFilter<"Assistant"> | number
    role?: StringFilter<"Assistant"> | string
    BorrowerId?: XOR<BorrowerRelationFilter, BorrowerWhereInput>
  }

  export type AssistantOrderByWithRelationInput = {
    id?: SortOrder
    role?: SortOrder
    BorrowerId?: BorrowerOrderByWithRelationInput
  }

  export type AssistantWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AssistantWhereInput | AssistantWhereInput[]
    OR?: AssistantWhereInput[]
    NOT?: AssistantWhereInput | AssistantWhereInput[]
    role?: StringFilter<"Assistant"> | string
    BorrowerId?: XOR<BorrowerRelationFilter, BorrowerWhereInput>
  }, "id">

  export type AssistantOrderByWithAggregationInput = {
    id?: SortOrder
    role?: SortOrder
    _count?: AssistantCountOrderByAggregateInput
    _avg?: AssistantAvgOrderByAggregateInput
    _max?: AssistantMaxOrderByAggregateInput
    _min?: AssistantMinOrderByAggregateInput
    _sum?: AssistantSumOrderByAggregateInput
  }

  export type AssistantScalarWhereWithAggregatesInput = {
    AND?: AssistantScalarWhereWithAggregatesInput | AssistantScalarWhereWithAggregatesInput[]
    OR?: AssistantScalarWhereWithAggregatesInput[]
    NOT?: AssistantScalarWhereWithAggregatesInput | AssistantScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Assistant"> | number
    role?: StringWithAggregatesFilter<"Assistant"> | string
  }

  export type productWhereInput = {
    AND?: productWhereInput | productWhereInput[]
    OR?: productWhereInput[]
    NOT?: productWhereInput | productWhereInput[]
    id?: IntFilter<"product"> | number
    name?: StringFilter<"product"> | string
    description?: StringNullableFilter<"product"> | string | null
    stock?: IntNullableFilter<"product"> | number | null
    criticalStock?: IntFilter<"product"> | number
    state?: BoolFilter<"product"> | boolean
    fungible?: BoolFilter<"product"> | boolean
    lendingProducts?: LendingProductListRelationFilter
  }

  export type productOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    stock?: SortOrderInput | SortOrder
    criticalStock?: SortOrder
    state?: SortOrder
    fungible?: SortOrder
    lendingProducts?: LendingProductOrderByRelationAggregateInput
  }

  export type productWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: productWhereInput | productWhereInput[]
    OR?: productWhereInput[]
    NOT?: productWhereInput | productWhereInput[]
    description?: StringNullableFilter<"product"> | string | null
    stock?: IntNullableFilter<"product"> | number | null
    criticalStock?: IntFilter<"product"> | number
    state?: BoolFilter<"product"> | boolean
    fungible?: BoolFilter<"product"> | boolean
    lendingProducts?: LendingProductListRelationFilter
  }, "id" | "name">

  export type productOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    stock?: SortOrderInput | SortOrder
    criticalStock?: SortOrder
    state?: SortOrder
    fungible?: SortOrder
    _count?: productCountOrderByAggregateInput
    _avg?: productAvgOrderByAggregateInput
    _max?: productMaxOrderByAggregateInput
    _min?: productMinOrderByAggregateInput
    _sum?: productSumOrderByAggregateInput
  }

  export type productScalarWhereWithAggregatesInput = {
    AND?: productScalarWhereWithAggregatesInput | productScalarWhereWithAggregatesInput[]
    OR?: productScalarWhereWithAggregatesInput[]
    NOT?: productScalarWhereWithAggregatesInput | productScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"product"> | number
    name?: StringWithAggregatesFilter<"product"> | string
    description?: StringNullableWithAggregatesFilter<"product"> | string | null
    stock?: IntNullableWithAggregatesFilter<"product"> | number | null
    criticalStock?: IntWithAggregatesFilter<"product"> | number
    state?: BoolWithAggregatesFilter<"product"> | boolean
    fungible?: BoolWithAggregatesFilter<"product"> | boolean
  }

  export type LendingWhereInput = {
    AND?: LendingWhereInput | LendingWhereInput[]
    OR?: LendingWhereInput[]
    NOT?: LendingWhereInput | LendingWhereInput[]
    id?: IntFilter<"Lending"> | number
    state?: EnumLendingStateFilter<"Lending"> | $Enums.LendingState
    date?: DateTimeFilter<"Lending"> | Date | string
    finalizeDate?: DateTimeNullableFilter<"Lending"> | Date | string | null
    eliminateDate?: DateTimeNullableFilter<"Lending"> | Date | string | null
    comments?: StringNullableFilter<"Lending"> | string | null
    BorrowerId?: IntFilter<"Lending"> | number
    teacherId?: IntNullableFilter<"Lending"> | number | null
    borrower?: XOR<BorrowerRelationFilter, BorrowerWhereInput>
    alerts?: AlertLendingListRelationFilter
    teacher?: XOR<TeacherNullableRelationFilter, TeacherWhereInput> | null
    lendingProducts?: LendingProductListRelationFilter
  }

  export type LendingOrderByWithRelationInput = {
    id?: SortOrder
    state?: SortOrder
    date?: SortOrder
    finalizeDate?: SortOrderInput | SortOrder
    eliminateDate?: SortOrderInput | SortOrder
    comments?: SortOrderInput | SortOrder
    BorrowerId?: SortOrder
    teacherId?: SortOrderInput | SortOrder
    borrower?: BorrowerOrderByWithRelationInput
    alerts?: AlertLendingOrderByRelationAggregateInput
    teacher?: TeacherOrderByWithRelationInput
    lendingProducts?: LendingProductOrderByRelationAggregateInput
  }

  export type LendingWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: LendingWhereInput | LendingWhereInput[]
    OR?: LendingWhereInput[]
    NOT?: LendingWhereInput | LendingWhereInput[]
    state?: EnumLendingStateFilter<"Lending"> | $Enums.LendingState
    date?: DateTimeFilter<"Lending"> | Date | string
    finalizeDate?: DateTimeNullableFilter<"Lending"> | Date | string | null
    eliminateDate?: DateTimeNullableFilter<"Lending"> | Date | string | null
    comments?: StringNullableFilter<"Lending"> | string | null
    BorrowerId?: IntFilter<"Lending"> | number
    teacherId?: IntNullableFilter<"Lending"> | number | null
    borrower?: XOR<BorrowerRelationFilter, BorrowerWhereInput>
    alerts?: AlertLendingListRelationFilter
    teacher?: XOR<TeacherNullableRelationFilter, TeacherWhereInput> | null
    lendingProducts?: LendingProductListRelationFilter
  }, "id">

  export type LendingOrderByWithAggregationInput = {
    id?: SortOrder
    state?: SortOrder
    date?: SortOrder
    finalizeDate?: SortOrderInput | SortOrder
    eliminateDate?: SortOrderInput | SortOrder
    comments?: SortOrderInput | SortOrder
    BorrowerId?: SortOrder
    teacherId?: SortOrderInput | SortOrder
    _count?: LendingCountOrderByAggregateInput
    _avg?: LendingAvgOrderByAggregateInput
    _max?: LendingMaxOrderByAggregateInput
    _min?: LendingMinOrderByAggregateInput
    _sum?: LendingSumOrderByAggregateInput
  }

  export type LendingScalarWhereWithAggregatesInput = {
    AND?: LendingScalarWhereWithAggregatesInput | LendingScalarWhereWithAggregatesInput[]
    OR?: LendingScalarWhereWithAggregatesInput[]
    NOT?: LendingScalarWhereWithAggregatesInput | LendingScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Lending"> | number
    state?: EnumLendingStateWithAggregatesFilter<"Lending"> | $Enums.LendingState
    date?: DateTimeWithAggregatesFilter<"Lending"> | Date | string
    finalizeDate?: DateTimeNullableWithAggregatesFilter<"Lending"> | Date | string | null
    eliminateDate?: DateTimeNullableWithAggregatesFilter<"Lending"> | Date | string | null
    comments?: StringNullableWithAggregatesFilter<"Lending"> | string | null
    BorrowerId?: IntWithAggregatesFilter<"Lending"> | number
    teacherId?: IntNullableWithAggregatesFilter<"Lending"> | number | null
  }

  export type LendingProductWhereInput = {
    AND?: LendingProductWhereInput | LendingProductWhereInput[]
    OR?: LendingProductWhereInput[]
    NOT?: LendingProductWhereInput | LendingProductWhereInput[]
    lendingId?: IntFilter<"LendingProduct"> | number
    productId?: IntFilter<"LendingProduct"> | number
    amount?: IntFilter<"LendingProduct"> | number
    lending?: XOR<LendingRelationFilter, LendingWhereInput>
    product?: XOR<ProductRelationFilter, productWhereInput>
  }

  export type LendingProductOrderByWithRelationInput = {
    lendingId?: SortOrder
    productId?: SortOrder
    amount?: SortOrder
    lending?: LendingOrderByWithRelationInput
    product?: productOrderByWithRelationInput
  }

  export type LendingProductWhereUniqueInput = Prisma.AtLeast<{
    lendingId_productId?: LendingProductLendingIdProductIdCompoundUniqueInput
    AND?: LendingProductWhereInput | LendingProductWhereInput[]
    OR?: LendingProductWhereInput[]
    NOT?: LendingProductWhereInput | LendingProductWhereInput[]
    lendingId?: IntFilter<"LendingProduct"> | number
    productId?: IntFilter<"LendingProduct"> | number
    amount?: IntFilter<"LendingProduct"> | number
    lending?: XOR<LendingRelationFilter, LendingWhereInput>
    product?: XOR<ProductRelationFilter, productWhereInput>
  }, "lendingId_productId" | "lendingId_productId">

  export type LendingProductOrderByWithAggregationInput = {
    lendingId?: SortOrder
    productId?: SortOrder
    amount?: SortOrder
    _count?: LendingProductCountOrderByAggregateInput
    _avg?: LendingProductAvgOrderByAggregateInput
    _max?: LendingProductMaxOrderByAggregateInput
    _min?: LendingProductMinOrderByAggregateInput
    _sum?: LendingProductSumOrderByAggregateInput
  }

  export type LendingProductScalarWhereWithAggregatesInput = {
    AND?: LendingProductScalarWhereWithAggregatesInput | LendingProductScalarWhereWithAggregatesInput[]
    OR?: LendingProductScalarWhereWithAggregatesInput[]
    NOT?: LendingProductScalarWhereWithAggregatesInput | LendingProductScalarWhereWithAggregatesInput[]
    lendingId?: IntWithAggregatesFilter<"LendingProduct"> | number
    productId?: IntWithAggregatesFilter<"LendingProduct"> | number
    amount?: IntWithAggregatesFilter<"LendingProduct"> | number
  }

  export type AlertWhereInput = {
    AND?: AlertWhereInput | AlertWhereInput[]
    OR?: AlertWhereInput[]
    NOT?: AlertWhereInput | AlertWhereInput[]
    id?: IntFilter<"Alert"> | number
    date?: DateTimeFilter<"Alert"> | Date | string
    name?: StringFilter<"Alert"> | string
    description?: StringFilter<"Alert"> | string
    state?: BoolFilter<"Alert"> | boolean
    lendings?: AlertLendingListRelationFilter
  }

  export type AlertOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    name?: SortOrder
    description?: SortOrder
    state?: SortOrder
    lendings?: AlertLendingOrderByRelationAggregateInput
  }

  export type AlertWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AlertWhereInput | AlertWhereInput[]
    OR?: AlertWhereInput[]
    NOT?: AlertWhereInput | AlertWhereInput[]
    date?: DateTimeFilter<"Alert"> | Date | string
    name?: StringFilter<"Alert"> | string
    description?: StringFilter<"Alert"> | string
    state?: BoolFilter<"Alert"> | boolean
    lendings?: AlertLendingListRelationFilter
  }, "id">

  export type AlertOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    name?: SortOrder
    description?: SortOrder
    state?: SortOrder
    _count?: AlertCountOrderByAggregateInput
    _avg?: AlertAvgOrderByAggregateInput
    _max?: AlertMaxOrderByAggregateInput
    _min?: AlertMinOrderByAggregateInput
    _sum?: AlertSumOrderByAggregateInput
  }

  export type AlertScalarWhereWithAggregatesInput = {
    AND?: AlertScalarWhereWithAggregatesInput | AlertScalarWhereWithAggregatesInput[]
    OR?: AlertScalarWhereWithAggregatesInput[]
    NOT?: AlertScalarWhereWithAggregatesInput | AlertScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Alert"> | number
    date?: DateTimeWithAggregatesFilter<"Alert"> | Date | string
    name?: StringWithAggregatesFilter<"Alert"> | string
    description?: StringWithAggregatesFilter<"Alert"> | string
    state?: BoolWithAggregatesFilter<"Alert"> | boolean
  }

  export type AlertLendingWhereInput = {
    AND?: AlertLendingWhereInput | AlertLendingWhereInput[]
    OR?: AlertLendingWhereInput[]
    NOT?: AlertLendingWhereInput | AlertLendingWhereInput[]
    alertId?: IntFilter<"AlertLending"> | number
    lendingId?: IntFilter<"AlertLending"> | number
    alert?: XOR<AlertRelationFilter, AlertWhereInput>
    lending?: XOR<LendingRelationFilter, LendingWhereInput>
  }

  export type AlertLendingOrderByWithRelationInput = {
    alertId?: SortOrder
    lendingId?: SortOrder
    alert?: AlertOrderByWithRelationInput
    lending?: LendingOrderByWithRelationInput
  }

  export type AlertLendingWhereUniqueInput = Prisma.AtLeast<{
    alertId_lendingId?: AlertLendingAlertIdLendingIdCompoundUniqueInput
    AND?: AlertLendingWhereInput | AlertLendingWhereInput[]
    OR?: AlertLendingWhereInput[]
    NOT?: AlertLendingWhereInput | AlertLendingWhereInput[]
    alertId?: IntFilter<"AlertLending"> | number
    lendingId?: IntFilter<"AlertLending"> | number
    alert?: XOR<AlertRelationFilter, AlertWhereInput>
    lending?: XOR<LendingRelationFilter, LendingWhereInput>
  }, "alertId_lendingId">

  export type AlertLendingOrderByWithAggregationInput = {
    alertId?: SortOrder
    lendingId?: SortOrder
    _count?: AlertLendingCountOrderByAggregateInput
    _avg?: AlertLendingAvgOrderByAggregateInput
    _max?: AlertLendingMaxOrderByAggregateInput
    _min?: AlertLendingMinOrderByAggregateInput
    _sum?: AlertLendingSumOrderByAggregateInput
  }

  export type AlertLendingScalarWhereWithAggregatesInput = {
    AND?: AlertLendingScalarWhereWithAggregatesInput | AlertLendingScalarWhereWithAggregatesInput[]
    OR?: AlertLendingScalarWhereWithAggregatesInput[]
    NOT?: AlertLendingScalarWhereWithAggregatesInput | AlertLendingScalarWhereWithAggregatesInput[]
    alertId?: IntWithAggregatesFilter<"AlertLending"> | number
    lendingId?: IntWithAggregatesFilter<"AlertLending"> | number
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    mail?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
  }

  export type UserOrderByWithRelationInput = {
    mail?: SortOrder
    username?: SortOrder
    password?: SortOrder
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    mail?: string
    username?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
  }, "mail" | "username">

  export type UserOrderByWithAggregationInput = {
    mail?: SortOrder
    username?: SortOrder
    password?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    mail?: StringWithAggregatesFilter<"User"> | string
    username?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
  }

  export type BorrowerCreateInput = {
    state?: boolean
    rut: string
    name: string
    mail?: string | null
    phoneNumber?: number | null
    type: $Enums.UserType
    lendings?: LendingCreateNestedManyWithoutBorrowerInput
    student?: StudentCreateNestedOneWithoutBorrowerIdInput
    teacher?: TeacherCreateNestedOneWithoutBorrowerIdInput
    assistant?: AssistantCreateNestedOneWithoutBorrowerIdInput
  }

  export type BorrowerUncheckedCreateInput = {
    id?: number
    state?: boolean
    rut: string
    name: string
    mail?: string | null
    phoneNumber?: number | null
    type: $Enums.UserType
    lendings?: LendingUncheckedCreateNestedManyWithoutBorrowerInput
    student?: StudentUncheckedCreateNestedOneWithoutBorrowerIdInput
    teacher?: TeacherUncheckedCreateNestedOneWithoutBorrowerIdInput
    assistant?: AssistantUncheckedCreateNestedOneWithoutBorrowerIdInput
  }

  export type BorrowerUpdateInput = {
    state?: BoolFieldUpdateOperationsInput | boolean
    rut?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    mail?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    lendings?: LendingUpdateManyWithoutBorrowerNestedInput
    student?: StudentUpdateOneWithoutBorrowerIdNestedInput
    teacher?: TeacherUpdateOneWithoutBorrowerIdNestedInput
    assistant?: AssistantUpdateOneWithoutBorrowerIdNestedInput
  }

  export type BorrowerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    state?: BoolFieldUpdateOperationsInput | boolean
    rut?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    mail?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    lendings?: LendingUncheckedUpdateManyWithoutBorrowerNestedInput
    student?: StudentUncheckedUpdateOneWithoutBorrowerIdNestedInput
    teacher?: TeacherUncheckedUpdateOneWithoutBorrowerIdNestedInput
    assistant?: AssistantUncheckedUpdateOneWithoutBorrowerIdNestedInput
  }

  export type BorrowerCreateManyInput = {
    id?: number
    state?: boolean
    rut: string
    name: string
    mail?: string | null
    phoneNumber?: number | null
    type: $Enums.UserType
  }

  export type BorrowerUpdateManyMutationInput = {
    state?: BoolFieldUpdateOperationsInput | boolean
    rut?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    mail?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
  }

  export type BorrowerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    state?: BoolFieldUpdateOperationsInput | boolean
    rut?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    mail?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
  }

  export type StudentCreateInput = {
    BorrowerId: BorrowerCreateNestedOneWithoutStudentInput
    degree: DegreeCreateNestedOneWithoutStudentsInput
  }

  export type StudentUncheckedCreateInput = {
    id: number
    codeDegree: string
  }

  export type StudentUpdateInput = {
    BorrowerId?: BorrowerUpdateOneRequiredWithoutStudentNestedInput
    degree?: DegreeUpdateOneRequiredWithoutStudentsNestedInput
  }

  export type StudentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    codeDegree?: StringFieldUpdateOperationsInput | string
  }

  export type StudentCreateManyInput = {
    id: number
    codeDegree: string
  }

  export type StudentUpdateManyMutationInput = {

  }

  export type StudentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    codeDegree?: StringFieldUpdateOperationsInput | string
  }

  export type DegreeCreateInput = {
    code: string
    name: string
    students?: StudentCreateNestedManyWithoutDegreeInput
  }

  export type DegreeUncheckedCreateInput = {
    code: string
    name: string
    students?: StudentUncheckedCreateNestedManyWithoutDegreeInput
  }

  export type DegreeUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    students?: StudentUpdateManyWithoutDegreeNestedInput
  }

  export type DegreeUncheckedUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    students?: StudentUncheckedUpdateManyWithoutDegreeNestedInput
  }

  export type DegreeCreateManyInput = {
    code: string
    name: string
  }

  export type DegreeUpdateManyMutationInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type DegreeUncheckedUpdateManyInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TeacherCreateInput = {
    BorrowerId: BorrowerCreateNestedOneWithoutTeacherInput
    lendings?: LendingCreateNestedManyWithoutTeacherInput
  }

  export type TeacherUncheckedCreateInput = {
    id: number
    lendings?: LendingUncheckedCreateNestedManyWithoutTeacherInput
  }

  export type TeacherUpdateInput = {
    BorrowerId?: BorrowerUpdateOneRequiredWithoutTeacherNestedInput
    lendings?: LendingUpdateManyWithoutTeacherNestedInput
  }

  export type TeacherUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    lendings?: LendingUncheckedUpdateManyWithoutTeacherNestedInput
  }

  export type TeacherCreateManyInput = {
    id: number
  }

  export type TeacherUpdateManyMutationInput = {

  }

  export type TeacherUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
  }

  export type AssistantCreateInput = {
    role: string
    BorrowerId: BorrowerCreateNestedOneWithoutAssistantInput
  }

  export type AssistantUncheckedCreateInput = {
    id: number
    role: string
  }

  export type AssistantUpdateInput = {
    role?: StringFieldUpdateOperationsInput | string
    BorrowerId?: BorrowerUpdateOneRequiredWithoutAssistantNestedInput
  }

  export type AssistantUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
  }

  export type AssistantCreateManyInput = {
    id: number
    role: string
  }

  export type AssistantUpdateManyMutationInput = {
    role?: StringFieldUpdateOperationsInput | string
  }

  export type AssistantUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
  }

  export type productCreateInput = {
    name: string
    description?: string | null
    stock?: number | null
    criticalStock?: number
    state?: boolean
    fungible?: boolean
    lendingProducts?: LendingProductCreateNestedManyWithoutProductInput
  }

  export type productUncheckedCreateInput = {
    id?: number
    name: string
    description?: string | null
    stock?: number | null
    criticalStock?: number
    state?: boolean
    fungible?: boolean
    lendingProducts?: LendingProductUncheckedCreateNestedManyWithoutProductInput
  }

  export type productUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
    criticalStock?: IntFieldUpdateOperationsInput | number
    state?: BoolFieldUpdateOperationsInput | boolean
    fungible?: BoolFieldUpdateOperationsInput | boolean
    lendingProducts?: LendingProductUpdateManyWithoutProductNestedInput
  }

  export type productUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
    criticalStock?: IntFieldUpdateOperationsInput | number
    state?: BoolFieldUpdateOperationsInput | boolean
    fungible?: BoolFieldUpdateOperationsInput | boolean
    lendingProducts?: LendingProductUncheckedUpdateManyWithoutProductNestedInput
  }

  export type productCreateManyInput = {
    id?: number
    name: string
    description?: string | null
    stock?: number | null
    criticalStock?: number
    state?: boolean
    fungible?: boolean
  }

  export type productUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
    criticalStock?: IntFieldUpdateOperationsInput | number
    state?: BoolFieldUpdateOperationsInput | boolean
    fungible?: BoolFieldUpdateOperationsInput | boolean
  }

  export type productUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
    criticalStock?: IntFieldUpdateOperationsInput | number
    state?: BoolFieldUpdateOperationsInput | boolean
    fungible?: BoolFieldUpdateOperationsInput | boolean
  }

  export type LendingCreateInput = {
    state?: $Enums.LendingState
    date?: Date | string
    finalizeDate?: Date | string | null
    eliminateDate?: Date | string | null
    comments?: string | null
    borrower: BorrowerCreateNestedOneWithoutLendingsInput
    alerts?: AlertLendingCreateNestedManyWithoutLendingInput
    teacher?: TeacherCreateNestedOneWithoutLendingsInput
    lendingProducts?: LendingProductCreateNestedManyWithoutLendingInput
  }

  export type LendingUncheckedCreateInput = {
    id?: number
    state?: $Enums.LendingState
    date?: Date | string
    finalizeDate?: Date | string | null
    eliminateDate?: Date | string | null
    comments?: string | null
    BorrowerId: number
    teacherId?: number | null
    alerts?: AlertLendingUncheckedCreateNestedManyWithoutLendingInput
    lendingProducts?: LendingProductUncheckedCreateNestedManyWithoutLendingInput
  }

  export type LendingUpdateInput = {
    state?: EnumLendingStateFieldUpdateOperationsInput | $Enums.LendingState
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    finalizeDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eliminateDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    borrower?: BorrowerUpdateOneRequiredWithoutLendingsNestedInput
    alerts?: AlertLendingUpdateManyWithoutLendingNestedInput
    teacher?: TeacherUpdateOneWithoutLendingsNestedInput
    lendingProducts?: LendingProductUpdateManyWithoutLendingNestedInput
  }

  export type LendingUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    state?: EnumLendingStateFieldUpdateOperationsInput | $Enums.LendingState
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    finalizeDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eliminateDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    BorrowerId?: IntFieldUpdateOperationsInput | number
    teacherId?: NullableIntFieldUpdateOperationsInput | number | null
    alerts?: AlertLendingUncheckedUpdateManyWithoutLendingNestedInput
    lendingProducts?: LendingProductUncheckedUpdateManyWithoutLendingNestedInput
  }

  export type LendingCreateManyInput = {
    id?: number
    state?: $Enums.LendingState
    date?: Date | string
    finalizeDate?: Date | string | null
    eliminateDate?: Date | string | null
    comments?: string | null
    BorrowerId: number
    teacherId?: number | null
  }

  export type LendingUpdateManyMutationInput = {
    state?: EnumLendingStateFieldUpdateOperationsInput | $Enums.LendingState
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    finalizeDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eliminateDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LendingUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    state?: EnumLendingStateFieldUpdateOperationsInput | $Enums.LendingState
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    finalizeDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eliminateDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    BorrowerId?: IntFieldUpdateOperationsInput | number
    teacherId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type LendingProductCreateInput = {
    amount: number
    lending: LendingCreateNestedOneWithoutLendingProductsInput
    product: productCreateNestedOneWithoutLendingProductsInput
  }

  export type LendingProductUncheckedCreateInput = {
    lendingId: number
    productId: number
    amount: number
  }

  export type LendingProductUpdateInput = {
    amount?: IntFieldUpdateOperationsInput | number
    lending?: LendingUpdateOneRequiredWithoutLendingProductsNestedInput
    product?: productUpdateOneRequiredWithoutLendingProductsNestedInput
  }

  export type LendingProductUncheckedUpdateInput = {
    lendingId?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
  }

  export type LendingProductCreateManyInput = {
    lendingId: number
    productId: number
    amount: number
  }

  export type LendingProductUpdateManyMutationInput = {
    amount?: IntFieldUpdateOperationsInput | number
  }

  export type LendingProductUncheckedUpdateManyInput = {
    lendingId?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
  }

  export type AlertCreateInput = {
    date: Date | string
    name: string
    description: string
    state?: boolean
    lendings?: AlertLendingCreateNestedManyWithoutAlertInput
  }

  export type AlertUncheckedCreateInput = {
    id?: number
    date: Date | string
    name: string
    description: string
    state?: boolean
    lendings?: AlertLendingUncheckedCreateNestedManyWithoutAlertInput
  }

  export type AlertUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    state?: BoolFieldUpdateOperationsInput | boolean
    lendings?: AlertLendingUpdateManyWithoutAlertNestedInput
  }

  export type AlertUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    state?: BoolFieldUpdateOperationsInput | boolean
    lendings?: AlertLendingUncheckedUpdateManyWithoutAlertNestedInput
  }

  export type AlertCreateManyInput = {
    id?: number
    date: Date | string
    name: string
    description: string
    state?: boolean
  }

  export type AlertUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    state?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AlertUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    state?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AlertLendingCreateInput = {
    alert: AlertCreateNestedOneWithoutLendingsInput
    lending: LendingCreateNestedOneWithoutAlertsInput
  }

  export type AlertLendingUncheckedCreateInput = {
    alertId: number
    lendingId: number
  }

  export type AlertLendingUpdateInput = {
    alert?: AlertUpdateOneRequiredWithoutLendingsNestedInput
    lending?: LendingUpdateOneRequiredWithoutAlertsNestedInput
  }

  export type AlertLendingUncheckedUpdateInput = {
    alertId?: IntFieldUpdateOperationsInput | number
    lendingId?: IntFieldUpdateOperationsInput | number
  }

  export type AlertLendingCreateManyInput = {
    alertId: number
    lendingId: number
  }

  export type AlertLendingUpdateManyMutationInput = {

  }

  export type AlertLendingUncheckedUpdateManyInput = {
    alertId?: IntFieldUpdateOperationsInput | number
    lendingId?: IntFieldUpdateOperationsInput | number
  }

  export type UserCreateInput = {
    mail: string
    username: string
    password: string
  }

  export type UserUncheckedCreateInput = {
    mail: string
    username: string
    password: string
  }

  export type UserUpdateInput = {
    mail?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateInput = {
    mail?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateManyInput = {
    mail: string
    username: string
    password: string
  }

  export type UserUpdateManyMutationInput = {
    mail?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    mail?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type EnumUserTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.UserType | EnumUserTypeFieldRefInput<$PrismaModel>
    in?: $Enums.UserType[]
    notIn?: $Enums.UserType[]
    not?: NestedEnumUserTypeFilter<$PrismaModel> | $Enums.UserType
  }

  export type LendingListRelationFilter = {
    every?: LendingWhereInput
    some?: LendingWhereInput
    none?: LendingWhereInput
  }

  export type StudentNullableRelationFilter = {
    is?: StudentWhereInput | null
    isNot?: StudentWhereInput | null
  }

  export type TeacherNullableRelationFilter = {
    is?: TeacherWhereInput | null
    isNot?: TeacherWhereInput | null
  }

  export type AssistantNullableRelationFilter = {
    is?: AssistantWhereInput | null
    isNot?: AssistantWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type LendingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BorrowerCountOrderByAggregateInput = {
    id?: SortOrder
    state?: SortOrder
    rut?: SortOrder
    name?: SortOrder
    mail?: SortOrder
    phoneNumber?: SortOrder
    type?: SortOrder
  }

  export type BorrowerAvgOrderByAggregateInput = {
    id?: SortOrder
    phoneNumber?: SortOrder
  }

  export type BorrowerMaxOrderByAggregateInput = {
    id?: SortOrder
    state?: SortOrder
    rut?: SortOrder
    name?: SortOrder
    mail?: SortOrder
    phoneNumber?: SortOrder
    type?: SortOrder
  }

  export type BorrowerMinOrderByAggregateInput = {
    id?: SortOrder
    state?: SortOrder
    rut?: SortOrder
    name?: SortOrder
    mail?: SortOrder
    phoneNumber?: SortOrder
    type?: SortOrder
  }

  export type BorrowerSumOrderByAggregateInput = {
    id?: SortOrder
    phoneNumber?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type EnumUserTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserType | EnumUserTypeFieldRefInput<$PrismaModel>
    in?: $Enums.UserType[]
    notIn?: $Enums.UserType[]
    not?: NestedEnumUserTypeWithAggregatesFilter<$PrismaModel> | $Enums.UserType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserTypeFilter<$PrismaModel>
    _max?: NestedEnumUserTypeFilter<$PrismaModel>
  }

  export type BorrowerRelationFilter = {
    is?: BorrowerWhereInput
    isNot?: BorrowerWhereInput
  }

  export type DegreeRelationFilter = {
    is?: DegreeWhereInput
    isNot?: DegreeWhereInput
  }

  export type StudentCountOrderByAggregateInput = {
    id?: SortOrder
    codeDegree?: SortOrder
  }

  export type StudentAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StudentMaxOrderByAggregateInput = {
    id?: SortOrder
    codeDegree?: SortOrder
  }

  export type StudentMinOrderByAggregateInput = {
    id?: SortOrder
    codeDegree?: SortOrder
  }

  export type StudentSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StudentListRelationFilter = {
    every?: StudentWhereInput
    some?: StudentWhereInput
    none?: StudentWhereInput
  }

  export type StudentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DegreeCountOrderByAggregateInput = {
    code?: SortOrder
    name?: SortOrder
  }

  export type DegreeMaxOrderByAggregateInput = {
    code?: SortOrder
    name?: SortOrder
  }

  export type DegreeMinOrderByAggregateInput = {
    code?: SortOrder
    name?: SortOrder
  }

  export type TeacherCountOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TeacherAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TeacherMaxOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TeacherMinOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TeacherSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AssistantCountOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
  }

  export type AssistantAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AssistantMaxOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
  }

  export type AssistantMinOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
  }

  export type AssistantSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type LendingProductListRelationFilter = {
    every?: LendingProductWhereInput
    some?: LendingProductWhereInput
    none?: LendingProductWhereInput
  }

  export type LendingProductOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type productCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    stock?: SortOrder
    criticalStock?: SortOrder
    state?: SortOrder
    fungible?: SortOrder
  }

  export type productAvgOrderByAggregateInput = {
    id?: SortOrder
    stock?: SortOrder
    criticalStock?: SortOrder
  }

  export type productMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    stock?: SortOrder
    criticalStock?: SortOrder
    state?: SortOrder
    fungible?: SortOrder
  }

  export type productMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    stock?: SortOrder
    criticalStock?: SortOrder
    state?: SortOrder
    fungible?: SortOrder
  }

  export type productSumOrderByAggregateInput = {
    id?: SortOrder
    stock?: SortOrder
    criticalStock?: SortOrder
  }

  export type EnumLendingStateFilter<$PrismaModel = never> = {
    equals?: $Enums.LendingState | EnumLendingStateFieldRefInput<$PrismaModel>
    in?: $Enums.LendingState[]
    notIn?: $Enums.LendingState[]
    not?: NestedEnumLendingStateFilter<$PrismaModel> | $Enums.LendingState
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type AlertLendingListRelationFilter = {
    every?: AlertLendingWhereInput
    some?: AlertLendingWhereInput
    none?: AlertLendingWhereInput
  }

  export type AlertLendingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LendingCountOrderByAggregateInput = {
    id?: SortOrder
    state?: SortOrder
    date?: SortOrder
    finalizeDate?: SortOrder
    eliminateDate?: SortOrder
    comments?: SortOrder
    BorrowerId?: SortOrder
    teacherId?: SortOrder
  }

  export type LendingAvgOrderByAggregateInput = {
    id?: SortOrder
    BorrowerId?: SortOrder
    teacherId?: SortOrder
  }

  export type LendingMaxOrderByAggregateInput = {
    id?: SortOrder
    state?: SortOrder
    date?: SortOrder
    finalizeDate?: SortOrder
    eliminateDate?: SortOrder
    comments?: SortOrder
    BorrowerId?: SortOrder
    teacherId?: SortOrder
  }

  export type LendingMinOrderByAggregateInput = {
    id?: SortOrder
    state?: SortOrder
    date?: SortOrder
    finalizeDate?: SortOrder
    eliminateDate?: SortOrder
    comments?: SortOrder
    BorrowerId?: SortOrder
    teacherId?: SortOrder
  }

  export type LendingSumOrderByAggregateInput = {
    id?: SortOrder
    BorrowerId?: SortOrder
    teacherId?: SortOrder
  }

  export type EnumLendingStateWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LendingState | EnumLendingStateFieldRefInput<$PrismaModel>
    in?: $Enums.LendingState[]
    notIn?: $Enums.LendingState[]
    not?: NestedEnumLendingStateWithAggregatesFilter<$PrismaModel> | $Enums.LendingState
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLendingStateFilter<$PrismaModel>
    _max?: NestedEnumLendingStateFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type LendingRelationFilter = {
    is?: LendingWhereInput
    isNot?: LendingWhereInput
  }

  export type ProductRelationFilter = {
    is?: productWhereInput
    isNot?: productWhereInput
  }

  export type LendingProductLendingIdProductIdCompoundUniqueInput = {
    lendingId: number
    productId: number
  }

  export type LendingProductCountOrderByAggregateInput = {
    lendingId?: SortOrder
    productId?: SortOrder
    amount?: SortOrder
  }

  export type LendingProductAvgOrderByAggregateInput = {
    lendingId?: SortOrder
    productId?: SortOrder
    amount?: SortOrder
  }

  export type LendingProductMaxOrderByAggregateInput = {
    lendingId?: SortOrder
    productId?: SortOrder
    amount?: SortOrder
  }

  export type LendingProductMinOrderByAggregateInput = {
    lendingId?: SortOrder
    productId?: SortOrder
    amount?: SortOrder
  }

  export type LendingProductSumOrderByAggregateInput = {
    lendingId?: SortOrder
    productId?: SortOrder
    amount?: SortOrder
  }

  export type AlertCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    name?: SortOrder
    description?: SortOrder
    state?: SortOrder
  }

  export type AlertAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AlertMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    name?: SortOrder
    description?: SortOrder
    state?: SortOrder
  }

  export type AlertMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    name?: SortOrder
    description?: SortOrder
    state?: SortOrder
  }

  export type AlertSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AlertRelationFilter = {
    is?: AlertWhereInput
    isNot?: AlertWhereInput
  }

  export type AlertLendingAlertIdLendingIdCompoundUniqueInput = {
    alertId: number
    lendingId: number
  }

  export type AlertLendingCountOrderByAggregateInput = {
    alertId?: SortOrder
    lendingId?: SortOrder
  }

  export type AlertLendingAvgOrderByAggregateInput = {
    alertId?: SortOrder
    lendingId?: SortOrder
  }

  export type AlertLendingMaxOrderByAggregateInput = {
    alertId?: SortOrder
    lendingId?: SortOrder
  }

  export type AlertLendingMinOrderByAggregateInput = {
    alertId?: SortOrder
    lendingId?: SortOrder
  }

  export type AlertLendingSumOrderByAggregateInput = {
    alertId?: SortOrder
    lendingId?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    mail?: SortOrder
    username?: SortOrder
    password?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    mail?: SortOrder
    username?: SortOrder
    password?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    mail?: SortOrder
    username?: SortOrder
    password?: SortOrder
  }

  export type LendingCreateNestedManyWithoutBorrowerInput = {
    create?: XOR<LendingCreateWithoutBorrowerInput, LendingUncheckedCreateWithoutBorrowerInput> | LendingCreateWithoutBorrowerInput[] | LendingUncheckedCreateWithoutBorrowerInput[]
    connectOrCreate?: LendingCreateOrConnectWithoutBorrowerInput | LendingCreateOrConnectWithoutBorrowerInput[]
    createMany?: LendingCreateManyBorrowerInputEnvelope
    connect?: LendingWhereUniqueInput | LendingWhereUniqueInput[]
  }

  export type StudentCreateNestedOneWithoutBorrowerIdInput = {
    create?: XOR<StudentCreateWithoutBorrowerIdInput, StudentUncheckedCreateWithoutBorrowerIdInput>
    connectOrCreate?: StudentCreateOrConnectWithoutBorrowerIdInput
    connect?: StudentWhereUniqueInput
  }

  export type TeacherCreateNestedOneWithoutBorrowerIdInput = {
    create?: XOR<TeacherCreateWithoutBorrowerIdInput, TeacherUncheckedCreateWithoutBorrowerIdInput>
    connectOrCreate?: TeacherCreateOrConnectWithoutBorrowerIdInput
    connect?: TeacherWhereUniqueInput
  }

  export type AssistantCreateNestedOneWithoutBorrowerIdInput = {
    create?: XOR<AssistantCreateWithoutBorrowerIdInput, AssistantUncheckedCreateWithoutBorrowerIdInput>
    connectOrCreate?: AssistantCreateOrConnectWithoutBorrowerIdInput
    connect?: AssistantWhereUniqueInput
  }

  export type LendingUncheckedCreateNestedManyWithoutBorrowerInput = {
    create?: XOR<LendingCreateWithoutBorrowerInput, LendingUncheckedCreateWithoutBorrowerInput> | LendingCreateWithoutBorrowerInput[] | LendingUncheckedCreateWithoutBorrowerInput[]
    connectOrCreate?: LendingCreateOrConnectWithoutBorrowerInput | LendingCreateOrConnectWithoutBorrowerInput[]
    createMany?: LendingCreateManyBorrowerInputEnvelope
    connect?: LendingWhereUniqueInput | LendingWhereUniqueInput[]
  }

  export type StudentUncheckedCreateNestedOneWithoutBorrowerIdInput = {
    create?: XOR<StudentCreateWithoutBorrowerIdInput, StudentUncheckedCreateWithoutBorrowerIdInput>
    connectOrCreate?: StudentCreateOrConnectWithoutBorrowerIdInput
    connect?: StudentWhereUniqueInput
  }

  export type TeacherUncheckedCreateNestedOneWithoutBorrowerIdInput = {
    create?: XOR<TeacherCreateWithoutBorrowerIdInput, TeacherUncheckedCreateWithoutBorrowerIdInput>
    connectOrCreate?: TeacherCreateOrConnectWithoutBorrowerIdInput
    connect?: TeacherWhereUniqueInput
  }

  export type AssistantUncheckedCreateNestedOneWithoutBorrowerIdInput = {
    create?: XOR<AssistantCreateWithoutBorrowerIdInput, AssistantUncheckedCreateWithoutBorrowerIdInput>
    connectOrCreate?: AssistantCreateOrConnectWithoutBorrowerIdInput
    connect?: AssistantWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumUserTypeFieldUpdateOperationsInput = {
    set?: $Enums.UserType
  }

  export type LendingUpdateManyWithoutBorrowerNestedInput = {
    create?: XOR<LendingCreateWithoutBorrowerInput, LendingUncheckedCreateWithoutBorrowerInput> | LendingCreateWithoutBorrowerInput[] | LendingUncheckedCreateWithoutBorrowerInput[]
    connectOrCreate?: LendingCreateOrConnectWithoutBorrowerInput | LendingCreateOrConnectWithoutBorrowerInput[]
    upsert?: LendingUpsertWithWhereUniqueWithoutBorrowerInput | LendingUpsertWithWhereUniqueWithoutBorrowerInput[]
    createMany?: LendingCreateManyBorrowerInputEnvelope
    set?: LendingWhereUniqueInput | LendingWhereUniqueInput[]
    disconnect?: LendingWhereUniqueInput | LendingWhereUniqueInput[]
    delete?: LendingWhereUniqueInput | LendingWhereUniqueInput[]
    connect?: LendingWhereUniqueInput | LendingWhereUniqueInput[]
    update?: LendingUpdateWithWhereUniqueWithoutBorrowerInput | LendingUpdateWithWhereUniqueWithoutBorrowerInput[]
    updateMany?: LendingUpdateManyWithWhereWithoutBorrowerInput | LendingUpdateManyWithWhereWithoutBorrowerInput[]
    deleteMany?: LendingScalarWhereInput | LendingScalarWhereInput[]
  }

  export type StudentUpdateOneWithoutBorrowerIdNestedInput = {
    create?: XOR<StudentCreateWithoutBorrowerIdInput, StudentUncheckedCreateWithoutBorrowerIdInput>
    connectOrCreate?: StudentCreateOrConnectWithoutBorrowerIdInput
    upsert?: StudentUpsertWithoutBorrowerIdInput
    disconnect?: StudentWhereInput | boolean
    delete?: StudentWhereInput | boolean
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutBorrowerIdInput, StudentUpdateWithoutBorrowerIdInput>, StudentUncheckedUpdateWithoutBorrowerIdInput>
  }

  export type TeacherUpdateOneWithoutBorrowerIdNestedInput = {
    create?: XOR<TeacherCreateWithoutBorrowerIdInput, TeacherUncheckedCreateWithoutBorrowerIdInput>
    connectOrCreate?: TeacherCreateOrConnectWithoutBorrowerIdInput
    upsert?: TeacherUpsertWithoutBorrowerIdInput
    disconnect?: TeacherWhereInput | boolean
    delete?: TeacherWhereInput | boolean
    connect?: TeacherWhereUniqueInput
    update?: XOR<XOR<TeacherUpdateToOneWithWhereWithoutBorrowerIdInput, TeacherUpdateWithoutBorrowerIdInput>, TeacherUncheckedUpdateWithoutBorrowerIdInput>
  }

  export type AssistantUpdateOneWithoutBorrowerIdNestedInput = {
    create?: XOR<AssistantCreateWithoutBorrowerIdInput, AssistantUncheckedCreateWithoutBorrowerIdInput>
    connectOrCreate?: AssistantCreateOrConnectWithoutBorrowerIdInput
    upsert?: AssistantUpsertWithoutBorrowerIdInput
    disconnect?: AssistantWhereInput | boolean
    delete?: AssistantWhereInput | boolean
    connect?: AssistantWhereUniqueInput
    update?: XOR<XOR<AssistantUpdateToOneWithWhereWithoutBorrowerIdInput, AssistantUpdateWithoutBorrowerIdInput>, AssistantUncheckedUpdateWithoutBorrowerIdInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type LendingUncheckedUpdateManyWithoutBorrowerNestedInput = {
    create?: XOR<LendingCreateWithoutBorrowerInput, LendingUncheckedCreateWithoutBorrowerInput> | LendingCreateWithoutBorrowerInput[] | LendingUncheckedCreateWithoutBorrowerInput[]
    connectOrCreate?: LendingCreateOrConnectWithoutBorrowerInput | LendingCreateOrConnectWithoutBorrowerInput[]
    upsert?: LendingUpsertWithWhereUniqueWithoutBorrowerInput | LendingUpsertWithWhereUniqueWithoutBorrowerInput[]
    createMany?: LendingCreateManyBorrowerInputEnvelope
    set?: LendingWhereUniqueInput | LendingWhereUniqueInput[]
    disconnect?: LendingWhereUniqueInput | LendingWhereUniqueInput[]
    delete?: LendingWhereUniqueInput | LendingWhereUniqueInput[]
    connect?: LendingWhereUniqueInput | LendingWhereUniqueInput[]
    update?: LendingUpdateWithWhereUniqueWithoutBorrowerInput | LendingUpdateWithWhereUniqueWithoutBorrowerInput[]
    updateMany?: LendingUpdateManyWithWhereWithoutBorrowerInput | LendingUpdateManyWithWhereWithoutBorrowerInput[]
    deleteMany?: LendingScalarWhereInput | LendingScalarWhereInput[]
  }

  export type StudentUncheckedUpdateOneWithoutBorrowerIdNestedInput = {
    create?: XOR<StudentCreateWithoutBorrowerIdInput, StudentUncheckedCreateWithoutBorrowerIdInput>
    connectOrCreate?: StudentCreateOrConnectWithoutBorrowerIdInput
    upsert?: StudentUpsertWithoutBorrowerIdInput
    disconnect?: StudentWhereInput | boolean
    delete?: StudentWhereInput | boolean
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutBorrowerIdInput, StudentUpdateWithoutBorrowerIdInput>, StudentUncheckedUpdateWithoutBorrowerIdInput>
  }

  export type TeacherUncheckedUpdateOneWithoutBorrowerIdNestedInput = {
    create?: XOR<TeacherCreateWithoutBorrowerIdInput, TeacherUncheckedCreateWithoutBorrowerIdInput>
    connectOrCreate?: TeacherCreateOrConnectWithoutBorrowerIdInput
    upsert?: TeacherUpsertWithoutBorrowerIdInput
    disconnect?: TeacherWhereInput | boolean
    delete?: TeacherWhereInput | boolean
    connect?: TeacherWhereUniqueInput
    update?: XOR<XOR<TeacherUpdateToOneWithWhereWithoutBorrowerIdInput, TeacherUpdateWithoutBorrowerIdInput>, TeacherUncheckedUpdateWithoutBorrowerIdInput>
  }

  export type AssistantUncheckedUpdateOneWithoutBorrowerIdNestedInput = {
    create?: XOR<AssistantCreateWithoutBorrowerIdInput, AssistantUncheckedCreateWithoutBorrowerIdInput>
    connectOrCreate?: AssistantCreateOrConnectWithoutBorrowerIdInput
    upsert?: AssistantUpsertWithoutBorrowerIdInput
    disconnect?: AssistantWhereInput | boolean
    delete?: AssistantWhereInput | boolean
    connect?: AssistantWhereUniqueInput
    update?: XOR<XOR<AssistantUpdateToOneWithWhereWithoutBorrowerIdInput, AssistantUpdateWithoutBorrowerIdInput>, AssistantUncheckedUpdateWithoutBorrowerIdInput>
  }

  export type BorrowerCreateNestedOneWithoutStudentInput = {
    create?: XOR<BorrowerCreateWithoutStudentInput, BorrowerUncheckedCreateWithoutStudentInput>
    connectOrCreate?: BorrowerCreateOrConnectWithoutStudentInput
    connect?: BorrowerWhereUniqueInput
  }

  export type DegreeCreateNestedOneWithoutStudentsInput = {
    create?: XOR<DegreeCreateWithoutStudentsInput, DegreeUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: DegreeCreateOrConnectWithoutStudentsInput
    connect?: DegreeWhereUniqueInput
  }

  export type BorrowerUpdateOneRequiredWithoutStudentNestedInput = {
    create?: XOR<BorrowerCreateWithoutStudentInput, BorrowerUncheckedCreateWithoutStudentInput>
    connectOrCreate?: BorrowerCreateOrConnectWithoutStudentInput
    upsert?: BorrowerUpsertWithoutStudentInput
    connect?: BorrowerWhereUniqueInput
    update?: XOR<XOR<BorrowerUpdateToOneWithWhereWithoutStudentInput, BorrowerUpdateWithoutStudentInput>, BorrowerUncheckedUpdateWithoutStudentInput>
  }

  export type DegreeUpdateOneRequiredWithoutStudentsNestedInput = {
    create?: XOR<DegreeCreateWithoutStudentsInput, DegreeUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: DegreeCreateOrConnectWithoutStudentsInput
    upsert?: DegreeUpsertWithoutStudentsInput
    connect?: DegreeWhereUniqueInput
    update?: XOR<XOR<DegreeUpdateToOneWithWhereWithoutStudentsInput, DegreeUpdateWithoutStudentsInput>, DegreeUncheckedUpdateWithoutStudentsInput>
  }

  export type StudentCreateNestedManyWithoutDegreeInput = {
    create?: XOR<StudentCreateWithoutDegreeInput, StudentUncheckedCreateWithoutDegreeInput> | StudentCreateWithoutDegreeInput[] | StudentUncheckedCreateWithoutDegreeInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutDegreeInput | StudentCreateOrConnectWithoutDegreeInput[]
    createMany?: StudentCreateManyDegreeInputEnvelope
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type StudentUncheckedCreateNestedManyWithoutDegreeInput = {
    create?: XOR<StudentCreateWithoutDegreeInput, StudentUncheckedCreateWithoutDegreeInput> | StudentCreateWithoutDegreeInput[] | StudentUncheckedCreateWithoutDegreeInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutDegreeInput | StudentCreateOrConnectWithoutDegreeInput[]
    createMany?: StudentCreateManyDegreeInputEnvelope
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type StudentUpdateManyWithoutDegreeNestedInput = {
    create?: XOR<StudentCreateWithoutDegreeInput, StudentUncheckedCreateWithoutDegreeInput> | StudentCreateWithoutDegreeInput[] | StudentUncheckedCreateWithoutDegreeInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutDegreeInput | StudentCreateOrConnectWithoutDegreeInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutDegreeInput | StudentUpsertWithWhereUniqueWithoutDegreeInput[]
    createMany?: StudentCreateManyDegreeInputEnvelope
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutDegreeInput | StudentUpdateWithWhereUniqueWithoutDegreeInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutDegreeInput | StudentUpdateManyWithWhereWithoutDegreeInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type StudentUncheckedUpdateManyWithoutDegreeNestedInput = {
    create?: XOR<StudentCreateWithoutDegreeInput, StudentUncheckedCreateWithoutDegreeInput> | StudentCreateWithoutDegreeInput[] | StudentUncheckedCreateWithoutDegreeInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutDegreeInput | StudentCreateOrConnectWithoutDegreeInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutDegreeInput | StudentUpsertWithWhereUniqueWithoutDegreeInput[]
    createMany?: StudentCreateManyDegreeInputEnvelope
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutDegreeInput | StudentUpdateWithWhereUniqueWithoutDegreeInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutDegreeInput | StudentUpdateManyWithWhereWithoutDegreeInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type BorrowerCreateNestedOneWithoutTeacherInput = {
    create?: XOR<BorrowerCreateWithoutTeacherInput, BorrowerUncheckedCreateWithoutTeacherInput>
    connectOrCreate?: BorrowerCreateOrConnectWithoutTeacherInput
    connect?: BorrowerWhereUniqueInput
  }

  export type LendingCreateNestedManyWithoutTeacherInput = {
    create?: XOR<LendingCreateWithoutTeacherInput, LendingUncheckedCreateWithoutTeacherInput> | LendingCreateWithoutTeacherInput[] | LendingUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: LendingCreateOrConnectWithoutTeacherInput | LendingCreateOrConnectWithoutTeacherInput[]
    createMany?: LendingCreateManyTeacherInputEnvelope
    connect?: LendingWhereUniqueInput | LendingWhereUniqueInput[]
  }

  export type LendingUncheckedCreateNestedManyWithoutTeacherInput = {
    create?: XOR<LendingCreateWithoutTeacherInput, LendingUncheckedCreateWithoutTeacherInput> | LendingCreateWithoutTeacherInput[] | LendingUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: LendingCreateOrConnectWithoutTeacherInput | LendingCreateOrConnectWithoutTeacherInput[]
    createMany?: LendingCreateManyTeacherInputEnvelope
    connect?: LendingWhereUniqueInput | LendingWhereUniqueInput[]
  }

  export type BorrowerUpdateOneRequiredWithoutTeacherNestedInput = {
    create?: XOR<BorrowerCreateWithoutTeacherInput, BorrowerUncheckedCreateWithoutTeacherInput>
    connectOrCreate?: BorrowerCreateOrConnectWithoutTeacherInput
    upsert?: BorrowerUpsertWithoutTeacherInput
    connect?: BorrowerWhereUniqueInput
    update?: XOR<XOR<BorrowerUpdateToOneWithWhereWithoutTeacherInput, BorrowerUpdateWithoutTeacherInput>, BorrowerUncheckedUpdateWithoutTeacherInput>
  }

  export type LendingUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<LendingCreateWithoutTeacherInput, LendingUncheckedCreateWithoutTeacherInput> | LendingCreateWithoutTeacherInput[] | LendingUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: LendingCreateOrConnectWithoutTeacherInput | LendingCreateOrConnectWithoutTeacherInput[]
    upsert?: LendingUpsertWithWhereUniqueWithoutTeacherInput | LendingUpsertWithWhereUniqueWithoutTeacherInput[]
    createMany?: LendingCreateManyTeacherInputEnvelope
    set?: LendingWhereUniqueInput | LendingWhereUniqueInput[]
    disconnect?: LendingWhereUniqueInput | LendingWhereUniqueInput[]
    delete?: LendingWhereUniqueInput | LendingWhereUniqueInput[]
    connect?: LendingWhereUniqueInput | LendingWhereUniqueInput[]
    update?: LendingUpdateWithWhereUniqueWithoutTeacherInput | LendingUpdateWithWhereUniqueWithoutTeacherInput[]
    updateMany?: LendingUpdateManyWithWhereWithoutTeacherInput | LendingUpdateManyWithWhereWithoutTeacherInput[]
    deleteMany?: LendingScalarWhereInput | LendingScalarWhereInput[]
  }

  export type LendingUncheckedUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<LendingCreateWithoutTeacherInput, LendingUncheckedCreateWithoutTeacherInput> | LendingCreateWithoutTeacherInput[] | LendingUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: LendingCreateOrConnectWithoutTeacherInput | LendingCreateOrConnectWithoutTeacherInput[]
    upsert?: LendingUpsertWithWhereUniqueWithoutTeacherInput | LendingUpsertWithWhereUniqueWithoutTeacherInput[]
    createMany?: LendingCreateManyTeacherInputEnvelope
    set?: LendingWhereUniqueInput | LendingWhereUniqueInput[]
    disconnect?: LendingWhereUniqueInput | LendingWhereUniqueInput[]
    delete?: LendingWhereUniqueInput | LendingWhereUniqueInput[]
    connect?: LendingWhereUniqueInput | LendingWhereUniqueInput[]
    update?: LendingUpdateWithWhereUniqueWithoutTeacherInput | LendingUpdateWithWhereUniqueWithoutTeacherInput[]
    updateMany?: LendingUpdateManyWithWhereWithoutTeacherInput | LendingUpdateManyWithWhereWithoutTeacherInput[]
    deleteMany?: LendingScalarWhereInput | LendingScalarWhereInput[]
  }

  export type BorrowerCreateNestedOneWithoutAssistantInput = {
    create?: XOR<BorrowerCreateWithoutAssistantInput, BorrowerUncheckedCreateWithoutAssistantInput>
    connectOrCreate?: BorrowerCreateOrConnectWithoutAssistantInput
    connect?: BorrowerWhereUniqueInput
  }

  export type BorrowerUpdateOneRequiredWithoutAssistantNestedInput = {
    create?: XOR<BorrowerCreateWithoutAssistantInput, BorrowerUncheckedCreateWithoutAssistantInput>
    connectOrCreate?: BorrowerCreateOrConnectWithoutAssistantInput
    upsert?: BorrowerUpsertWithoutAssistantInput
    connect?: BorrowerWhereUniqueInput
    update?: XOR<XOR<BorrowerUpdateToOneWithWhereWithoutAssistantInput, BorrowerUpdateWithoutAssistantInput>, BorrowerUncheckedUpdateWithoutAssistantInput>
  }

  export type LendingProductCreateNestedManyWithoutProductInput = {
    create?: XOR<LendingProductCreateWithoutProductInput, LendingProductUncheckedCreateWithoutProductInput> | LendingProductCreateWithoutProductInput[] | LendingProductUncheckedCreateWithoutProductInput[]
    connectOrCreate?: LendingProductCreateOrConnectWithoutProductInput | LendingProductCreateOrConnectWithoutProductInput[]
    createMany?: LendingProductCreateManyProductInputEnvelope
    connect?: LendingProductWhereUniqueInput | LendingProductWhereUniqueInput[]
  }

  export type LendingProductUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<LendingProductCreateWithoutProductInput, LendingProductUncheckedCreateWithoutProductInput> | LendingProductCreateWithoutProductInput[] | LendingProductUncheckedCreateWithoutProductInput[]
    connectOrCreate?: LendingProductCreateOrConnectWithoutProductInput | LendingProductCreateOrConnectWithoutProductInput[]
    createMany?: LendingProductCreateManyProductInputEnvelope
    connect?: LendingProductWhereUniqueInput | LendingProductWhereUniqueInput[]
  }

  export type LendingProductUpdateManyWithoutProductNestedInput = {
    create?: XOR<LendingProductCreateWithoutProductInput, LendingProductUncheckedCreateWithoutProductInput> | LendingProductCreateWithoutProductInput[] | LendingProductUncheckedCreateWithoutProductInput[]
    connectOrCreate?: LendingProductCreateOrConnectWithoutProductInput | LendingProductCreateOrConnectWithoutProductInput[]
    upsert?: LendingProductUpsertWithWhereUniqueWithoutProductInput | LendingProductUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: LendingProductCreateManyProductInputEnvelope
    set?: LendingProductWhereUniqueInput | LendingProductWhereUniqueInput[]
    disconnect?: LendingProductWhereUniqueInput | LendingProductWhereUniqueInput[]
    delete?: LendingProductWhereUniqueInput | LendingProductWhereUniqueInput[]
    connect?: LendingProductWhereUniqueInput | LendingProductWhereUniqueInput[]
    update?: LendingProductUpdateWithWhereUniqueWithoutProductInput | LendingProductUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: LendingProductUpdateManyWithWhereWithoutProductInput | LendingProductUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: LendingProductScalarWhereInput | LendingProductScalarWhereInput[]
  }

  export type LendingProductUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<LendingProductCreateWithoutProductInput, LendingProductUncheckedCreateWithoutProductInput> | LendingProductCreateWithoutProductInput[] | LendingProductUncheckedCreateWithoutProductInput[]
    connectOrCreate?: LendingProductCreateOrConnectWithoutProductInput | LendingProductCreateOrConnectWithoutProductInput[]
    upsert?: LendingProductUpsertWithWhereUniqueWithoutProductInput | LendingProductUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: LendingProductCreateManyProductInputEnvelope
    set?: LendingProductWhereUniqueInput | LendingProductWhereUniqueInput[]
    disconnect?: LendingProductWhereUniqueInput | LendingProductWhereUniqueInput[]
    delete?: LendingProductWhereUniqueInput | LendingProductWhereUniqueInput[]
    connect?: LendingProductWhereUniqueInput | LendingProductWhereUniqueInput[]
    update?: LendingProductUpdateWithWhereUniqueWithoutProductInput | LendingProductUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: LendingProductUpdateManyWithWhereWithoutProductInput | LendingProductUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: LendingProductScalarWhereInput | LendingProductScalarWhereInput[]
  }

  export type BorrowerCreateNestedOneWithoutLendingsInput = {
    create?: XOR<BorrowerCreateWithoutLendingsInput, BorrowerUncheckedCreateWithoutLendingsInput>
    connectOrCreate?: BorrowerCreateOrConnectWithoutLendingsInput
    connect?: BorrowerWhereUniqueInput
  }

  export type AlertLendingCreateNestedManyWithoutLendingInput = {
    create?: XOR<AlertLendingCreateWithoutLendingInput, AlertLendingUncheckedCreateWithoutLendingInput> | AlertLendingCreateWithoutLendingInput[] | AlertLendingUncheckedCreateWithoutLendingInput[]
    connectOrCreate?: AlertLendingCreateOrConnectWithoutLendingInput | AlertLendingCreateOrConnectWithoutLendingInput[]
    createMany?: AlertLendingCreateManyLendingInputEnvelope
    connect?: AlertLendingWhereUniqueInput | AlertLendingWhereUniqueInput[]
  }

  export type TeacherCreateNestedOneWithoutLendingsInput = {
    create?: XOR<TeacherCreateWithoutLendingsInput, TeacherUncheckedCreateWithoutLendingsInput>
    connectOrCreate?: TeacherCreateOrConnectWithoutLendingsInput
    connect?: TeacherWhereUniqueInput
  }

  export type LendingProductCreateNestedManyWithoutLendingInput = {
    create?: XOR<LendingProductCreateWithoutLendingInput, LendingProductUncheckedCreateWithoutLendingInput> | LendingProductCreateWithoutLendingInput[] | LendingProductUncheckedCreateWithoutLendingInput[]
    connectOrCreate?: LendingProductCreateOrConnectWithoutLendingInput | LendingProductCreateOrConnectWithoutLendingInput[]
    createMany?: LendingProductCreateManyLendingInputEnvelope
    connect?: LendingProductWhereUniqueInput | LendingProductWhereUniqueInput[]
  }

  export type AlertLendingUncheckedCreateNestedManyWithoutLendingInput = {
    create?: XOR<AlertLendingCreateWithoutLendingInput, AlertLendingUncheckedCreateWithoutLendingInput> | AlertLendingCreateWithoutLendingInput[] | AlertLendingUncheckedCreateWithoutLendingInput[]
    connectOrCreate?: AlertLendingCreateOrConnectWithoutLendingInput | AlertLendingCreateOrConnectWithoutLendingInput[]
    createMany?: AlertLendingCreateManyLendingInputEnvelope
    connect?: AlertLendingWhereUniqueInput | AlertLendingWhereUniqueInput[]
  }

  export type LendingProductUncheckedCreateNestedManyWithoutLendingInput = {
    create?: XOR<LendingProductCreateWithoutLendingInput, LendingProductUncheckedCreateWithoutLendingInput> | LendingProductCreateWithoutLendingInput[] | LendingProductUncheckedCreateWithoutLendingInput[]
    connectOrCreate?: LendingProductCreateOrConnectWithoutLendingInput | LendingProductCreateOrConnectWithoutLendingInput[]
    createMany?: LendingProductCreateManyLendingInputEnvelope
    connect?: LendingProductWhereUniqueInput | LendingProductWhereUniqueInput[]
  }

  export type EnumLendingStateFieldUpdateOperationsInput = {
    set?: $Enums.LendingState
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type BorrowerUpdateOneRequiredWithoutLendingsNestedInput = {
    create?: XOR<BorrowerCreateWithoutLendingsInput, BorrowerUncheckedCreateWithoutLendingsInput>
    connectOrCreate?: BorrowerCreateOrConnectWithoutLendingsInput
    upsert?: BorrowerUpsertWithoutLendingsInput
    connect?: BorrowerWhereUniqueInput
    update?: XOR<XOR<BorrowerUpdateToOneWithWhereWithoutLendingsInput, BorrowerUpdateWithoutLendingsInput>, BorrowerUncheckedUpdateWithoutLendingsInput>
  }

  export type AlertLendingUpdateManyWithoutLendingNestedInput = {
    create?: XOR<AlertLendingCreateWithoutLendingInput, AlertLendingUncheckedCreateWithoutLendingInput> | AlertLendingCreateWithoutLendingInput[] | AlertLendingUncheckedCreateWithoutLendingInput[]
    connectOrCreate?: AlertLendingCreateOrConnectWithoutLendingInput | AlertLendingCreateOrConnectWithoutLendingInput[]
    upsert?: AlertLendingUpsertWithWhereUniqueWithoutLendingInput | AlertLendingUpsertWithWhereUniqueWithoutLendingInput[]
    createMany?: AlertLendingCreateManyLendingInputEnvelope
    set?: AlertLendingWhereUniqueInput | AlertLendingWhereUniqueInput[]
    disconnect?: AlertLendingWhereUniqueInput | AlertLendingWhereUniqueInput[]
    delete?: AlertLendingWhereUniqueInput | AlertLendingWhereUniqueInput[]
    connect?: AlertLendingWhereUniqueInput | AlertLendingWhereUniqueInput[]
    update?: AlertLendingUpdateWithWhereUniqueWithoutLendingInput | AlertLendingUpdateWithWhereUniqueWithoutLendingInput[]
    updateMany?: AlertLendingUpdateManyWithWhereWithoutLendingInput | AlertLendingUpdateManyWithWhereWithoutLendingInput[]
    deleteMany?: AlertLendingScalarWhereInput | AlertLendingScalarWhereInput[]
  }

  export type TeacherUpdateOneWithoutLendingsNestedInput = {
    create?: XOR<TeacherCreateWithoutLendingsInput, TeacherUncheckedCreateWithoutLendingsInput>
    connectOrCreate?: TeacherCreateOrConnectWithoutLendingsInput
    upsert?: TeacherUpsertWithoutLendingsInput
    disconnect?: TeacherWhereInput | boolean
    delete?: TeacherWhereInput | boolean
    connect?: TeacherWhereUniqueInput
    update?: XOR<XOR<TeacherUpdateToOneWithWhereWithoutLendingsInput, TeacherUpdateWithoutLendingsInput>, TeacherUncheckedUpdateWithoutLendingsInput>
  }

  export type LendingProductUpdateManyWithoutLendingNestedInput = {
    create?: XOR<LendingProductCreateWithoutLendingInput, LendingProductUncheckedCreateWithoutLendingInput> | LendingProductCreateWithoutLendingInput[] | LendingProductUncheckedCreateWithoutLendingInput[]
    connectOrCreate?: LendingProductCreateOrConnectWithoutLendingInput | LendingProductCreateOrConnectWithoutLendingInput[]
    upsert?: LendingProductUpsertWithWhereUniqueWithoutLendingInput | LendingProductUpsertWithWhereUniqueWithoutLendingInput[]
    createMany?: LendingProductCreateManyLendingInputEnvelope
    set?: LendingProductWhereUniqueInput | LendingProductWhereUniqueInput[]
    disconnect?: LendingProductWhereUniqueInput | LendingProductWhereUniqueInput[]
    delete?: LendingProductWhereUniqueInput | LendingProductWhereUniqueInput[]
    connect?: LendingProductWhereUniqueInput | LendingProductWhereUniqueInput[]
    update?: LendingProductUpdateWithWhereUniqueWithoutLendingInput | LendingProductUpdateWithWhereUniqueWithoutLendingInput[]
    updateMany?: LendingProductUpdateManyWithWhereWithoutLendingInput | LendingProductUpdateManyWithWhereWithoutLendingInput[]
    deleteMany?: LendingProductScalarWhereInput | LendingProductScalarWhereInput[]
  }

  export type AlertLendingUncheckedUpdateManyWithoutLendingNestedInput = {
    create?: XOR<AlertLendingCreateWithoutLendingInput, AlertLendingUncheckedCreateWithoutLendingInput> | AlertLendingCreateWithoutLendingInput[] | AlertLendingUncheckedCreateWithoutLendingInput[]
    connectOrCreate?: AlertLendingCreateOrConnectWithoutLendingInput | AlertLendingCreateOrConnectWithoutLendingInput[]
    upsert?: AlertLendingUpsertWithWhereUniqueWithoutLendingInput | AlertLendingUpsertWithWhereUniqueWithoutLendingInput[]
    createMany?: AlertLendingCreateManyLendingInputEnvelope
    set?: AlertLendingWhereUniqueInput | AlertLendingWhereUniqueInput[]
    disconnect?: AlertLendingWhereUniqueInput | AlertLendingWhereUniqueInput[]
    delete?: AlertLendingWhereUniqueInput | AlertLendingWhereUniqueInput[]
    connect?: AlertLendingWhereUniqueInput | AlertLendingWhereUniqueInput[]
    update?: AlertLendingUpdateWithWhereUniqueWithoutLendingInput | AlertLendingUpdateWithWhereUniqueWithoutLendingInput[]
    updateMany?: AlertLendingUpdateManyWithWhereWithoutLendingInput | AlertLendingUpdateManyWithWhereWithoutLendingInput[]
    deleteMany?: AlertLendingScalarWhereInput | AlertLendingScalarWhereInput[]
  }

  export type LendingProductUncheckedUpdateManyWithoutLendingNestedInput = {
    create?: XOR<LendingProductCreateWithoutLendingInput, LendingProductUncheckedCreateWithoutLendingInput> | LendingProductCreateWithoutLendingInput[] | LendingProductUncheckedCreateWithoutLendingInput[]
    connectOrCreate?: LendingProductCreateOrConnectWithoutLendingInput | LendingProductCreateOrConnectWithoutLendingInput[]
    upsert?: LendingProductUpsertWithWhereUniqueWithoutLendingInput | LendingProductUpsertWithWhereUniqueWithoutLendingInput[]
    createMany?: LendingProductCreateManyLendingInputEnvelope
    set?: LendingProductWhereUniqueInput | LendingProductWhereUniqueInput[]
    disconnect?: LendingProductWhereUniqueInput | LendingProductWhereUniqueInput[]
    delete?: LendingProductWhereUniqueInput | LendingProductWhereUniqueInput[]
    connect?: LendingProductWhereUniqueInput | LendingProductWhereUniqueInput[]
    update?: LendingProductUpdateWithWhereUniqueWithoutLendingInput | LendingProductUpdateWithWhereUniqueWithoutLendingInput[]
    updateMany?: LendingProductUpdateManyWithWhereWithoutLendingInput | LendingProductUpdateManyWithWhereWithoutLendingInput[]
    deleteMany?: LendingProductScalarWhereInput | LendingProductScalarWhereInput[]
  }

  export type LendingCreateNestedOneWithoutLendingProductsInput = {
    create?: XOR<LendingCreateWithoutLendingProductsInput, LendingUncheckedCreateWithoutLendingProductsInput>
    connectOrCreate?: LendingCreateOrConnectWithoutLendingProductsInput
    connect?: LendingWhereUniqueInput
  }

  export type productCreateNestedOneWithoutLendingProductsInput = {
    create?: XOR<productCreateWithoutLendingProductsInput, productUncheckedCreateWithoutLendingProductsInput>
    connectOrCreate?: productCreateOrConnectWithoutLendingProductsInput
    connect?: productWhereUniqueInput
  }

  export type LendingUpdateOneRequiredWithoutLendingProductsNestedInput = {
    create?: XOR<LendingCreateWithoutLendingProductsInput, LendingUncheckedCreateWithoutLendingProductsInput>
    connectOrCreate?: LendingCreateOrConnectWithoutLendingProductsInput
    upsert?: LendingUpsertWithoutLendingProductsInput
    connect?: LendingWhereUniqueInput
    update?: XOR<XOR<LendingUpdateToOneWithWhereWithoutLendingProductsInput, LendingUpdateWithoutLendingProductsInput>, LendingUncheckedUpdateWithoutLendingProductsInput>
  }

  export type productUpdateOneRequiredWithoutLendingProductsNestedInput = {
    create?: XOR<productCreateWithoutLendingProductsInput, productUncheckedCreateWithoutLendingProductsInput>
    connectOrCreate?: productCreateOrConnectWithoutLendingProductsInput
    upsert?: productUpsertWithoutLendingProductsInput
    connect?: productWhereUniqueInput
    update?: XOR<XOR<productUpdateToOneWithWhereWithoutLendingProductsInput, productUpdateWithoutLendingProductsInput>, productUncheckedUpdateWithoutLendingProductsInput>
  }

  export type AlertLendingCreateNestedManyWithoutAlertInput = {
    create?: XOR<AlertLendingCreateWithoutAlertInput, AlertLendingUncheckedCreateWithoutAlertInput> | AlertLendingCreateWithoutAlertInput[] | AlertLendingUncheckedCreateWithoutAlertInput[]
    connectOrCreate?: AlertLendingCreateOrConnectWithoutAlertInput | AlertLendingCreateOrConnectWithoutAlertInput[]
    createMany?: AlertLendingCreateManyAlertInputEnvelope
    connect?: AlertLendingWhereUniqueInput | AlertLendingWhereUniqueInput[]
  }

  export type AlertLendingUncheckedCreateNestedManyWithoutAlertInput = {
    create?: XOR<AlertLendingCreateWithoutAlertInput, AlertLendingUncheckedCreateWithoutAlertInput> | AlertLendingCreateWithoutAlertInput[] | AlertLendingUncheckedCreateWithoutAlertInput[]
    connectOrCreate?: AlertLendingCreateOrConnectWithoutAlertInput | AlertLendingCreateOrConnectWithoutAlertInput[]
    createMany?: AlertLendingCreateManyAlertInputEnvelope
    connect?: AlertLendingWhereUniqueInput | AlertLendingWhereUniqueInput[]
  }

  export type AlertLendingUpdateManyWithoutAlertNestedInput = {
    create?: XOR<AlertLendingCreateWithoutAlertInput, AlertLendingUncheckedCreateWithoutAlertInput> | AlertLendingCreateWithoutAlertInput[] | AlertLendingUncheckedCreateWithoutAlertInput[]
    connectOrCreate?: AlertLendingCreateOrConnectWithoutAlertInput | AlertLendingCreateOrConnectWithoutAlertInput[]
    upsert?: AlertLendingUpsertWithWhereUniqueWithoutAlertInput | AlertLendingUpsertWithWhereUniqueWithoutAlertInput[]
    createMany?: AlertLendingCreateManyAlertInputEnvelope
    set?: AlertLendingWhereUniqueInput | AlertLendingWhereUniqueInput[]
    disconnect?: AlertLendingWhereUniqueInput | AlertLendingWhereUniqueInput[]
    delete?: AlertLendingWhereUniqueInput | AlertLendingWhereUniqueInput[]
    connect?: AlertLendingWhereUniqueInput | AlertLendingWhereUniqueInput[]
    update?: AlertLendingUpdateWithWhereUniqueWithoutAlertInput | AlertLendingUpdateWithWhereUniqueWithoutAlertInput[]
    updateMany?: AlertLendingUpdateManyWithWhereWithoutAlertInput | AlertLendingUpdateManyWithWhereWithoutAlertInput[]
    deleteMany?: AlertLendingScalarWhereInput | AlertLendingScalarWhereInput[]
  }

  export type AlertLendingUncheckedUpdateManyWithoutAlertNestedInput = {
    create?: XOR<AlertLendingCreateWithoutAlertInput, AlertLendingUncheckedCreateWithoutAlertInput> | AlertLendingCreateWithoutAlertInput[] | AlertLendingUncheckedCreateWithoutAlertInput[]
    connectOrCreate?: AlertLendingCreateOrConnectWithoutAlertInput | AlertLendingCreateOrConnectWithoutAlertInput[]
    upsert?: AlertLendingUpsertWithWhereUniqueWithoutAlertInput | AlertLendingUpsertWithWhereUniqueWithoutAlertInput[]
    createMany?: AlertLendingCreateManyAlertInputEnvelope
    set?: AlertLendingWhereUniqueInput | AlertLendingWhereUniqueInput[]
    disconnect?: AlertLendingWhereUniqueInput | AlertLendingWhereUniqueInput[]
    delete?: AlertLendingWhereUniqueInput | AlertLendingWhereUniqueInput[]
    connect?: AlertLendingWhereUniqueInput | AlertLendingWhereUniqueInput[]
    update?: AlertLendingUpdateWithWhereUniqueWithoutAlertInput | AlertLendingUpdateWithWhereUniqueWithoutAlertInput[]
    updateMany?: AlertLendingUpdateManyWithWhereWithoutAlertInput | AlertLendingUpdateManyWithWhereWithoutAlertInput[]
    deleteMany?: AlertLendingScalarWhereInput | AlertLendingScalarWhereInput[]
  }

  export type AlertCreateNestedOneWithoutLendingsInput = {
    create?: XOR<AlertCreateWithoutLendingsInput, AlertUncheckedCreateWithoutLendingsInput>
    connectOrCreate?: AlertCreateOrConnectWithoutLendingsInput
    connect?: AlertWhereUniqueInput
  }

  export type LendingCreateNestedOneWithoutAlertsInput = {
    create?: XOR<LendingCreateWithoutAlertsInput, LendingUncheckedCreateWithoutAlertsInput>
    connectOrCreate?: LendingCreateOrConnectWithoutAlertsInput
    connect?: LendingWhereUniqueInput
  }

  export type AlertUpdateOneRequiredWithoutLendingsNestedInput = {
    create?: XOR<AlertCreateWithoutLendingsInput, AlertUncheckedCreateWithoutLendingsInput>
    connectOrCreate?: AlertCreateOrConnectWithoutLendingsInput
    upsert?: AlertUpsertWithoutLendingsInput
    connect?: AlertWhereUniqueInput
    update?: XOR<XOR<AlertUpdateToOneWithWhereWithoutLendingsInput, AlertUpdateWithoutLendingsInput>, AlertUncheckedUpdateWithoutLendingsInput>
  }

  export type LendingUpdateOneRequiredWithoutAlertsNestedInput = {
    create?: XOR<LendingCreateWithoutAlertsInput, LendingUncheckedCreateWithoutAlertsInput>
    connectOrCreate?: LendingCreateOrConnectWithoutAlertsInput
    upsert?: LendingUpsertWithoutAlertsInput
    connect?: LendingWhereUniqueInput
    update?: XOR<XOR<LendingUpdateToOneWithWhereWithoutAlertsInput, LendingUpdateWithoutAlertsInput>, LendingUncheckedUpdateWithoutAlertsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumUserTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.UserType | EnumUserTypeFieldRefInput<$PrismaModel>
    in?: $Enums.UserType[]
    notIn?: $Enums.UserType[]
    not?: NestedEnumUserTypeFilter<$PrismaModel> | $Enums.UserType
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumUserTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserType | EnumUserTypeFieldRefInput<$PrismaModel>
    in?: $Enums.UserType[]
    notIn?: $Enums.UserType[]
    not?: NestedEnumUserTypeWithAggregatesFilter<$PrismaModel> | $Enums.UserType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserTypeFilter<$PrismaModel>
    _max?: NestedEnumUserTypeFilter<$PrismaModel>
  }

  export type NestedEnumLendingStateFilter<$PrismaModel = never> = {
    equals?: $Enums.LendingState | EnumLendingStateFieldRefInput<$PrismaModel>
    in?: $Enums.LendingState[]
    notIn?: $Enums.LendingState[]
    not?: NestedEnumLendingStateFilter<$PrismaModel> | $Enums.LendingState
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumLendingStateWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LendingState | EnumLendingStateFieldRefInput<$PrismaModel>
    in?: $Enums.LendingState[]
    notIn?: $Enums.LendingState[]
    not?: NestedEnumLendingStateWithAggregatesFilter<$PrismaModel> | $Enums.LendingState
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLendingStateFilter<$PrismaModel>
    _max?: NestedEnumLendingStateFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type LendingCreateWithoutBorrowerInput = {
    state?: $Enums.LendingState
    date?: Date | string
    finalizeDate?: Date | string | null
    eliminateDate?: Date | string | null
    comments?: string | null
    alerts?: AlertLendingCreateNestedManyWithoutLendingInput
    teacher?: TeacherCreateNestedOneWithoutLendingsInput
    lendingProducts?: LendingProductCreateNestedManyWithoutLendingInput
  }

  export type LendingUncheckedCreateWithoutBorrowerInput = {
    id?: number
    state?: $Enums.LendingState
    date?: Date | string
    finalizeDate?: Date | string | null
    eliminateDate?: Date | string | null
    comments?: string | null
    teacherId?: number | null
    alerts?: AlertLendingUncheckedCreateNestedManyWithoutLendingInput
    lendingProducts?: LendingProductUncheckedCreateNestedManyWithoutLendingInput
  }

  export type LendingCreateOrConnectWithoutBorrowerInput = {
    where: LendingWhereUniqueInput
    create: XOR<LendingCreateWithoutBorrowerInput, LendingUncheckedCreateWithoutBorrowerInput>
  }

  export type LendingCreateManyBorrowerInputEnvelope = {
    data: LendingCreateManyBorrowerInput | LendingCreateManyBorrowerInput[]
    skipDuplicates?: boolean
  }

  export type StudentCreateWithoutBorrowerIdInput = {
    degree: DegreeCreateNestedOneWithoutStudentsInput
  }

  export type StudentUncheckedCreateWithoutBorrowerIdInput = {
    codeDegree: string
  }

  export type StudentCreateOrConnectWithoutBorrowerIdInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutBorrowerIdInput, StudentUncheckedCreateWithoutBorrowerIdInput>
  }

  export type TeacherCreateWithoutBorrowerIdInput = {
    lendings?: LendingCreateNestedManyWithoutTeacherInput
  }

  export type TeacherUncheckedCreateWithoutBorrowerIdInput = {
    lendings?: LendingUncheckedCreateNestedManyWithoutTeacherInput
  }

  export type TeacherCreateOrConnectWithoutBorrowerIdInput = {
    where: TeacherWhereUniqueInput
    create: XOR<TeacherCreateWithoutBorrowerIdInput, TeacherUncheckedCreateWithoutBorrowerIdInput>
  }

  export type AssistantCreateWithoutBorrowerIdInput = {
    role: string
  }

  export type AssistantUncheckedCreateWithoutBorrowerIdInput = {
    role: string
  }

  export type AssistantCreateOrConnectWithoutBorrowerIdInput = {
    where: AssistantWhereUniqueInput
    create: XOR<AssistantCreateWithoutBorrowerIdInput, AssistantUncheckedCreateWithoutBorrowerIdInput>
  }

  export type LendingUpsertWithWhereUniqueWithoutBorrowerInput = {
    where: LendingWhereUniqueInput
    update: XOR<LendingUpdateWithoutBorrowerInput, LendingUncheckedUpdateWithoutBorrowerInput>
    create: XOR<LendingCreateWithoutBorrowerInput, LendingUncheckedCreateWithoutBorrowerInput>
  }

  export type LendingUpdateWithWhereUniqueWithoutBorrowerInput = {
    where: LendingWhereUniqueInput
    data: XOR<LendingUpdateWithoutBorrowerInput, LendingUncheckedUpdateWithoutBorrowerInput>
  }

  export type LendingUpdateManyWithWhereWithoutBorrowerInput = {
    where: LendingScalarWhereInput
    data: XOR<LendingUpdateManyMutationInput, LendingUncheckedUpdateManyWithoutBorrowerInput>
  }

  export type LendingScalarWhereInput = {
    AND?: LendingScalarWhereInput | LendingScalarWhereInput[]
    OR?: LendingScalarWhereInput[]
    NOT?: LendingScalarWhereInput | LendingScalarWhereInput[]
    id?: IntFilter<"Lending"> | number
    state?: EnumLendingStateFilter<"Lending"> | $Enums.LendingState
    date?: DateTimeFilter<"Lending"> | Date | string
    finalizeDate?: DateTimeNullableFilter<"Lending"> | Date | string | null
    eliminateDate?: DateTimeNullableFilter<"Lending"> | Date | string | null
    comments?: StringNullableFilter<"Lending"> | string | null
    BorrowerId?: IntFilter<"Lending"> | number
    teacherId?: IntNullableFilter<"Lending"> | number | null
  }

  export type StudentUpsertWithoutBorrowerIdInput = {
    update: XOR<StudentUpdateWithoutBorrowerIdInput, StudentUncheckedUpdateWithoutBorrowerIdInput>
    create: XOR<StudentCreateWithoutBorrowerIdInput, StudentUncheckedCreateWithoutBorrowerIdInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutBorrowerIdInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutBorrowerIdInput, StudentUncheckedUpdateWithoutBorrowerIdInput>
  }

  export type StudentUpdateWithoutBorrowerIdInput = {
    degree?: DegreeUpdateOneRequiredWithoutStudentsNestedInput
  }

  export type StudentUncheckedUpdateWithoutBorrowerIdInput = {
    codeDegree?: StringFieldUpdateOperationsInput | string
  }

  export type TeacherUpsertWithoutBorrowerIdInput = {
    update: XOR<TeacherUpdateWithoutBorrowerIdInput, TeacherUncheckedUpdateWithoutBorrowerIdInput>
    create: XOR<TeacherCreateWithoutBorrowerIdInput, TeacherUncheckedCreateWithoutBorrowerIdInput>
    where?: TeacherWhereInput
  }

  export type TeacherUpdateToOneWithWhereWithoutBorrowerIdInput = {
    where?: TeacherWhereInput
    data: XOR<TeacherUpdateWithoutBorrowerIdInput, TeacherUncheckedUpdateWithoutBorrowerIdInput>
  }

  export type TeacherUpdateWithoutBorrowerIdInput = {
    lendings?: LendingUpdateManyWithoutTeacherNestedInput
  }

  export type TeacherUncheckedUpdateWithoutBorrowerIdInput = {
    lendings?: LendingUncheckedUpdateManyWithoutTeacherNestedInput
  }

  export type AssistantUpsertWithoutBorrowerIdInput = {
    update: XOR<AssistantUpdateWithoutBorrowerIdInput, AssistantUncheckedUpdateWithoutBorrowerIdInput>
    create: XOR<AssistantCreateWithoutBorrowerIdInput, AssistantUncheckedCreateWithoutBorrowerIdInput>
    where?: AssistantWhereInput
  }

  export type AssistantUpdateToOneWithWhereWithoutBorrowerIdInput = {
    where?: AssistantWhereInput
    data: XOR<AssistantUpdateWithoutBorrowerIdInput, AssistantUncheckedUpdateWithoutBorrowerIdInput>
  }

  export type AssistantUpdateWithoutBorrowerIdInput = {
    role?: StringFieldUpdateOperationsInput | string
  }

  export type AssistantUncheckedUpdateWithoutBorrowerIdInput = {
    role?: StringFieldUpdateOperationsInput | string
  }

  export type BorrowerCreateWithoutStudentInput = {
    state?: boolean
    rut: string
    name: string
    mail?: string | null
    phoneNumber?: number | null
    type: $Enums.UserType
    lendings?: LendingCreateNestedManyWithoutBorrowerInput
    teacher?: TeacherCreateNestedOneWithoutBorrowerIdInput
    assistant?: AssistantCreateNestedOneWithoutBorrowerIdInput
  }

  export type BorrowerUncheckedCreateWithoutStudentInput = {
    id?: number
    state?: boolean
    rut: string
    name: string
    mail?: string | null
    phoneNumber?: number | null
    type: $Enums.UserType
    lendings?: LendingUncheckedCreateNestedManyWithoutBorrowerInput
    teacher?: TeacherUncheckedCreateNestedOneWithoutBorrowerIdInput
    assistant?: AssistantUncheckedCreateNestedOneWithoutBorrowerIdInput
  }

  export type BorrowerCreateOrConnectWithoutStudentInput = {
    where: BorrowerWhereUniqueInput
    create: XOR<BorrowerCreateWithoutStudentInput, BorrowerUncheckedCreateWithoutStudentInput>
  }

  export type DegreeCreateWithoutStudentsInput = {
    code: string
    name: string
  }

  export type DegreeUncheckedCreateWithoutStudentsInput = {
    code: string
    name: string
  }

  export type DegreeCreateOrConnectWithoutStudentsInput = {
    where: DegreeWhereUniqueInput
    create: XOR<DegreeCreateWithoutStudentsInput, DegreeUncheckedCreateWithoutStudentsInput>
  }

  export type BorrowerUpsertWithoutStudentInput = {
    update: XOR<BorrowerUpdateWithoutStudentInput, BorrowerUncheckedUpdateWithoutStudentInput>
    create: XOR<BorrowerCreateWithoutStudentInput, BorrowerUncheckedCreateWithoutStudentInput>
    where?: BorrowerWhereInput
  }

  export type BorrowerUpdateToOneWithWhereWithoutStudentInput = {
    where?: BorrowerWhereInput
    data: XOR<BorrowerUpdateWithoutStudentInput, BorrowerUncheckedUpdateWithoutStudentInput>
  }

  export type BorrowerUpdateWithoutStudentInput = {
    state?: BoolFieldUpdateOperationsInput | boolean
    rut?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    mail?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    lendings?: LendingUpdateManyWithoutBorrowerNestedInput
    teacher?: TeacherUpdateOneWithoutBorrowerIdNestedInput
    assistant?: AssistantUpdateOneWithoutBorrowerIdNestedInput
  }

  export type BorrowerUncheckedUpdateWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    state?: BoolFieldUpdateOperationsInput | boolean
    rut?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    mail?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    lendings?: LendingUncheckedUpdateManyWithoutBorrowerNestedInput
    teacher?: TeacherUncheckedUpdateOneWithoutBorrowerIdNestedInput
    assistant?: AssistantUncheckedUpdateOneWithoutBorrowerIdNestedInput
  }

  export type DegreeUpsertWithoutStudentsInput = {
    update: XOR<DegreeUpdateWithoutStudentsInput, DegreeUncheckedUpdateWithoutStudentsInput>
    create: XOR<DegreeCreateWithoutStudentsInput, DegreeUncheckedCreateWithoutStudentsInput>
    where?: DegreeWhereInput
  }

  export type DegreeUpdateToOneWithWhereWithoutStudentsInput = {
    where?: DegreeWhereInput
    data: XOR<DegreeUpdateWithoutStudentsInput, DegreeUncheckedUpdateWithoutStudentsInput>
  }

  export type DegreeUpdateWithoutStudentsInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type DegreeUncheckedUpdateWithoutStudentsInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type StudentCreateWithoutDegreeInput = {
    BorrowerId: BorrowerCreateNestedOneWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutDegreeInput = {
    id: number
  }

  export type StudentCreateOrConnectWithoutDegreeInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutDegreeInput, StudentUncheckedCreateWithoutDegreeInput>
  }

  export type StudentCreateManyDegreeInputEnvelope = {
    data: StudentCreateManyDegreeInput | StudentCreateManyDegreeInput[]
    skipDuplicates?: boolean
  }

  export type StudentUpsertWithWhereUniqueWithoutDegreeInput = {
    where: StudentWhereUniqueInput
    update: XOR<StudentUpdateWithoutDegreeInput, StudentUncheckedUpdateWithoutDegreeInput>
    create: XOR<StudentCreateWithoutDegreeInput, StudentUncheckedCreateWithoutDegreeInput>
  }

  export type StudentUpdateWithWhereUniqueWithoutDegreeInput = {
    where: StudentWhereUniqueInput
    data: XOR<StudentUpdateWithoutDegreeInput, StudentUncheckedUpdateWithoutDegreeInput>
  }

  export type StudentUpdateManyWithWhereWithoutDegreeInput = {
    where: StudentScalarWhereInput
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyWithoutDegreeInput>
  }

  export type StudentScalarWhereInput = {
    AND?: StudentScalarWhereInput | StudentScalarWhereInput[]
    OR?: StudentScalarWhereInput[]
    NOT?: StudentScalarWhereInput | StudentScalarWhereInput[]
    id?: IntFilter<"Student"> | number
    codeDegree?: StringFilter<"Student"> | string
  }

  export type BorrowerCreateWithoutTeacherInput = {
    state?: boolean
    rut: string
    name: string
    mail?: string | null
    phoneNumber?: number | null
    type: $Enums.UserType
    lendings?: LendingCreateNestedManyWithoutBorrowerInput
    student?: StudentCreateNestedOneWithoutBorrowerIdInput
    assistant?: AssistantCreateNestedOneWithoutBorrowerIdInput
  }

  export type BorrowerUncheckedCreateWithoutTeacherInput = {
    id?: number
    state?: boolean
    rut: string
    name: string
    mail?: string | null
    phoneNumber?: number | null
    type: $Enums.UserType
    lendings?: LendingUncheckedCreateNestedManyWithoutBorrowerInput
    student?: StudentUncheckedCreateNestedOneWithoutBorrowerIdInput
    assistant?: AssistantUncheckedCreateNestedOneWithoutBorrowerIdInput
  }

  export type BorrowerCreateOrConnectWithoutTeacherInput = {
    where: BorrowerWhereUniqueInput
    create: XOR<BorrowerCreateWithoutTeacherInput, BorrowerUncheckedCreateWithoutTeacherInput>
  }

  export type LendingCreateWithoutTeacherInput = {
    state?: $Enums.LendingState
    date?: Date | string
    finalizeDate?: Date | string | null
    eliminateDate?: Date | string | null
    comments?: string | null
    borrower: BorrowerCreateNestedOneWithoutLendingsInput
    alerts?: AlertLendingCreateNestedManyWithoutLendingInput
    lendingProducts?: LendingProductCreateNestedManyWithoutLendingInput
  }

  export type LendingUncheckedCreateWithoutTeacherInput = {
    id?: number
    state?: $Enums.LendingState
    date?: Date | string
    finalizeDate?: Date | string | null
    eliminateDate?: Date | string | null
    comments?: string | null
    BorrowerId: number
    alerts?: AlertLendingUncheckedCreateNestedManyWithoutLendingInput
    lendingProducts?: LendingProductUncheckedCreateNestedManyWithoutLendingInput
  }

  export type LendingCreateOrConnectWithoutTeacherInput = {
    where: LendingWhereUniqueInput
    create: XOR<LendingCreateWithoutTeacherInput, LendingUncheckedCreateWithoutTeacherInput>
  }

  export type LendingCreateManyTeacherInputEnvelope = {
    data: LendingCreateManyTeacherInput | LendingCreateManyTeacherInput[]
    skipDuplicates?: boolean
  }

  export type BorrowerUpsertWithoutTeacherInput = {
    update: XOR<BorrowerUpdateWithoutTeacherInput, BorrowerUncheckedUpdateWithoutTeacherInput>
    create: XOR<BorrowerCreateWithoutTeacherInput, BorrowerUncheckedCreateWithoutTeacherInput>
    where?: BorrowerWhereInput
  }

  export type BorrowerUpdateToOneWithWhereWithoutTeacherInput = {
    where?: BorrowerWhereInput
    data: XOR<BorrowerUpdateWithoutTeacherInput, BorrowerUncheckedUpdateWithoutTeacherInput>
  }

  export type BorrowerUpdateWithoutTeacherInput = {
    state?: BoolFieldUpdateOperationsInput | boolean
    rut?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    mail?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    lendings?: LendingUpdateManyWithoutBorrowerNestedInput
    student?: StudentUpdateOneWithoutBorrowerIdNestedInput
    assistant?: AssistantUpdateOneWithoutBorrowerIdNestedInput
  }

  export type BorrowerUncheckedUpdateWithoutTeacherInput = {
    id?: IntFieldUpdateOperationsInput | number
    state?: BoolFieldUpdateOperationsInput | boolean
    rut?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    mail?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    lendings?: LendingUncheckedUpdateManyWithoutBorrowerNestedInput
    student?: StudentUncheckedUpdateOneWithoutBorrowerIdNestedInput
    assistant?: AssistantUncheckedUpdateOneWithoutBorrowerIdNestedInput
  }

  export type LendingUpsertWithWhereUniqueWithoutTeacherInput = {
    where: LendingWhereUniqueInput
    update: XOR<LendingUpdateWithoutTeacherInput, LendingUncheckedUpdateWithoutTeacherInput>
    create: XOR<LendingCreateWithoutTeacherInput, LendingUncheckedCreateWithoutTeacherInput>
  }

  export type LendingUpdateWithWhereUniqueWithoutTeacherInput = {
    where: LendingWhereUniqueInput
    data: XOR<LendingUpdateWithoutTeacherInput, LendingUncheckedUpdateWithoutTeacherInput>
  }

  export type LendingUpdateManyWithWhereWithoutTeacherInput = {
    where: LendingScalarWhereInput
    data: XOR<LendingUpdateManyMutationInput, LendingUncheckedUpdateManyWithoutTeacherInput>
  }

  export type BorrowerCreateWithoutAssistantInput = {
    state?: boolean
    rut: string
    name: string
    mail?: string | null
    phoneNumber?: number | null
    type: $Enums.UserType
    lendings?: LendingCreateNestedManyWithoutBorrowerInput
    student?: StudentCreateNestedOneWithoutBorrowerIdInput
    teacher?: TeacherCreateNestedOneWithoutBorrowerIdInput
  }

  export type BorrowerUncheckedCreateWithoutAssistantInput = {
    id?: number
    state?: boolean
    rut: string
    name: string
    mail?: string | null
    phoneNumber?: number | null
    type: $Enums.UserType
    lendings?: LendingUncheckedCreateNestedManyWithoutBorrowerInput
    student?: StudentUncheckedCreateNestedOneWithoutBorrowerIdInput
    teacher?: TeacherUncheckedCreateNestedOneWithoutBorrowerIdInput
  }

  export type BorrowerCreateOrConnectWithoutAssistantInput = {
    where: BorrowerWhereUniqueInput
    create: XOR<BorrowerCreateWithoutAssistantInput, BorrowerUncheckedCreateWithoutAssistantInput>
  }

  export type BorrowerUpsertWithoutAssistantInput = {
    update: XOR<BorrowerUpdateWithoutAssistantInput, BorrowerUncheckedUpdateWithoutAssistantInput>
    create: XOR<BorrowerCreateWithoutAssistantInput, BorrowerUncheckedCreateWithoutAssistantInput>
    where?: BorrowerWhereInput
  }

  export type BorrowerUpdateToOneWithWhereWithoutAssistantInput = {
    where?: BorrowerWhereInput
    data: XOR<BorrowerUpdateWithoutAssistantInput, BorrowerUncheckedUpdateWithoutAssistantInput>
  }

  export type BorrowerUpdateWithoutAssistantInput = {
    state?: BoolFieldUpdateOperationsInput | boolean
    rut?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    mail?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    lendings?: LendingUpdateManyWithoutBorrowerNestedInput
    student?: StudentUpdateOneWithoutBorrowerIdNestedInput
    teacher?: TeacherUpdateOneWithoutBorrowerIdNestedInput
  }

  export type BorrowerUncheckedUpdateWithoutAssistantInput = {
    id?: IntFieldUpdateOperationsInput | number
    state?: BoolFieldUpdateOperationsInput | boolean
    rut?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    mail?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    lendings?: LendingUncheckedUpdateManyWithoutBorrowerNestedInput
    student?: StudentUncheckedUpdateOneWithoutBorrowerIdNestedInput
    teacher?: TeacherUncheckedUpdateOneWithoutBorrowerIdNestedInput
  }

  export type LendingProductCreateWithoutProductInput = {
    amount: number
    lending: LendingCreateNestedOneWithoutLendingProductsInput
  }

  export type LendingProductUncheckedCreateWithoutProductInput = {
    lendingId: number
    amount: number
  }

  export type LendingProductCreateOrConnectWithoutProductInput = {
    where: LendingProductWhereUniqueInput
    create: XOR<LendingProductCreateWithoutProductInput, LendingProductUncheckedCreateWithoutProductInput>
  }

  export type LendingProductCreateManyProductInputEnvelope = {
    data: LendingProductCreateManyProductInput | LendingProductCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type LendingProductUpsertWithWhereUniqueWithoutProductInput = {
    where: LendingProductWhereUniqueInput
    update: XOR<LendingProductUpdateWithoutProductInput, LendingProductUncheckedUpdateWithoutProductInput>
    create: XOR<LendingProductCreateWithoutProductInput, LendingProductUncheckedCreateWithoutProductInput>
  }

  export type LendingProductUpdateWithWhereUniqueWithoutProductInput = {
    where: LendingProductWhereUniqueInput
    data: XOR<LendingProductUpdateWithoutProductInput, LendingProductUncheckedUpdateWithoutProductInput>
  }

  export type LendingProductUpdateManyWithWhereWithoutProductInput = {
    where: LendingProductScalarWhereInput
    data: XOR<LendingProductUpdateManyMutationInput, LendingProductUncheckedUpdateManyWithoutProductInput>
  }

  export type LendingProductScalarWhereInput = {
    AND?: LendingProductScalarWhereInput | LendingProductScalarWhereInput[]
    OR?: LendingProductScalarWhereInput[]
    NOT?: LendingProductScalarWhereInput | LendingProductScalarWhereInput[]
    lendingId?: IntFilter<"LendingProduct"> | number
    productId?: IntFilter<"LendingProduct"> | number
    amount?: IntFilter<"LendingProduct"> | number
  }

  export type BorrowerCreateWithoutLendingsInput = {
    state?: boolean
    rut: string
    name: string
    mail?: string | null
    phoneNumber?: number | null
    type: $Enums.UserType
    student?: StudentCreateNestedOneWithoutBorrowerIdInput
    teacher?: TeacherCreateNestedOneWithoutBorrowerIdInput
    assistant?: AssistantCreateNestedOneWithoutBorrowerIdInput
  }

  export type BorrowerUncheckedCreateWithoutLendingsInput = {
    id?: number
    state?: boolean
    rut: string
    name: string
    mail?: string | null
    phoneNumber?: number | null
    type: $Enums.UserType
    student?: StudentUncheckedCreateNestedOneWithoutBorrowerIdInput
    teacher?: TeacherUncheckedCreateNestedOneWithoutBorrowerIdInput
    assistant?: AssistantUncheckedCreateNestedOneWithoutBorrowerIdInput
  }

  export type BorrowerCreateOrConnectWithoutLendingsInput = {
    where: BorrowerWhereUniqueInput
    create: XOR<BorrowerCreateWithoutLendingsInput, BorrowerUncheckedCreateWithoutLendingsInput>
  }

  export type AlertLendingCreateWithoutLendingInput = {
    alert: AlertCreateNestedOneWithoutLendingsInput
  }

  export type AlertLendingUncheckedCreateWithoutLendingInput = {
    alertId: number
  }

  export type AlertLendingCreateOrConnectWithoutLendingInput = {
    where: AlertLendingWhereUniqueInput
    create: XOR<AlertLendingCreateWithoutLendingInput, AlertLendingUncheckedCreateWithoutLendingInput>
  }

  export type AlertLendingCreateManyLendingInputEnvelope = {
    data: AlertLendingCreateManyLendingInput | AlertLendingCreateManyLendingInput[]
    skipDuplicates?: boolean
  }

  export type TeacherCreateWithoutLendingsInput = {
    BorrowerId: BorrowerCreateNestedOneWithoutTeacherInput
  }

  export type TeacherUncheckedCreateWithoutLendingsInput = {
    id: number
  }

  export type TeacherCreateOrConnectWithoutLendingsInput = {
    where: TeacherWhereUniqueInput
    create: XOR<TeacherCreateWithoutLendingsInput, TeacherUncheckedCreateWithoutLendingsInput>
  }

  export type LendingProductCreateWithoutLendingInput = {
    amount: number
    product: productCreateNestedOneWithoutLendingProductsInput
  }

  export type LendingProductUncheckedCreateWithoutLendingInput = {
    productId: number
    amount: number
  }

  export type LendingProductCreateOrConnectWithoutLendingInput = {
    where: LendingProductWhereUniqueInput
    create: XOR<LendingProductCreateWithoutLendingInput, LendingProductUncheckedCreateWithoutLendingInput>
  }

  export type LendingProductCreateManyLendingInputEnvelope = {
    data: LendingProductCreateManyLendingInput | LendingProductCreateManyLendingInput[]
    skipDuplicates?: boolean
  }

  export type BorrowerUpsertWithoutLendingsInput = {
    update: XOR<BorrowerUpdateWithoutLendingsInput, BorrowerUncheckedUpdateWithoutLendingsInput>
    create: XOR<BorrowerCreateWithoutLendingsInput, BorrowerUncheckedCreateWithoutLendingsInput>
    where?: BorrowerWhereInput
  }

  export type BorrowerUpdateToOneWithWhereWithoutLendingsInput = {
    where?: BorrowerWhereInput
    data: XOR<BorrowerUpdateWithoutLendingsInput, BorrowerUncheckedUpdateWithoutLendingsInput>
  }

  export type BorrowerUpdateWithoutLendingsInput = {
    state?: BoolFieldUpdateOperationsInput | boolean
    rut?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    mail?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    student?: StudentUpdateOneWithoutBorrowerIdNestedInput
    teacher?: TeacherUpdateOneWithoutBorrowerIdNestedInput
    assistant?: AssistantUpdateOneWithoutBorrowerIdNestedInput
  }

  export type BorrowerUncheckedUpdateWithoutLendingsInput = {
    id?: IntFieldUpdateOperationsInput | number
    state?: BoolFieldUpdateOperationsInput | boolean
    rut?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    mail?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    student?: StudentUncheckedUpdateOneWithoutBorrowerIdNestedInput
    teacher?: TeacherUncheckedUpdateOneWithoutBorrowerIdNestedInput
    assistant?: AssistantUncheckedUpdateOneWithoutBorrowerIdNestedInput
  }

  export type AlertLendingUpsertWithWhereUniqueWithoutLendingInput = {
    where: AlertLendingWhereUniqueInput
    update: XOR<AlertLendingUpdateWithoutLendingInput, AlertLendingUncheckedUpdateWithoutLendingInput>
    create: XOR<AlertLendingCreateWithoutLendingInput, AlertLendingUncheckedCreateWithoutLendingInput>
  }

  export type AlertLendingUpdateWithWhereUniqueWithoutLendingInput = {
    where: AlertLendingWhereUniqueInput
    data: XOR<AlertLendingUpdateWithoutLendingInput, AlertLendingUncheckedUpdateWithoutLendingInput>
  }

  export type AlertLendingUpdateManyWithWhereWithoutLendingInput = {
    where: AlertLendingScalarWhereInput
    data: XOR<AlertLendingUpdateManyMutationInput, AlertLendingUncheckedUpdateManyWithoutLendingInput>
  }

  export type AlertLendingScalarWhereInput = {
    AND?: AlertLendingScalarWhereInput | AlertLendingScalarWhereInput[]
    OR?: AlertLendingScalarWhereInput[]
    NOT?: AlertLendingScalarWhereInput | AlertLendingScalarWhereInput[]
    alertId?: IntFilter<"AlertLending"> | number
    lendingId?: IntFilter<"AlertLending"> | number
  }

  export type TeacherUpsertWithoutLendingsInput = {
    update: XOR<TeacherUpdateWithoutLendingsInput, TeacherUncheckedUpdateWithoutLendingsInput>
    create: XOR<TeacherCreateWithoutLendingsInput, TeacherUncheckedCreateWithoutLendingsInput>
    where?: TeacherWhereInput
  }

  export type TeacherUpdateToOneWithWhereWithoutLendingsInput = {
    where?: TeacherWhereInput
    data: XOR<TeacherUpdateWithoutLendingsInput, TeacherUncheckedUpdateWithoutLendingsInput>
  }

  export type TeacherUpdateWithoutLendingsInput = {
    BorrowerId?: BorrowerUpdateOneRequiredWithoutTeacherNestedInput
  }

  export type TeacherUncheckedUpdateWithoutLendingsInput = {
    id?: IntFieldUpdateOperationsInput | number
  }

  export type LendingProductUpsertWithWhereUniqueWithoutLendingInput = {
    where: LendingProductWhereUniqueInput
    update: XOR<LendingProductUpdateWithoutLendingInput, LendingProductUncheckedUpdateWithoutLendingInput>
    create: XOR<LendingProductCreateWithoutLendingInput, LendingProductUncheckedCreateWithoutLendingInput>
  }

  export type LendingProductUpdateWithWhereUniqueWithoutLendingInput = {
    where: LendingProductWhereUniqueInput
    data: XOR<LendingProductUpdateWithoutLendingInput, LendingProductUncheckedUpdateWithoutLendingInput>
  }

  export type LendingProductUpdateManyWithWhereWithoutLendingInput = {
    where: LendingProductScalarWhereInput
    data: XOR<LendingProductUpdateManyMutationInput, LendingProductUncheckedUpdateManyWithoutLendingInput>
  }

  export type LendingCreateWithoutLendingProductsInput = {
    state?: $Enums.LendingState
    date?: Date | string
    finalizeDate?: Date | string | null
    eliminateDate?: Date | string | null
    comments?: string | null
    borrower: BorrowerCreateNestedOneWithoutLendingsInput
    alerts?: AlertLendingCreateNestedManyWithoutLendingInput
    teacher?: TeacherCreateNestedOneWithoutLendingsInput
  }

  export type LendingUncheckedCreateWithoutLendingProductsInput = {
    id?: number
    state?: $Enums.LendingState
    date?: Date | string
    finalizeDate?: Date | string | null
    eliminateDate?: Date | string | null
    comments?: string | null
    BorrowerId: number
    teacherId?: number | null
    alerts?: AlertLendingUncheckedCreateNestedManyWithoutLendingInput
  }

  export type LendingCreateOrConnectWithoutLendingProductsInput = {
    where: LendingWhereUniqueInput
    create: XOR<LendingCreateWithoutLendingProductsInput, LendingUncheckedCreateWithoutLendingProductsInput>
  }

  export type productCreateWithoutLendingProductsInput = {
    name: string
    description?: string | null
    stock?: number | null
    criticalStock?: number
    state?: boolean
    fungible?: boolean
  }

  export type productUncheckedCreateWithoutLendingProductsInput = {
    id?: number
    name: string
    description?: string | null
    stock?: number | null
    criticalStock?: number
    state?: boolean
    fungible?: boolean
  }

  export type productCreateOrConnectWithoutLendingProductsInput = {
    where: productWhereUniqueInput
    create: XOR<productCreateWithoutLendingProductsInput, productUncheckedCreateWithoutLendingProductsInput>
  }

  export type LendingUpsertWithoutLendingProductsInput = {
    update: XOR<LendingUpdateWithoutLendingProductsInput, LendingUncheckedUpdateWithoutLendingProductsInput>
    create: XOR<LendingCreateWithoutLendingProductsInput, LendingUncheckedCreateWithoutLendingProductsInput>
    where?: LendingWhereInput
  }

  export type LendingUpdateToOneWithWhereWithoutLendingProductsInput = {
    where?: LendingWhereInput
    data: XOR<LendingUpdateWithoutLendingProductsInput, LendingUncheckedUpdateWithoutLendingProductsInput>
  }

  export type LendingUpdateWithoutLendingProductsInput = {
    state?: EnumLendingStateFieldUpdateOperationsInput | $Enums.LendingState
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    finalizeDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eliminateDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    borrower?: BorrowerUpdateOneRequiredWithoutLendingsNestedInput
    alerts?: AlertLendingUpdateManyWithoutLendingNestedInput
    teacher?: TeacherUpdateOneWithoutLendingsNestedInput
  }

  export type LendingUncheckedUpdateWithoutLendingProductsInput = {
    id?: IntFieldUpdateOperationsInput | number
    state?: EnumLendingStateFieldUpdateOperationsInput | $Enums.LendingState
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    finalizeDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eliminateDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    BorrowerId?: IntFieldUpdateOperationsInput | number
    teacherId?: NullableIntFieldUpdateOperationsInput | number | null
    alerts?: AlertLendingUncheckedUpdateManyWithoutLendingNestedInput
  }

  export type productUpsertWithoutLendingProductsInput = {
    update: XOR<productUpdateWithoutLendingProductsInput, productUncheckedUpdateWithoutLendingProductsInput>
    create: XOR<productCreateWithoutLendingProductsInput, productUncheckedCreateWithoutLendingProductsInput>
    where?: productWhereInput
  }

  export type productUpdateToOneWithWhereWithoutLendingProductsInput = {
    where?: productWhereInput
    data: XOR<productUpdateWithoutLendingProductsInput, productUncheckedUpdateWithoutLendingProductsInput>
  }

  export type productUpdateWithoutLendingProductsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
    criticalStock?: IntFieldUpdateOperationsInput | number
    state?: BoolFieldUpdateOperationsInput | boolean
    fungible?: BoolFieldUpdateOperationsInput | boolean
  }

  export type productUncheckedUpdateWithoutLendingProductsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
    criticalStock?: IntFieldUpdateOperationsInput | number
    state?: BoolFieldUpdateOperationsInput | boolean
    fungible?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AlertLendingCreateWithoutAlertInput = {
    lending: LendingCreateNestedOneWithoutAlertsInput
  }

  export type AlertLendingUncheckedCreateWithoutAlertInput = {
    lendingId: number
  }

  export type AlertLendingCreateOrConnectWithoutAlertInput = {
    where: AlertLendingWhereUniqueInput
    create: XOR<AlertLendingCreateWithoutAlertInput, AlertLendingUncheckedCreateWithoutAlertInput>
  }

  export type AlertLendingCreateManyAlertInputEnvelope = {
    data: AlertLendingCreateManyAlertInput | AlertLendingCreateManyAlertInput[]
    skipDuplicates?: boolean
  }

  export type AlertLendingUpsertWithWhereUniqueWithoutAlertInput = {
    where: AlertLendingWhereUniqueInput
    update: XOR<AlertLendingUpdateWithoutAlertInput, AlertLendingUncheckedUpdateWithoutAlertInput>
    create: XOR<AlertLendingCreateWithoutAlertInput, AlertLendingUncheckedCreateWithoutAlertInput>
  }

  export type AlertLendingUpdateWithWhereUniqueWithoutAlertInput = {
    where: AlertLendingWhereUniqueInput
    data: XOR<AlertLendingUpdateWithoutAlertInput, AlertLendingUncheckedUpdateWithoutAlertInput>
  }

  export type AlertLendingUpdateManyWithWhereWithoutAlertInput = {
    where: AlertLendingScalarWhereInput
    data: XOR<AlertLendingUpdateManyMutationInput, AlertLendingUncheckedUpdateManyWithoutAlertInput>
  }

  export type AlertCreateWithoutLendingsInput = {
    date: Date | string
    name: string
    description: string
    state?: boolean
  }

  export type AlertUncheckedCreateWithoutLendingsInput = {
    id?: number
    date: Date | string
    name: string
    description: string
    state?: boolean
  }

  export type AlertCreateOrConnectWithoutLendingsInput = {
    where: AlertWhereUniqueInput
    create: XOR<AlertCreateWithoutLendingsInput, AlertUncheckedCreateWithoutLendingsInput>
  }

  export type LendingCreateWithoutAlertsInput = {
    state?: $Enums.LendingState
    date?: Date | string
    finalizeDate?: Date | string | null
    eliminateDate?: Date | string | null
    comments?: string | null
    borrower: BorrowerCreateNestedOneWithoutLendingsInput
    teacher?: TeacherCreateNestedOneWithoutLendingsInput
    lendingProducts?: LendingProductCreateNestedManyWithoutLendingInput
  }

  export type LendingUncheckedCreateWithoutAlertsInput = {
    id?: number
    state?: $Enums.LendingState
    date?: Date | string
    finalizeDate?: Date | string | null
    eliminateDate?: Date | string | null
    comments?: string | null
    BorrowerId: number
    teacherId?: number | null
    lendingProducts?: LendingProductUncheckedCreateNestedManyWithoutLendingInput
  }

  export type LendingCreateOrConnectWithoutAlertsInput = {
    where: LendingWhereUniqueInput
    create: XOR<LendingCreateWithoutAlertsInput, LendingUncheckedCreateWithoutAlertsInput>
  }

  export type AlertUpsertWithoutLendingsInput = {
    update: XOR<AlertUpdateWithoutLendingsInput, AlertUncheckedUpdateWithoutLendingsInput>
    create: XOR<AlertCreateWithoutLendingsInput, AlertUncheckedCreateWithoutLendingsInput>
    where?: AlertWhereInput
  }

  export type AlertUpdateToOneWithWhereWithoutLendingsInput = {
    where?: AlertWhereInput
    data: XOR<AlertUpdateWithoutLendingsInput, AlertUncheckedUpdateWithoutLendingsInput>
  }

  export type AlertUpdateWithoutLendingsInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    state?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AlertUncheckedUpdateWithoutLendingsInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    state?: BoolFieldUpdateOperationsInput | boolean
  }

  export type LendingUpsertWithoutAlertsInput = {
    update: XOR<LendingUpdateWithoutAlertsInput, LendingUncheckedUpdateWithoutAlertsInput>
    create: XOR<LendingCreateWithoutAlertsInput, LendingUncheckedCreateWithoutAlertsInput>
    where?: LendingWhereInput
  }

  export type LendingUpdateToOneWithWhereWithoutAlertsInput = {
    where?: LendingWhereInput
    data: XOR<LendingUpdateWithoutAlertsInput, LendingUncheckedUpdateWithoutAlertsInput>
  }

  export type LendingUpdateWithoutAlertsInput = {
    state?: EnumLendingStateFieldUpdateOperationsInput | $Enums.LendingState
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    finalizeDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eliminateDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    borrower?: BorrowerUpdateOneRequiredWithoutLendingsNestedInput
    teacher?: TeacherUpdateOneWithoutLendingsNestedInput
    lendingProducts?: LendingProductUpdateManyWithoutLendingNestedInput
  }

  export type LendingUncheckedUpdateWithoutAlertsInput = {
    id?: IntFieldUpdateOperationsInput | number
    state?: EnumLendingStateFieldUpdateOperationsInput | $Enums.LendingState
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    finalizeDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eliminateDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    BorrowerId?: IntFieldUpdateOperationsInput | number
    teacherId?: NullableIntFieldUpdateOperationsInput | number | null
    lendingProducts?: LendingProductUncheckedUpdateManyWithoutLendingNestedInput
  }

  export type LendingCreateManyBorrowerInput = {
    id?: number
    state?: $Enums.LendingState
    date?: Date | string
    finalizeDate?: Date | string | null
    eliminateDate?: Date | string | null
    comments?: string | null
    teacherId?: number | null
  }

  export type LendingUpdateWithoutBorrowerInput = {
    state?: EnumLendingStateFieldUpdateOperationsInput | $Enums.LendingState
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    finalizeDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eliminateDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    alerts?: AlertLendingUpdateManyWithoutLendingNestedInput
    teacher?: TeacherUpdateOneWithoutLendingsNestedInput
    lendingProducts?: LendingProductUpdateManyWithoutLendingNestedInput
  }

  export type LendingUncheckedUpdateWithoutBorrowerInput = {
    id?: IntFieldUpdateOperationsInput | number
    state?: EnumLendingStateFieldUpdateOperationsInput | $Enums.LendingState
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    finalizeDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eliminateDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    teacherId?: NullableIntFieldUpdateOperationsInput | number | null
    alerts?: AlertLendingUncheckedUpdateManyWithoutLendingNestedInput
    lendingProducts?: LendingProductUncheckedUpdateManyWithoutLendingNestedInput
  }

  export type LendingUncheckedUpdateManyWithoutBorrowerInput = {
    id?: IntFieldUpdateOperationsInput | number
    state?: EnumLendingStateFieldUpdateOperationsInput | $Enums.LendingState
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    finalizeDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eliminateDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    teacherId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type StudentCreateManyDegreeInput = {
    id: number
  }

  export type StudentUpdateWithoutDegreeInput = {
    BorrowerId?: BorrowerUpdateOneRequiredWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutDegreeInput = {
    id?: IntFieldUpdateOperationsInput | number
  }

  export type StudentUncheckedUpdateManyWithoutDegreeInput = {
    id?: IntFieldUpdateOperationsInput | number
  }

  export type LendingCreateManyTeacherInput = {
    id?: number
    state?: $Enums.LendingState
    date?: Date | string
    finalizeDate?: Date | string | null
    eliminateDate?: Date | string | null
    comments?: string | null
    BorrowerId: number
  }

  export type LendingUpdateWithoutTeacherInput = {
    state?: EnumLendingStateFieldUpdateOperationsInput | $Enums.LendingState
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    finalizeDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eliminateDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    borrower?: BorrowerUpdateOneRequiredWithoutLendingsNestedInput
    alerts?: AlertLendingUpdateManyWithoutLendingNestedInput
    lendingProducts?: LendingProductUpdateManyWithoutLendingNestedInput
  }

  export type LendingUncheckedUpdateWithoutTeacherInput = {
    id?: IntFieldUpdateOperationsInput | number
    state?: EnumLendingStateFieldUpdateOperationsInput | $Enums.LendingState
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    finalizeDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eliminateDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    BorrowerId?: IntFieldUpdateOperationsInput | number
    alerts?: AlertLendingUncheckedUpdateManyWithoutLendingNestedInput
    lendingProducts?: LendingProductUncheckedUpdateManyWithoutLendingNestedInput
  }

  export type LendingUncheckedUpdateManyWithoutTeacherInput = {
    id?: IntFieldUpdateOperationsInput | number
    state?: EnumLendingStateFieldUpdateOperationsInput | $Enums.LendingState
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    finalizeDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eliminateDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    BorrowerId?: IntFieldUpdateOperationsInput | number
  }

  export type LendingProductCreateManyProductInput = {
    lendingId: number
    amount: number
  }

  export type LendingProductUpdateWithoutProductInput = {
    amount?: IntFieldUpdateOperationsInput | number
    lending?: LendingUpdateOneRequiredWithoutLendingProductsNestedInput
  }

  export type LendingProductUncheckedUpdateWithoutProductInput = {
    lendingId?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
  }

  export type LendingProductUncheckedUpdateManyWithoutProductInput = {
    lendingId?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
  }

  export type AlertLendingCreateManyLendingInput = {
    alertId: number
  }

  export type LendingProductCreateManyLendingInput = {
    productId: number
    amount: number
  }

  export type AlertLendingUpdateWithoutLendingInput = {
    alert?: AlertUpdateOneRequiredWithoutLendingsNestedInput
  }

  export type AlertLendingUncheckedUpdateWithoutLendingInput = {
    alertId?: IntFieldUpdateOperationsInput | number
  }

  export type AlertLendingUncheckedUpdateManyWithoutLendingInput = {
    alertId?: IntFieldUpdateOperationsInput | number
  }

  export type LendingProductUpdateWithoutLendingInput = {
    amount?: IntFieldUpdateOperationsInput | number
    product?: productUpdateOneRequiredWithoutLendingProductsNestedInput
  }

  export type LendingProductUncheckedUpdateWithoutLendingInput = {
    productId?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
  }

  export type LendingProductUncheckedUpdateManyWithoutLendingInput = {
    productId?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
  }

  export type AlertLendingCreateManyAlertInput = {
    lendingId: number
  }

  export type AlertLendingUpdateWithoutAlertInput = {
    lending?: LendingUpdateOneRequiredWithoutAlertsNestedInput
  }

  export type AlertLendingUncheckedUpdateWithoutAlertInput = {
    lendingId?: IntFieldUpdateOperationsInput | number
  }

  export type AlertLendingUncheckedUpdateManyWithoutAlertInput = {
    lendingId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use BorrowerCountOutputTypeDefaultArgs instead
     */
    export type BorrowerCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BorrowerCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DegreeCountOutputTypeDefaultArgs instead
     */
    export type DegreeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DegreeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TeacherCountOutputTypeDefaultArgs instead
     */
    export type TeacherCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TeacherCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProductCountOutputTypeDefaultArgs instead
     */
    export type ProductCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProductCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LendingCountOutputTypeDefaultArgs instead
     */
    export type LendingCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LendingCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AlertCountOutputTypeDefaultArgs instead
     */
    export type AlertCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AlertCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BorrowerDefaultArgs instead
     */
    export type BorrowerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BorrowerDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StudentDefaultArgs instead
     */
    export type StudentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StudentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DegreeDefaultArgs instead
     */
    export type DegreeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DegreeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TeacherDefaultArgs instead
     */
    export type TeacherArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TeacherDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AssistantDefaultArgs instead
     */
    export type AssistantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AssistantDefaultArgs<ExtArgs>
    /**
     * @deprecated Use productDefaultArgs instead
     */
    export type productArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = productDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LendingDefaultArgs instead
     */
    export type LendingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LendingDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LendingProductDefaultArgs instead
     */
    export type LendingProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LendingProductDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AlertDefaultArgs instead
     */
    export type AlertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AlertDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AlertLendingDefaultArgs instead
     */
    export type AlertLendingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AlertLendingDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}